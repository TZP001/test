
VAR
  Next_tool_no	    : INTEGER
  cur_tool_number   : INTEGER
  cur_tool_name	    : STRING
  Tool_offset	    : ARRAY[65] OF REAL

CONST
  D_OFF                 0
  D_ON                  1
  X_AXS                 1
  Y_AXS                 2
  Z_AXS                 3
  DELAY_TIME            3.0

STATE
  g_Spin_flood_coolant, MODAL: S_OFF, S_ON

REGISTER
  R_AXIS1, UNIT_MULTIPLIER = TO_MM, MODAL
  R_AXIS2, UNIT_MULTIPLIER = TO_MM, MODAL
  R_AXIS3, UNIT_MULTIPLIER = TO_MM, MODAL
  R_OLD_AXIS1,    UNIT_MULTIPLIER = TO_MM, MODAL
  R_OLD_AXIS2,    UNIT_MULTIPLIER = TO_MM, MODAL
  R_OLD_AXIS3,    UNIT_MULTIPLIER = TO_MM, MODAL


  R_TO_MM,         DEFAULT_VALUE = 1.0,     MODAL
  R_TO_MM_PER_SEC, DEFAULT_VALUE = .016667, MODAL

  R_FEEDRATE,  DEFAULT_VALUE = 100.0, UNIT_MULTIPLIER = TO_MM_PER_SEC, MODAL
  R_RAPIDRATE, DEFAULT_VALUE = 100.0, UNIT_MULTIPLIER = TO_MM_PER_SEC, MODAL
  R_SPINRATE,  DEFAULT_VALUE = 10.0,  UNIT_MULTIPLIER = UNITLESS,      MODAL

OFFSET
  o_ORIGIN_OFS
  o_INITIAL
  o_CUTTER_LENGTH
    
CONTROL_CHARS 
  TYPE_II_START_CHARS: '('        
  TYPE_II_END_CHARS: ')'         
  IGNORE_CHARS: '\r\t %^'    
  END_OF_BLOCK_CHAR: '\n'
  EOL_COMMENT_CHARS: '/'
  IGNORE_BLOCK_END_CHAR: '\\'
  BEGIN_PROG_EXEC_STR: ''

CODE_DEFINITION
  X, EXECUTE
    BEGIN 
      SET_REGISTER(R_OLD_AXIS1, REGISTER_VALUE(R_AXIS1))
      SET_REGISTER( R_AXIS1, CODE_VALUE( 'X' ) ) 
    END

  Y, EXECUTE
    BEGIN
      SET_REGISTER(R_OLD_AXIS2, REGISTER_VALUE(R_AXIS2))
      SET_REGISTER(R_AXIS2, -CODE_VALUE( 'Y' ) ) 
   END

  Z, EXECUTE
    BEGIN
      SET_REGISTER(R_OLD_AXIS3, REGISTER_VALUE(R_AXIS3))
      SET_REGISTER( R_AXIS3, -CODE_VALUE( 'Z' ) )
    END

  I, EXECUTE
    BEGIN
      SET_REGISTER( R_X_DISTANCE, CODE_VALUE( 'I' ) ) 
--      SET_REGISTER( R_X_DISTANCE, CODE_VALUE( 'I' ) - REGISTER_VALUE(R_OLD_AXIS1))
    END

  J, EXECUTE
    BEGIN
      SET_REGISTER( R_Y_DISTANCE, -CODE_VALUE( 'J' ) ) 
--      SET_REGISTER( R_Y_DISTANCE, CODE_VALUE( 'J' ) - REGISTER_VALUE(R_OLD_AXIS2))
    END

  K, EXECUTE
    BEGIN
      SET_REGISTER( R_Z_DISTANCE, - CODE_VALUE( 'K' ) )
--      SET_REGISTER( R_Z_DISTANCE, - CODE_VALUE( 'K' ) - REGISTER_VALUE(R_OLD_AXIS3))
    END

  F, EXECUTE 
    BEGIN
      IF( IS_CODE_ON_BLOCK( 'G', 04 ) ) THEN
        SET_REGISTER( R_ELAPSED_TIME, CODE_VALUE( 'F' ) )
      ELSE
	  SET_REGISTER( R_FEEDRATE, CODE_VALUE( 'F' ) )
      ENDIF
    END

  S, EXECUTE
    BEGIN
      SET_REGISTER( R_SPINRATE, CODE_VALUE( 'S' ) )
    END

  T, EXECUTE 
    BEGIN
      Next_tool_no = CODE_VALUE( 'T' )
      SET_DOUT( 1, Next_tool_no ) 
    END

  R, EXECUTE
    BEGIN
      SET_REGISTER( R_RADIUS, CODE_VALUE( 'R' ) )
    END

  N, EXECUTE
    BEGIN
      SET_REGISTER( R_BLOCK_NUMBER, CODE_VALUE( 'N' ) )
    END

  O, EXECUTE
    BEGIN
      SET_REGISTER( R_BLOCK_NUMBER, CODE_VALUE( 'O' ) )
    END

  D, EXECUTE
    BEGIN
      SET_REGISTER( R_CUTTER_RADIUS_COMP, CODE_VALUE( 'D' ) ) 
    END

  H, EXECUTE
    BEGIN
    END

  G00, EXECUTE
    BEGIN
      SET_STATE( G_MOTION_TYPE, S_RAPID )
      SET_STATE( G_SLEW, S_ON )
      SET_STATE( G_STOCK_UPDATE, S_OFF )
    END

  G01, EXECUTE
    BEGIN
      SET_STATE( G_MOTION_TYPE, S_FEED )
      SET_STATE( G_SLEW, S_OFF )
      SET_STATE( G_STOCK_UPDATE, S_ON )
    END

  G02, EXECUTE
    BEGIN
      SET_STATE( G_MOTION_TYPE, S_CCW2)
      SET_STATE( G_SLEW, S_OFF )
      SET_STATE( G_STOCK_UPDATE, S_ON )
    END

  G03, EXECUTE
    BEGIN
      SET_STATE( G_MOTION_TYPE, S_CW2)
      SET_STATE( G_SLEW, S_OFF )
      SET_STATE( G_STOCK_UPDATE, S_ON )
    END

  G04, EXECUTE 
    BEGIN
        DWELL()
    END

  G17, EXECUTE
    BEGIN
      SET_STATE( G_PLANE, S_X_Y )
    END

  G18,EXECUTE
    BEGIN
       SET_STATE( G_PLANE, S_Z_X )
    END

  G19,EXECUTE
    BEGIN
       SET_STATE( G_PLANE, S_Y_Z )
    END

  G40, EXECUTE 
    BEGIN
      SET_STATE( G_CUTTER_COMP, S_OFF )
    END

  G41, EXECUTE
    BEGIN
      SET_STATE( G_CUTTER_COMP, S_LEFT )
    END

  G42, EXECUTE
    BEGIN
      SET_STATE( G_CUTTER_COMP, S_RIGHT )
    END

  G70, EXECUTE --Inch mode 
    BEGIN
      SET_REGISTER( R_TO_MM, 25.4 )      
      SET_REGISTER( R_TO_MM_PER_SEC, 25.4/60 ) 
    END

  G71, EXECUTE --Metric mode 
    BEGIN
      SET_REGISTER( R_TO_MM, 1.0 )       
      SET_REGISTER( R_TO_MM_PER_SEC, 1.0/60 ) 
    END

  G90, EXECUTE 
    BEGIN
      SET_STATE( G_POSITION, S_ABSOLUTE )
    END

  G91, EXECUTE 
    BEGIN
      SET_STATE( G_POSITION, S_RELATIVE )
    END

  G92, EXECUTE 
    BEGIN
      SET_OFFSET( o_ORIGIN_OFS ) 
      ENABLE_OFFSET( o_ORIGIN_OFS ) 
    END

  M00, EXECUTE
    BEGIN
      CYCLE_STOP()
    END

  M02, EXECUTE
    BEGIN
      SET_STATE( G_STOCK_UPDATE, S_OFF )
      SET_STATE( G_COLLISION_CHECK, S_OFF )
      SET_DOUT( 1, D_OFF )
      SET_DOUT( 2, D_OFF )
    END

  M03, EXECUTE
    BEGIN
      SET_STATE( G_SPINDLE_MODE, S_CW )
    END

  M04, EXECUTE
    BEGIN
      SET_STATE( G_SPINDLE_MODE, S_CCW )
    END

  M05, EXECUTE
    BEGIN
      SET_STATE( G_SPINDLE_MODE, S_STOPPED )

      SET_STATE( g_Spin_flood_coolant, S_OFF )
    END

  M06, EXECUTE
    BEGIN
      Load_tool( )
    END

  M08, EXECUTE
    BEGIN
      SET_STATE( g_Spin_flood_coolant, S_ON )
    END

  M09, EXECUTE
    BEGIN
      SET_STATE( g_Spin_flood_coolant, S_OFF )
    END

-------------------- BEGIN APPLICATION ESCAPE PROCEDURES --------------------
-------------------- BEGIN APPLICATION ESCAPE PROCEDURES --------------------
-------------------- BEGIN APPLICATION ESCAPE PROCEDURES --------------------
-----------------------------------------------------------------------------

PROCEDURE INITIALIZE_CYCLE( )

BEGIN

  SET_STATE( G_LEAST_SQUARE_NORM, S_ON )
  SET_STATE( G_CONVEX_HULL_SWEEP, S_ON )
  SET_STATE( G_CUTTING_MODE, S_MILLING )
  SET_STATE( G_MOTION_TYPE, S_FEED ) 
  SET_STATE( G_SLEW, S_OFF ) 
  SET_STATE( G_CUTTING_MODE, S_MILLING ) 
  SET_STATE( G_EXACT_STOP, S_OFF ) 

  -- Absolute coordinates by default
  SET_STATE( G_POSITION, S_ABSOLUTE )

  -- Default : metric mode
  SET_REGISTER( R_TO_MM, 1.0 )       
  SET_REGISTER( R_TO_MM_PER_SEC, 1.0/60.0 ) 

  cur_tool_name = ""
  cur_tool_number = 0
  Next_tool_no = 0

  Load_ToolOffset()

  CHANGE_AN_OFFSET( o_INITIAL, 1, 0.0)
  CHANGE_AN_OFFSET( o_INITIAL, 2, -127.0)
  CHANGE_AN_OFFSET( o_INITIAL, 3, 673.1)

  ENABLE_OFFSET( o_INITIAL )

  OPEN WINDOW 'Collision Stats' @ .8,-1 : 3 AS 1

  CLI( "TRACE DELETE_ALL" )

  SET_WORKPIECE( "WP" )

  SET_STATE( G_COLLISION_CHECK, S_ON )

END INITIALIZE_CYCLE

PROCEDURE FINALIZE_CYCLE()

-----------------------------------------------------------------------------

BEGIN
  --WRITE( "Finalizing program", CR )
END FINALIZE_CYCLE

-----------------------------------------------------------------------------

PROCEDURE EOB()

BEGIN
  STD_MOTION( ) 
END EOB
-----------------------------------------------------------------------------


-------------------------- BEGIN LOCAL PROCEDURES ---------------------------
-------------------------- BEGIN LOCAL PROCEDURES ---------------------------
-------------------------- BEGIN LOCAL PROCEDURES ---------------------------


----------------------------- Tool management -------------------------------

PROCEDURE Load_ToolOffset()

VAR
  ProgName, OffsetFile : STRING
  PosPoint : INTEGER
  ToolNb : INTEGER
  OffValue : REAL
  INDX : INTEGER

BEGIN


  FOR INDX=0 TO 64 DO
    Tool_offset[INDX] = -1
  ENDFOR

  ProgName = NC_PROGRAM_NAME()
  PosPoint = index_ci(ProgName,'.CNC')-1
  OffsetFile = LEFTSTR(ProgName,PosPoint) + '.OFS'

  WRITE ('Opening Offset file : ')
  WRITE (OffsetFile,CR)

  IF (FILE_EXISTS(OffsetFile)) THEN
    WRITE (' -------------------------------',CR)
    WRITE( 'Reading Tool offsets file : ' + OffsetFile , CR )
    WRITE (' ',CR)
    OPEN FILE OffsetFile FOR INPUT AS 3
    WHILE( READ(#3,ToolNb,OffValue) > 0 ) DO
      Tool_offset[ToolNb] = OffValue
    ENDWHILE
    CLOSE #3
  ELSE
    WRITE (' -------------------------------',CR)
    WRITE ('Warning, no tool offset file found for the program : ')
    WRITE (ProgName , CR)
    WRITE (' -------------------------------',CR)
    WRITE (' ',CR)
  ENDIF

END Load_ToolOffset



PROCEDURE Load_tool()

VAR
  new_tool_name : STRING
  tag_name	: STRING
  attach_str	: STRING

BEGIN

  SET_DOUT( 2, D_ON )
  WAIT_FOR_DIN( 2, D_ON )
  SET_DOUT( 2, D_OFF )

  SET_REGISTER( R_TOOL_NO, Next_tool_no )

  IF( cur_tool_name <> "") THEN
    tag_name = STR( "t%g", cur_tool_number)
    attach_str = "ATTACH DEVICE '" + cur_tool_name + "' at TAG '" + tag_name + "'"
    CLI(attach_str)
  ENDIF

  new_tool_name = STR( "T%g", Next_tool_no)
  cur_tool_name = new_tool_name
  cur_tool_number = Next_tool_no

  attach_str = "ATTACH DEVICE '" + cur_tool_name + "' at TAG 'gauge_point'" 
  CLI(attach_str)

  SET_TOOL( new_tool_name )
  SET_UTOOL( 0,0,TOOL_LENGTH( new_tool_name ),0,0,0 )

  WRITE (' -------------------------------',CR)

  WRITE ('Calling Tool : ')
  WRITE (new_tool_name,CR)

  IF(Tool_offset[Next_tool_no] <> -1) THEN
    WRITE ('Tool offset : ')
    WRITE (Tool_offset[Next_tool_no],CR)
    CHANGE_AN_OFFSET( o_CUTTER_LENGTH, 3, -Tool_offset[Next_tool_no])
    ENABLE_OFFSET( o_CUTTER_LENGTH )
  ELSE
    WRITE ('WARNING : No tool offset for tool ')
    WRITE (new_tool_name,CR)
  ENDIF

  WRITE (' -------------------------------',CR)

END Load_tool

-------------------------- Tool management: End -----------------------------


-----------------------------------------------------------------------------
