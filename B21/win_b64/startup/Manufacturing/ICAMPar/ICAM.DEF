# CAM-POST Version 17.0
# (c) copyright 2006
# ICAM Technologies Corporation
#
# This file contains definitions which modify the default behavior of 
# CAM-POST.  On the as-delivered file all definitions are commented out 
# using the "#" character. To make use of a definition, remove the leading 
# "#" on lines starting with "let".
#
begin campost
#
# General parameters
# ------------------
#
#   Units: Specifies the default unit of measure.
#   Specifies the default unit of measure to be used before the 
#   first UNIT statement or in the absence of a UNIT statement. 
#   It can be set to "mm" or "inch".  Set it to "mm" if the majority 
#   of CL files are in metric and set it to "inch" if the majority 
#   of CL files are in imperial units.
#
#     let units = inch                  # inch, mm
#
#   Lines per page for printed output. If 0 (zero) is specified, there
#   will be no page breaks and headers will be output at the top of the
#   program and at the top of the program summary only.
#
#     let lines_per_page = 60
#
#   page_format specifies the output format of the verification listing.
#   If "fcc" is chosen, the first character of each output line will control
#   the printer. If "list" is chosen, no special codes are output except for
#   a formfeed character at the start of each page. The default is list
#   directed output.
#
#     let page_format = list		# fcc, list
#
#   macro_format specifies the default format for macro code. With the
#   "standard" format, macro code is displayed using uppercase characters
#   and standard ANSI APT operators (e.g., .EQ.). The "C" format displays
#   macro code using lowercase characters and standard ANSI C operators
#   (e.g., == ). The default is "standard" format.
#
#     let macro_format = standard	# standard, c
#
#   Language: If a language name is given, then the definition value for
#   that name will be used to derive the path name of the files containing
#   text. The default root directory is $icam_lib unless a specific language
#   root directory is given.
#
#     let language = "english"		# english, french, german
#     let language_dir = "$icam_lib\bin\$icam_bin\lang"
#
#   Major and minor words: Specifies a file containing additional major and
#   minor words and codes used by your CAM system. By default, ICAM software
#   uses the ISO standard words with common extensions.
#
#     let words = "$icam_lib\dwords.dat"
#
#   File locking uses the inherent scheme for a given operating system.
#   This is referred to as a "system" lock. If there are problems with
#   file locking on a particular system, the software can simulate file
#   locking be creating and managing a "file" lock. It is recommended
#   that this variable be set to "system" (the default) and only changed
#   if problems are encountered. File locking can be disabled by
#   specifying "no".
#
      let file_locks = no		# no, system, file
#
#   Background color and background line draw color can be defined for both
#   Quest and Gener. These parameters are used when Quest is running at
#   interface level 1 or higher, or when Gener is using the verbose window.
#
#     let background = "white"
#     let backline = "black"
#
# Quest parameters
# ----------------
#
#  Quest startup environment: This parameter is used to initialize
#  your Quest startup state. Specify "blank" to start QUEST at the
#  Database tab, without any posts opened for editing. Specify "new" to
#  start QUEST with a new post ready for editing. Specify "last" to
#  have QUEST automatically restore the posts, models and control
#  emulators you had opened when you last exited QUEST.
#
#     let env_startup = "new"		# blank, new, last
#
#
#   User defined questions: If a file name is given, then the
#   name will be used to locate the user defined questions. If a name is
#   not given then the language areas will be scanned for a file named
#   "usrdef.q". This allows the user defined questions to be defined in
#   both languages.
#
#     let user_questions = "$icam_lib\usrdef.q"
#
#   Initial Quest display level. Select 0 for monochrome, 1 for color
#   and 2 for color with additional "point and shoot" menu. Selections
#   1 and 2 require an X windows system.
#
#     let interface_level = 2		# 0, 1, 2
#
#   Initial Quest display mode in main window
#
#     let screen = full			# full, scroll, expert
#
#   Quest default for post processor author. The default is only used
#   if the question remain unanswered. If the following line is uncommented
#   then the user name will be used as the default.
#
#     let author = "$USERNAME"
#
#   RMD (Rapid Macro Development). High level interface to the macro
#   programming language. The RMD facility provides an advanced interface used
#   during the creation of custom macros. Select "yes" (the default) to use
#   the RMD facility. Select "no" to inhibit the RMD facility.
#
#     let rmd_facility = yes		# yes, no
#
#   Interface level 1 window defaults
#
      begin il1_data
#       let error = "red"
#       let menu = "blue"
#       let title = "black"
#       let prompt = "black"
#       let text = "blue"
#       let font = " "                  # For example : 9x15bold
#       let width = 80
#       let height = 24
#       let x = 0
#       let y = 0
#	let fontsizefactor = 0          # -16 to 16 (Windows 9x)
      end
#
#   Interface level 2 window defaults
#
      begin il2_data
#	let fontsizefactor = 0          # -16 to 16 (Windows 9x)
#       let light = "grey"
#       let normal = "black"
#       let bold = "blue"
#       let error = "red"
#       let font = " "
#       let width = 80
#       let height = 30
#       let x = 20
#       let y = 12
      end
#
#   Option to provide feed-back about mouse movements. Disable if
#   round trip time on network is excessive.
#
#     let mouse_track = yes		# yes, no
#
#   Option to set window focus automatically on entry. Required on
#   some platforms for normal operation.
#
#     let auto_focus = no		# yes, no
#
#   External editor and filename used by Quest editor
#
#     let use_ext_editor = no		# yes, no
#     let ext_editor = "notepad macro.mac"
#     let ext_editor_file = "macro.mac"
#
#   Option to control spawning commands to system. Set to on, off
#   or a command to always execute
#
#     let sysaccess = on		# on, off, 'command'
#
# Gener parameters
# ----------------
#
#   Name of file containing customized error messages.
#
#     let erfile = "$icam_lib\pos170.dat"
#
#   Default pre-compiled "before" and "after" macros. These macros will
#   be loaded into Gener at run time and placed around any macros defined
#   in the specific post processor. These macros can be overridden on the
#   command line. Macros must be compiled using the /compile option of Quest.
#
#     let mbdef = " "
#     let madef = " "
#
#   Extended character range. Specifies the valid range of characters permitted
#   in a text string. By default, Gener only recognizes characters in the ascii
#   range 1-127. All (or portions) of strings containing NUL or characters with
#   the sign bit set will be processed as floating point values. To have Gener
#   recognize extended characters, specify the additional characters by ascii
#   code. A range of characters can be specified using nnn-nnn. Separate
#   multiple specifications using a comma (,). For example, to permit
#   characters in the range 145 thru 200 and the NUL (0) character, specify
#   "145-200,0". Specify "0-255" for all characters (not recommended).
#
#     let extended_chars = 1-255
#
#   Default input file format. Normally Gener reads cldata in
#   APT format. Gener can also input any of the following types. The
#   value chosen here can be overridden on the command line using the /format
#   qualifier.
#
#       Type      Description
#       ------    ----------------------------------
#       apt       APT-like source
#       ai        APT-like source following AI conventions
#       cadra     APT-like source following CADRA conventions
#       catia     APT-like source following CATIA conventions
#       cdc       APT-like source following CDC conventions
#       cv        Computervision binary
#       duct5     Delcam DUCT 5 source
#       euclid    APT-like source following EUCLID conventions
#       hms       Houtziel APT binary
#       ibmb      IBM workstation APT binary
#       ibme      IBM EBCDIC binary
#       icam      ISO 3592 binary
#       iso       ISO 3592 source
#       mcam      MasterCam "NCI" file
#       ptc       APT-like source following PTC conventions
#       topsolid  TopSolid ".CAM" file
#
      let input_format = catia
#
#   Omit this number of characters following slah in fixed format commands:
#   INSERT, PARTNO, PPRINT, REMARK 
#
#     let omit_after_slah =  "0"
#
#   Initial APT "insert" file specifies a file to read first, before the user
#   specified APT like input file. This parameter is only referenced when the
#   the input data is an APT like source file. This parameter can be overridden
#   on the command line with the /[no]insert qualifier.
# 
#     let insert =
#
#   Action to take when a null parameter is encountered in the APT file. A null
#   parameter is one where nothing (or only whitespace) separates two commas in
#   an APT command. A second case is when nothing or whitespace follows the last
#   comma in an APT command. A null parameter can be treated as an error (this
#   is the default), or ignored, or substituted with a value of zero.
#
      let null_input = zero		# error, ignore, zero
#
#   Alternate APT comment delimiter. Only referenced when the input data is an
#   APT like source file. The first character in the comment must not be a
#   quote, dollar, or semi-colon, since these symbols have specific meaning
#   to the APT interpreter. Comments are not recognized within quoted strings.
#
#     let comment =
#
#   Number of useable characters on each line of the input source file. Only
#   referenced when the input data is an APT like source file. The default
#   width is 72. The CONTRL command can be used to override the width chosen
#   here.
#
#     let input_width = 72
#
#   Progression direction for APT CIRCLE and SURFACE commands. Only referenced
#   when the input data is an APT like source file. The default (automatic)
#   is clw for CIRCLE/ and cclw for SURFACE/. The CONTRL command can be used 
#   to override the direction chosen here.
#
#     let cir_dir =			# clw, cclw, automatic
#	
#
#   When either iso or apt format cl files are read in, they are
#   automatically converted to ICAM's binary format. In this binary
#   format circle records can be stored in one of two ways: "segmented" 
#   and "unsegmented"(default). With the segmented circle record structure, 
#   a series of 5000 class records is created representing the points on 
#   the circle. The points are generated so that lines joining the points 
#   are within a tolerance. Use this method only if required for backward 
#   compatibility with macros that rely on this record structure. With 
#   the unsegmented record structure a single 15000 class record is 
#   generated containing the circle center and radius.  This is the preferred 
#   method, because the generated binary file is shorter and thus faster to 
#   process.
#
#      let circles = unsegmented        # unsegmented, segmented
#
#   The automatic part surface statement, AUTOPS, establishes a new part surface
#   parallel with the xy-plane. Specify "yes" to establish part surface parallel
#   to the tool axis instead of xy-plane. The default is "no" except for 
#   Euclid input file format (input_format = euclid).
#
#     let cir_ps_autops = no           # yes, no
#	
#   CAM-POST adjusts part surface (PS) definition after each move. Specify "yes" 
#   to prevent ajustements of part surface. Part surface will be maintained 
#   strictly by CL commands produced by the CAM system. The default is "no"
#   except for Catia input file format (input_format = catia).
#
#     let cir_no_adjust_ps = no           # yes, no
#	
#   Circular motions specified by GOFWD commands are interpreted using ANSII APT 
#   motion surface control rules. Specify "yes" to interpreted GOFWD command
#   based on the Dassault's document "Syntaxes Interpreted by APT Import". 
#   The coordinates of the circular motion end point will be extracted from 
#   LINE or PLANE definition. The default is "no" except for Catia input file
#   format (input_format = catia).
#
#     let cir_gofwd_catia = no           # yes, no
#
#   The following msys9 parameter is allowing automatic conversion from 
#   Unigraphics's MSYS matrix format of 9 parameters to Cam-Post's matrix
#   format of 12 parameters. The default is "no".
#
#     let msys9 = no           # yes, no
#
#
#   Interface kit specifies how CAM-POST will interpret your CAM CL data file.
#   By default, CAM-POST does not specifies any interface kit. The list of 
#   installed interface kits is defined by the list of subdirectories under
#   CAM-POST intallation point kit directory. To use a specific kit, set
#   this symbol to the directory name representing the kit. For example, to
#   use the generic APT kit, use the following:
#
#     let interface_kit = "Automatic"   # Auto selection of kit (default)
#     let interface_kit = "Generic"     # Use Generic APT interface kit
#     let interface_kit =               # Do not use interface kit
      let interface_kit = "CATIA"       # Use CATIA interface kit
#
#   The kit_clfile symbol defines a file-type filter to be used when listing
#   CL files in a file browser. It is also used when Gener tries to
#   automatically select an interface kit to use.
#
#     let kit_clfile  =
#
#   The kit_cltext is used when automatically selecting an interface kit.
#   The CL file will be searched for this string.
#
#     let kit_cltext    =
#
#   Specifies the number of records to search to find the first occurances
#   of the PARTNO, UNITS and FROM statements. If 0 (zero) is specified, 
#   a search is performed on the entire input file.
#   
#     let start_lookahead = 20
#
#   When either iso or apt format CL files are read in, they are
#   automatically converted to ICAM's binary format. The converted 
#   file can be stored either in memory or in a file.  With "memory", 
#   the converted file is stored in memory, which provides fast data 
#   access. With "file", the converted file is stored in a file. Use 
#   this method if files are typically too large to fit into memory. 
#   This symbol can be overridden with a GENER command line qualifier.
#
#      let tmp_format = memory          # memory, file
#
#   Generation of 1000 class (ISN) records. Only referenced when the input data
#   is an APT like source file. The default is "yes", which generates an ISN
#   record for each statement in the input file. Specify "no" to inhibit
#   generation of ISN records. The CONTRL command can be used to override the
#   default chosen here.
#
#     let isn_on_output = yes           # yes, no
#
#   Verbose window defaults. Regular processing includes primary tape, turn
#   mode, main turret and low edm guide. Alternate processing includes
#   secondary tape, mill mode (on lathe), side turret, high edm guide,
#   pending tape, and most scan functions.
#
      begin verbose_data
#       let color_1 = "dim grey"        # information lookahead color
#       let color_2 = "black"        	# regular processing
#       let color_3 = "green"	        # alternate processing
#       let color_4 = "red"	        # window step indicator
#       let color_5 = "black"	        # window active indicator
#       let color_6 = "cyan"	        # window inactive indicator
#       let color_7 = "blue"	        # assorted messages in stat window
#       let color_8 = "light blue"      # low guide lookahead
#       let color_9 = "navy blue"       # high guide lookahead
#       let color_10 = "white"
#       let color_11 = "white"
#       let color_12 = "red"            # errors, titles
#       let color_13 = "white"
#       let color_14 = "white"
#       let font = " "
#       let height = 40
#       let width = 100
#       let x = 5
#       let y = 5
      end
#
#   Active verbose sub-windows. The verbose window displays different kinds
#   of data streams during Gener processing. Individual streams can be disabled
#   by setting the window parameter "off". By default, all windows are active
#   "on".
#
#     let window_tape_out = on          # on, off
#     let window_cl_input = on          # on, off
#     let window_stats = on             # on, off
#     let window_macro = on             # on, off
#
#   Gener verbose windows remember lines that are written on the screen and
#   give you accesses to them by providing scrollbars. The number of lines 
#   to record can be defined here. Valid values are from 500 to 10000. The
#   default value is 500.
#
#     let lines_to_record = "500"
#
#   Verbose window startup mode. Specify "step" to start the verbose window
#   in step mode. Specify "regular" (the default) to begin executing Gener
#   immediately without pausing.
#
#     let verbose_start = regular       # step, regular
#
#   Macro debugger default state and default terminal size
#
#     let debug = off                   # on, off
#     let debug_width = 80
#     let debug_length = 24
#
#   Reverse post processing plot data. Gener can output either an APT like
#   source file "apt", or an ICAM format binary cldata file "binary",
#   describing the control point motions of the machine. The coordinate frame
#   of the resulting data can be in machine or part "cl" reference systems.
#
#     let plot_type = binary            # binary, apt
#     let plot_data = machine           # machine, cl
#
# File Extension parameters
# -------------------------
#
#  The Quest post processor listing and Gener listing files can each be output
#  in a regular printable format, or in HTML browseable format. Files output in
#  HTML format are not paginated (e.g., the lines_per_page setting has no
#  effect).
#
      let use_html_list = yes           # Use HTML format for Quest listing
      let use_html_nclist = yes         # Use HTML format for Gener listing
#
#  Regular file extension defaults used by Quest and Gener.
#
#     let file_ext_list = "lis"         # Quest listing file
#     let file_ext_nclist = "lst"       # Gener listing file
#     let file_ext_log = "log"          # Gener log file
#     let file_ext_tape = "tap"         # Tape file
#     let file_ext_tape2 = "tp2"        # Secondary tape file
#     let file_ext_sub = "tps"          # Subprogram tape file
#     let file_ext_plot = "bkp"         # Plot file
#
#  HTML file extension defaults used by Quest and Gener. Some browsers will not
#  follow links to HTML files if the file extension is not one of the approved
#  types. Be careful when selecting file extensions for HTML file formats.
#
#     let html_ext_list = "htm"         # Quest html listing file
#     let html_ext_nclist = "htm"       # Gener html listing file
#
# Tape and DNC file parameters
# ----------------------------
#
#   The tape or DNC file can be formatted in 3 ways; variable (default)
#   fixed and packed. Variable indicates that each tape block will have
#   a variable size, taking only the required space. Fixed indicates that
#   all blocks are of a given size. If a tape block is shorter than the
#   given size, the record is blank filled to the end. Packed is similar
#   to fixed except that the next record is used to fill space at the
#   end of a given record. In other words, packed tries to fit as may
#   logical blocks on a physical record as possible.
#
#     let tape_format = variable        # variable, fixed, packed
#     let dnc_format = variable	        # variable, fixed, packed
#
#   If the tape or DNC format is fixed or packed the default record
#   size is 72,80 where the first 72 columns contain data and the records
#   are blocked at 80 characters. This default can be altered by
#   specifying the data portion of the record and optionally the full
#   size.
#
#     let tape_recl = 72,80
#     let dnc_recl = 72,80
#
#   Sequence numbering can be provided in the non-data portion of fixed
#   length tape blocks (fixed or packed). By default, the numbering
#   is in columns 73 to 80. Use "no" to have no sequence numbering.
#   "left" left justifies the sequence number, while "right" right 
#   justifies it.  Use "padded" to add leading zeros to the sequence 
#   number field of the record.
#
#     let tape_seq = no                 # left, right, padded, no
#     let dnc_seq = no                  # left, right, padded, no
#
#   If the tape or DNC format is fixed or packed the end of record character
#   or characters can be defined. If special characters must be entered, use
#   the standard CAM-POST ^### where ### is the ascii code of the special
#   character. For example, ^013^010 would be the character codes for a CRLF
#   end of record marker. Be sure to specify 3 digits when specifying the ascii
#   code. By default, there is no end of record marker for fixed or packed
#   records.
#
#     let tape_eor =
#     let dnc_eor =
#
#   The size of each tape record can be prefixed to the record. The size field
#   is 3 characters long. By default this feature is disabled.
#
#     let block_size = off              # on, off
#
end
