<?xml version="1.0" encoding="UTF-8"?>
<!--Style Sheet to Convert XML file to Pie Chart-->
<!--
	Copywright DELMIA Corp
	Cre:  RSH	7/19/2004
	
	Style Sheet to Convert XML file to Pie Chart 
	
	The style sheet works on the XML file generated by Reporting
	The Style sheet requires an Input in the form of a Selected Resource, upon selection it
	displays the Various State Times of a Resource - Busy Time, Idle Time, Wait Time, Fail Time etc
	in the form of a Pie Chart.

-->
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:math="http://xml.apache.org/xslt/java">

<!-- ######################### Output Format################################-->
	<xsl:output method="html"/>

<!-- ######################### Global Section  ################################-->
	<xsl:param name="FirstParam"/>
	<xsl:param name="HeightParam"/>
	<xsl:param name="WidthParam"/>
  <xsl:param name="NumRunsParam"/>

	<xsl:variable name="height">
		<xsl:if test="$HeightParam &gt; 201">
			<xsl:value-of select="$HeightParam"/>
		</xsl:if>
		<xsl:if test="$HeightParam  &lt; 200">
			<xsl:value-of select="200"/>
		</xsl:if>
	</xsl:variable> 
	
	<xsl:variable name="width">
		<xsl:if test="$WidthParam &gt; 201">
			<xsl:value-of select="$WidthParam"/>
		</xsl:if>
		<xsl:if test="$WidthParam &lt; 200">
			<xsl:value-of select="200"/>
		</xsl:if>
	</xsl:variable> 
	
	<xsl:variable name="oneDegree"/>
	<xsl:variable name="radius">
		<xsl:choose>
			<xsl:when test="$height &lt; $width">
				<xsl:value-of select="2 * $height div 5"/>
			</xsl:when>
			<xsl:otherwise>
				<xsl:value-of select="2 * $width div 5"/>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:variable>
	

	<!-- ######################### Template  checks if there is a Resource as input  ################################  -->
	<xsl:template match="SystemStatistics">
		<svg width="100%" height="100%">
      <xsl:for-each select="Run[@RunNumber=$NumRunsParam]/Resources/*/*">
        <xsl:if test="@Name=$FirstParam">
          <xsl:call-template name="Resource"/>
        </xsl:if>
      </xsl:for-each>
		</svg>
	</xsl:template>
	
	<!-- ######################### RESOURCE Template ################################-->
	
	<xsl:template name="Resource">
		<xsl:variable name="threeSixtydegrees" select="sum(StateTimes/*)"/>
		<xsl:variable name="oneDegree" select="360 div $threeSixtydegrees"/>
		<xsl:comment>  radius =   <xsl:value-of select="$radius"/>	</xsl:comment>
		<xsl:comment>  360 degrees =   <xsl:value-of select="$threeSixtydegrees"/>		</xsl:comment>
		<xsl:comment>  1 degree =   <xsl:value-of select="$oneDegree"/>		</xsl:comment>
		
		<g transform="matrix(1 0 0 1 {$width div 2} {$height div 2.1})" >		
			<text style="text-anchor:left" font-size="20">
				<xsl:attribute name="text-decoration">underline</xsl:attribute>
				<xsl:attribute name="x"><xsl:value-of select="-40"/></xsl:attribute>
				<xsl:attribute name="y"><xsl:value-of select="($radius + 20)"/></xsl:attribute>
				<xsl:value-of select="$FirstParam"/>
				<xsl:text> State</xsl:text>
			</text>
	
			<xsl:variable name="numLegend" select="count(StateTimes/*)"/>
			<rect fill="none" x="{$radius + 10}" y="10" width="200" height="{15 * $numLegend + 20}" stroke="navy" stroke-width="1"  />
			<xsl:apply-templates select="StateTimes/*">
				<xsl:with-param name="ADegree" select="$oneDegree"/>
			</xsl:apply-templates>
		</g>
		
	</xsl:template>

	<!-- ######################### RESOURCE State Times Template ################################-->	
	<xsl:template match="StateTimes/*">
		<xsl:param name="ADegree"/>
		<xsl:comment>  1 degree = <xsl:value-of select="$ADegree"/></xsl:comment>
		<xsl:variable name="CurValue" select="."/>
		<xsl:variable name="TotalValue" select="sum(../*)"/>
		<xsl:variable name="curpos" select="position()"/>
		<xsl:variable name="angleStart" select="$ADegree * sum(../*[position() &lt; $curpos])"/>
		<xsl:variable name="angle" select=".  * $ADegree"/>
		<xsl:comment>  angle start =  <xsl:value-of select="$angleStart"/>	</xsl:comment>
		<xsl:comment>  angle =   <xsl:value-of select="$angle"/>		</xsl:comment>
		<xsl:comment>  angle end =   <xsl:value-of select="$angle + $angleStart"/> </xsl:comment>
		<xsl:variable name="xystart">
			<xsl:call-template name="xy">
				<xsl:with-param name="angle" select="$angleStart"/>
			</xsl:call-template>
		</xsl:variable>
		<xsl:variable name="xyend">
			<xsl:call-template name="xy">
				<xsl:with-param name="angle" select="$angle + $angleStart"/>
			</xsl:call-template>
		</xsl:variable>
		<xsl:variable name="PieColor">
			<xsl:choose>
				<xsl:when test="$curpos = 1">
					<xsl:value-of select=" '#66FF33' "/>
				</xsl:when>
				<xsl:when test="$curpos = 2">
					<xsl:value-of select=" 'yellow' "/>
				</xsl:when>
				<xsl:otherwise>
					<xsl:value-of select=" 'red' "/>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:variable>
		<xsl:variable name="ShortOrLongArc">
			<xsl:if test="$angle &gt; 180">
				<xsl:value-of select="1"/>
			</xsl:if>
			<xsl:if test="$angle &lt; 181">
				<xsl:value-of select="0"/>
			</xsl:if>
		</xsl:variable>
		<path d="M0,0 L {$xystart} A {$radius}, {$radius} 0 {$ShortOrLongArc} 1  {$xyend} z" style="fill:{$PieColor}; stroke:black;stroke-width:1;"/>
		<xsl:variable name="X1">
			<xsl:call-template name="AnnotationX">
				<xsl:with-param name="theangle" select="($angle div 2) + $angleStart"/>
			</xsl:call-template>
		</xsl:variable>
		<xsl:variable name="Y1">
			<xsl:call-template name="AnnotationY">
				<xsl:with-param name="theangle" select="($angle div 2) + $angleStart"/>
			</xsl:call-template>
		</xsl:variable>
		<text style="text-anchor:middle" font-size="14">
			<xsl:attribute name="transform"><xsl:text>translate(0,0) </xsl:text> </xsl:attribute>
			<xsl:attribute name="x"><xsl:value-of select="($X1)"/></xsl:attribute>
			<xsl:attribute name="y"><xsl:value-of select="($Y1)"/></xsl:attribute>
			<xsl:value-of select="round(100 * ($CurValue div $TotalValue))"/>
			<xsl:text>%</xsl:text>
		 </text>
     
		 <rect x="{$radius + 20}" y="{$curpos * 20}" width="20" height="15" fill="{$PieColor}" stroke="navy" stroke-width="1"  />
		 <text style="text-anchor:left" font-size="14">
			 <xsl:attribute name="x"><xsl:value-of select="($radius + 45)"/></xsl:attribute>
			 <xsl:attribute name="y"><xsl:value-of select="($curpos * 20 + 15)"/></xsl:attribute>
			 <xsl:value-of select="name()"/>   
		 </text>

	</xsl:template>
	
	<!-- ######################### XY Template ################################-->	
	<xsl:template name="xy">
		<xsl:param name="angle"/>
		<xsl:variable name="rad" select="math:java.lang.Math.toRadians($angle)"/>
		<xsl:value-of select="$radius * math:java.lang.Math.cos($rad)"/>
		<xsl:text>,</xsl:text>
		<xsl:value-of select="$radius * math:java.lang.Math.sin($rad)"/>
	</xsl:template>
	
	<!-- ######################### Legend XY Template ################################-->	
	<xsl:template name="AnnotationX">
		<xsl:param name="theangle"/>
		<xsl:variable name="rad" select="math:java.lang.Math.toRadians($theangle)"/>
		<xsl:value-of select="$radius* 0.6 * math:java.lang.Math.cos($rad)"/>
	</xsl:template>
	
	<!-- ######################### Legend XY Template ################################-->	
	<xsl:template name="AnnotationY">
		<xsl:param name="theangle"/>
		<xsl:variable name="rad" select="math:java.lang.Math.toRadians($theangle)"/>
		<xsl:value-of select="$radius * 0.6 * math:java.lang.Math.sin($rad)"/>
	</xsl:template>


</xsl:stylesheet>
