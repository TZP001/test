<?xml version="1.0" encoding="UTF-8"?>
<!--Style Sheet to Convert XML file to Gantt Chart-->
<!--
	Copyright 2006 DELMIA Corp
	
	Style Sheet to Convert XML file to Gantt Bar Chart 
	
	The style sheet works on the XML file generated by Reporting
	The Style sheet requires an Input in the form of a Selected Resource, upon selection it
	displays the Gantt chart of the Resource
-->

<xsl:stylesheet version="1.0" xmlns = "http://www.w3.org/2000/svg"
                              xmlns:xsl="http://www.w3.org/1999/XSL/Transform" 
                              xmlns:xlink="http://www.w3.org/1999/xlink">

  <xsl:output method="html"/>
  <xsl:param name="HeightParam"/>
  <xsl:param name="WidthParam"/>
  <xsl:param name="ToolTipParam"/>
  <xsl:param name="ResourceList"/>
  <xsl:param name="AnnotationParam"/>
  <xsl:param name="TaskDetailParam"/>
  <xsl:param name="NumberOfResources"/>
  <xsl:param name="ColorParam"/>

  <!--
	    NOTE:-
	    HeightParam and WidthParam is the height and width of the SVG
	    chartHeight and chartWidth is the Height and width of the chart
	-->
  <xsl:variable name="chartHeight">
    <xsl:value-of select="$HeightParam * 0.75"/>
  </xsl:variable>
  <xsl:variable name="chartWidth">
    <xsl:value-of select="$WidthParam * 0.75"/>
  </xsl:variable>

  <!-- ======= Finding the highest value of EndTime ======= -->
  <xsl:variable name="horizontalRangeMax">
    <xsl:for-each select="/ActivityStatistics/Run//EndTime">
      <xsl:sort order="descending" data-type="number" select="text()"/>
      <xsl:if test="position() = 1">
        <xsl:value-of select="."/>
      </xsl:if>
    </xsl:for-each>
  </xsl:variable>

  <xsl:variable name="horizontalScale" select="($chartWidth * 0.8) div $horizontalRangeMax"/>

  <!-- ======= Getting the number of resources (which is the max horizontal range) ======= -->
  <xsl:variable name="verticalRangeMax" select="$NumberOfResources"/>
  <xsl:variable name="verticalScale" select="$chartHeight div $verticalRangeMax"/>

  <!-- ===== This Variable is used to draw annotations on the X Axis ===== -->
  <xsl:variable name="xValue" select="$horizontalScale div 2"/>

  <xsl:variable name="chartStartX">85</xsl:variable>

  <xsl:variable name="barHeight" select="$verticalScale * (2 div 3)"/>
  <xsl:variable name="barStartDistance" select="$verticalScale div 6"/>

  <!-- Always draw 10 grid lines for each chart -->
  <xsl:variable name="singleVerticalGridUnit" select="$chartWidth div 10"/>

  <!-- Getting the Task, Motion, Wait and Delay Colors from the Color Param input variable-->
  <!-- NOTE : We cant modify a global variable once created. Hence below
	            we are using new variables in each line -->
  <xsl:variable name="TaskRed" select="substring-before($ColorParam,';')"/>
  <xsl:variable name="tempTaskGreen" select="substring-after($ColorParam,';')"/>
  <xsl:variable name="TaskGreen" select="substring-before($tempTaskGreen,';')"/>
  <xsl:variable name="tempTaskBlue" select="substring-after($tempTaskGreen,';')"/>
  <xsl:variable name="TaskBlue" select="substring-before($tempTaskBlue,';')"/>

  <xsl:variable name="tempMotionRed" select="substring-after($tempTaskBlue,';')"/>
  <xsl:variable name="MotionRed" select="substring-before($tempMotionRed,';')"/>
  <xsl:variable name="tempMotionGreen" select="substring-after($tempMotionRed,';')"/>
  <xsl:variable name="MotionGreen" select="substring-before($tempMotionGreen,';')"/>
  <xsl:variable name="tempMotionBlue" select="substring-after($tempMotionGreen,';')"/>
  <xsl:variable name="MotionBlue" select="substring-before($tempMotionBlue,';')"/>

  <xsl:variable name="tempWaitRed" select="substring-after($tempMotionBlue,';')"/>
  <xsl:variable name="WaitRed" select="substring-before($tempWaitRed,';')"/>
  <xsl:variable name="tempWaitGreen" select="substring-after($tempWaitRed,';')"/>
  <xsl:variable name="WaitGreen" select="substring-before($tempWaitGreen,';')"/>
  <xsl:variable name="tempWaitBlue" select="substring-after($tempWaitGreen,';')"/>
  <xsl:variable name="WaitBlue" select="substring-before($tempWaitBlue,';')"/>

  <xsl:variable name="tempDelayRed" select="substring-after($tempWaitBlue,';')"/>
  <xsl:variable name="DelayRed" select="substring-before($tempDelayRed,';')"/>
  <xsl:variable name="tempDelayGreen" select="substring-after($tempDelayRed,';')"/>
  <xsl:variable name="DelayGreen" select="substring-before($tempDelayGreen,';')"/>
  <xsl:variable name="tempDelayBlue" select="substring-after($tempDelayGreen,';')"/>
  <xsl:variable name="DelayBlue" select="substring-before($tempDelayBlue,';')"/>

  <!--<defs>
	<linearGradient id="orange_red" x1="0%" y1="0%" x2="100%" y2="0%">
	    <stop offset="0%" style="stop-color:rgb(225,175,75);stop-opacity:1"/>
	    <stop offset="100%" style="stop-color:rgb(125,100,25);stop-opacity:1"/>
        </linearGradient>
    </defs> -->

  <xsl:template match="ActivityStatistics">
    <svg id = "body" style = "overflow:visible;enable-background:new " width = "{$WidthParam}" 
         height = "{$HeightParam}" onload = "LoadHandler(evt)" kerning = "0" 
         viewBox = "-90 0 {$WidthParam + 40} {$HeightParam + 40}" xml:space = "preserve" 
         perserveAspectRatio = "xMinYMin meet">
		  <title>Gantt Chart</title>
		  <script xlink:href = "{$ToolTipParam}"></script>
		  <script><![CDATA[function LoadHandler(event) 
		      { 
			  new ToolTip(event.getTarget().getOwnerDocument(), 12);
		      }]]>
		  </script>
	
	    <!-- ===== Checking params ====== -->
	    <xsl:comment>
	        Height of SVG = <xsl:value-of select="$HeightParam"/>
	    </xsl:comment>
	    <xsl:comment>
	        Width of SVG = <xsl:value-of select="$WidthParam"/>
	    </xsl:comment>
	    <xsl:comment>
	        ToolTip JavaScript Path = <xsl:value-of select="$ToolTipParam"/>
	    </xsl:comment>
	    <xsl:comment>
	        Resource List (Semi Colon separated) = <xsl:value-of select="$ResourceList"/>
	    </xsl:comment>
	    <xsl:comment>
	        Annotation Check Box Value = <xsl:value-of select="$AnnotationParam"/>
	    </xsl:comment>
	    <xsl:comment>
	        Task Detail Check Box Value = <xsl:value-of select="$TaskDetailParam"/>
	    </xsl:comment>
	    <xsl:comment>
	        Color Param = <xsl:value-of select="$ColorParam"/>
	    </xsl:comment>	
	
	    <g id = "GanttChart" class = "legend" style = "text-anchor:start" stroke = "none" clip-rule = "evenodd" 
         fill-rule = "evenodd" transform = "translate(-40,40)" stroke-width = "1" stroke-linecap = "round" 
         stroke-linejoin = "round" stroke-miterlimit = "10">
	      <g id = "GridAndLegend" style = "stroke:none;">
		      <g stroke = "black">

		        <xsl:comment>========Floor and Wall ========</xsl:comment>
		        <text stroke = "black" font-size = "20" transform = "translate(100,-10)">Resource Gantt</text>
		        <path d = "M {$chartStartX}, {$chartHeight + 2} l 2,-2 v -{$chartHeight} l -2,2" fill = "lightgray" 
                  stroke = "darkgray"/> <!-- Left Side of the Wall -->
		        <path d = "M {$chartStartX + 2}, {$chartHeight} v -{$chartHeight} h {$chartWidth} v {$chartHeight}" 
                  fill = "lightgray" stroke = "darkgray"/> <!-- Back Side of the Wall -->
		        <path d = "M {$chartStartX}, {$chartHeight + 2} l 2,-2 h {$chartWidth} l -2,2" fill = "lightgray" 
                  stroke = "darkgray"/> <!-- Floor -->
    		    
		        <!-- ===== Checking values ====== -->
		        <xsl:comment>
			        Height of SVG = <xsl:value-of select="$HeightParam"/>
		        </xsl:comment>
		        <xsl:comment>
			        Width of SVG = <xsl:value-of select="$WidthParam"/>
		        </xsl:comment>
		        <xsl:comment>
			        Chart Height = <xsl:value-of select="$chartHeight"/>
		        </xsl:comment>
		        <xsl:comment>
			        Chart Width = <xsl:value-of select="$chartWidth"/>
		        </xsl:comment>
		        <xsl:comment>
			        Horizontal range max = <xsl:value-of select="$horizontalRangeMax"/>
		        </xsl:comment>
		        <xsl:comment>
			        Vertical range max = <xsl:value-of select="$verticalRangeMax"/>
		        </xsl:comment>
		        <xsl:comment>
			        Horizontal SCALE = <xsl:value-of select="$horizontalScale"/>
		        </xsl:comment>
		        <xsl:comment>
			        Vertical SCALE = <xsl:value-of select="$verticalScale"/>
		        </xsl:comment>
		        <xsl:comment>
			        X Value = <xsl:value-of select="$xValue"/>
		        </xsl:comment>
		        <xsl:comment>
			        Bar Height = <xsl:value-of select="$barHeight"/>
		        </xsl:comment>
		        <xsl:comment>
			        Bar Start Distance = <xsl:value-of select="$barStartDistance"/>
		        </xsl:comment>
		        <xsl:comment>
			        Color Param = <xsl:value-of select="$ColorParam"/>
		        </xsl:comment>
		        <xsl:comment>
			        Task Red = <xsl:value-of select="$TaskRed"/>
		        </xsl:comment>
		        <xsl:comment>
			        Task Green = <xsl:value-of select="$TaskGreen"/>
		        </xsl:comment>
		        <xsl:comment>
			        Task Blue = <xsl:value-of select="$TaskBlue"/>
		        </xsl:comment>
		        <xsl:comment>
			        Motion Red = <xsl:value-of select="$MotionRed"/>
		        </xsl:comment>
		        <xsl:comment>
			        Motion Green = <xsl:value-of select="$MotionGreen"/>
		        </xsl:comment>
		        <xsl:comment>
			        Motion Blue = <xsl:value-of select="$MotionBlue"/>
		        </xsl:comment>
		        <xsl:comment>
			        Wait Red = <xsl:value-of select="$WaitRed"/>
		        </xsl:comment>
		        <xsl:comment>
			        Wait Green = <xsl:value-of select="$WaitGreen"/>
		        </xsl:comment>
		        <xsl:comment>
			        Wait Blue = <xsl:value-of select="$WaitBlue"/>
		        </xsl:comment>
		        <xsl:comment>
			        Delay Red = <xsl:value-of select="$DelayRed"/>
		        </xsl:comment>
		        <xsl:comment>
			        Delay Green = <xsl:value-of select="$DelayGreen"/>
		        </xsl:comment>
		        <xsl:comment>
			        Delay Blue = <xsl:value-of select="$DelayBlue"/>
		        </xsl:comment>
		        <xsl:comment>
			        Single Grid Unit = <xsl:value-of select="$singleVerticalGridUnit"/>
		        </xsl:comment>
		    
		        <xsl:comment>======= Axis lines =======</xsl:comment>
		        <path d = "M {$chartStartX}, {$chartHeight + 2} h {$chartWidth}"/>
		        <path d = "M {$chartStartX}, {$chartHeight + 2} v -{$chartHeight}"/>
    		   
		        <xsl:comment>======= Horizontal Lines ======</xsl:comment>
		        <g style = "fill:none;">
				      <path d = "M {$chartStartX},{$chartHeight + 2} l 2,-2 h {$chartWidth}" stroke = "gray" stroke-width = "2"/>
				      <path d = "M {$chartStartX},{$chartHeight + 2} h -5"/>

				      <xsl:call-template name="HorizontalGridLines">
					      <xsl:with-param name="ParamY" select="$chartHeight + 2 - $verticalScale" />
					      <xsl:with-param name="GridValue" select="0"/>
				      </xsl:call-template>
		        </g>

		        <xsl:comment>========Setting Grid Ticks and Annot for X Axis========</xsl:comment>
		        <xsl:call-template name="VerticalGridLines">
			        <xsl:with-param name="ParamX" select="$chartStartX + $singleVerticalGridUnit" />
			        <xsl:with-param name="GridValue" select="$singleVerticalGridUnit div $horizontalScale"/>
		        </xsl:call-template>

			      <xsl:comment>========Annotations for X Axis ========</xsl:comment>
		        <g style="stroke:none">
				      <text style = "text-anchor:middle" transform = "translate( {$chartWidth div 2},{$chartHeight + 2 + 5 + 30})">Time in Seconds</text>
		        </g>
		      </g>

		      <!-- Tokenize the ResourceList variable and call the Resource
		           Template for each element -->
		      <xsl:call-template name="Tokenize">
		          <xsl:with-param name="newResourceList" select="$ResourceList"/>
		          <xsl:with-param name="position" select="0"/>
		      </xsl:call-template>
		
	      </g>
	    </g>
    </svg>
  </xsl:template>

  <!-- #######################################################################                        
		Tokenize Template 

		This template is a template that runs recursively running
		through each element in the ResourceList variable and for each
		element it calls the 'Resource' template
	 ####################################################################### -->
  <xsl:template name="Tokenize">
    <xsl:param name="newResourceList"/>
    <xsl:param name="position"/>

    <xsl:variable name="ResourceToken" select="substring-before($newResourceList,';')"/>

    <xsl:apply-templates select="Run/Resources/Resource[@id=$ResourceToken]">
      <xsl:with-param name="position" select="$position"/>
    </xsl:apply-templates>

    <xsl:variable name="newTmpResourceList" select="substring-after($newResourceList,';')"/>

    <xsl:if test="string-length($newTmpResourceList) &gt; 0">
      <xsl:call-template name="Tokenize">
        <xsl:with-param name="newResourceList" select="$newTmpResourceList"/>
        <xsl:with-param name="position" select="$position + 1"/>
      </xsl:call-template>
    </xsl:if>
  </xsl:template>

  <!-- #######################################################################                        
		HorizontalGridLines Template 

		This template is a template that runs recursively and draws the Horizontal
		GridLines that separates each resource
	 ####################################################################### -->
  <xsl:template name="HorizontalGridLines">
    <xsl:param name="ParamY"/>
    <xsl:param name="GridValue"/>

    <xsl:comment>
      ====== Entering HorizontalGridLines Template =====
    </xsl:comment>

    <xsl:if test="$GridValue &lt; $verticalRangeMax">
      <path d = "M {$chartStartX},{$ParamY} l 2,-2 h {$chartWidth}" stroke = "#CE7B00" stroke-width = "2"/>
      <path d = "M {$chartStartX},{$ParamY} h -5"/>

      <xsl:call-template name="HorizontalGridLines">
        <xsl:with-param name="ParamY" select="$ParamY - $verticalScale" />
        <xsl:with-param name="GridValue" select="$GridValue + 1" />
      </xsl:call-template>
    </xsl:if>
  </xsl:template>

  <!-- #######################################################################                        
		VerticalGridLines Template 

		This template is a template that runs recursively and draws the Vertical
		GridLines.
	 ####################################################################### -->
  <xsl:template name="VerticalGridLines">
    <xsl:param name="ParamX"/>
    <xsl:param name="GridValue"/>

    <xsl:if test="$ParamX &lt; ($chartWidth + $chartStartX)">
      <path d = "M {$ParamX},{$chartHeight + 2 + 5} v -5 l 2,-2 v -{$chartHeight}" fill = "lightgray" style = "stroke-dasharray: 4,2"/>

      <g style="stroke:none">
        <text fill = "black" font-size = "11" transform = "translate( {$ParamX - 2}, {$chartHeight + 2 + 5 + 15})">
          <xsl:value-of select="floor($GridValue * 100) div 100"/>
        </text>
      </g>

      <xsl:call-template name="VerticalGridLines">
        <xsl:with-param name="ParamX" select="$ParamX + $singleVerticalGridUnit" />
        <xsl:with-param name="GridValue" select="$GridValue + ($singleVerticalGridUnit div $horizontalScale)" />
      </xsl:call-template>
    </xsl:if>
  </xsl:template>

  <!--  #######################################################################                        
		Resource Template                    
      #######################################################################	-->

  <xsl:template match="Resource">
    <xsl:param name="position"/>

    <xsl:comment>
      =====Entering Resource Template=====
    </xsl:comment>

    <xsl:comment>======== Annotations for Y Axis ========</xsl:comment>
    <xsl:call-template name="AnnotationY">
      <xsl:with-param name="id" select="@id"/>
      <xsl:with-param name="position" select="$position"/>
    </xsl:call-template>

    <xsl:for-each select="Tasks/Task">
      <xsl:comment>
        Value for ./Endtime = <xsl:value-of select="./EndTime"/>
      </xsl:comment>
      <!-- If Value of EndTime is not greater than 0, then no point calling the Task Template-->
      <xsl:if test="./EndTime &gt; 0">
        <xsl:call-template name="Task">
          <xsl:with-param name="position" select="$position"/>
        </xsl:call-template>
      </xsl:if>
    </xsl:for-each>
  </xsl:template>

  <!--  #######################################################################                        
		AnnotationY Template 

		This template is used to draw the Y Axis Annotation (i.e Robot
		name,....) for a resource
	#######################################################################	-->

  <xsl:template name="AnnotationY">
    <xsl:param name="id"/>
    <xsl:param name="position"/>

    <xsl:comment>
      =====Entering AnnotationY Template=====
    </xsl:comment>
    <xsl:comment>
      Position = <xsl:value-of select="$position"/>
    </xsl:comment>

    <text style = "text-anchor:end" stroke = "#ff9900" font-size = "12" 
          transform = "translate( 70, {$chartHeight + 2 - ($verticalScale * $position) - ($verticalScale div 2)})">
      <xsl:value-of select="$id"/>
    </text>
  </xsl:template>

  <!--  #######################################################################                        
		Task Template 

		This template is used to draw the Task Bar for the Resource
	#######################################################################	-->
  <xsl:template name="Task">
    <xsl:param name="position"/>

    <xsl:comment>
      =====Entering Task Template=====
    </xsl:comment>

    <xsl:variable name="tempX" select="$chartStartX + (./EndTime * $horizontalScale)"/>
    <xsl:variable name="tempY" select="$chartHeight + 2 - $barStartDistance - $barHeight - ($verticalScale * $position)"/>
    <xsl:variable name="duration" select="./EndTime - ./StartTime"/>
    <xsl:variable name="barWidth" select="$duration * $horizontalScale"/>
    <xsl:variable name="textX" select="$tempX - 30"/>
    <xsl:variable name="textY" select="$tempY - 5"/>

    <g id="{@Name}">
      <Name>
        <xsl:value-of select="@Name"/>
      </Name>
      <Duration>
        <xsl:value-of select="round(1000 * (./EndTime - ./StartTime)) div 1000"/>
        <!-- rounding decimal to 3 dec places -->
      </Duration>
      <StartTime>
        <xsl:value-of select="./StartTime"/>
      </StartTime>
      <EndTime>
        <xsl:value-of select="./EndTime"/>
      </EndTime>

      <xsl:comment>====== Draw Task Bar =========</xsl:comment>
      <path d = "M {$tempX},{$tempY} l 2,-2 v {$barHeight} l -2,2 z" stroke="black" 
            fill="rgb({$TaskRed - 80}, {$TaskGreen - 80}, {$TaskBlue - 80})"/> <!--Right side of Bar -->
      <path d = "M {$tempX},{$tempY} h -{$barWidth} l 2,-2 h {$barWidth} z"  stroke="black" 
            fill="rgb({$TaskRed - 40}, {$TaskGreen - 40}, {$TaskBlue - 40})"/> <!--Top side of Bar-->
      <path d = "M {$tempX},{$tempY} h -{$barWidth} v {$barHeight} h {$barWidth} z" stroke="black" 
            fill="rgb({$TaskRed}, {$TaskGreen}, {$TaskBlue})"/> <!--Front side of bar-->

      <xsl:if test="$AnnotationParam = 'TRUE'">
        <xsl:comment>====== Draw Annotations for Task =========</xsl:comment>
        <text stroke = "black" font-size = "13" transform="translate( {$textX} , {$textY})">
          <xsl:value-of select="./EndTime"/>
        </text>
      </xsl:if>
    </g>

    <xsl:if test="$TaskDetailParam = 'TRUE'">
      <xsl:comment>
        Task Details CheckBox option is CHECKED!!!!
      </xsl:comment>

      <xsl:apply-templates select="./*">
        <xsl:with-param name="position" select="$position"/>
        <xsl:with-param name="tempY" select="$tempY + ($barHeight div 6)"/>
      </xsl:apply-templates>
    </xsl:if>

  </xsl:template>

  <!--  #######################################################################                        
		Motion Template 

		This template is used to draw the Motion Task Detail for the Task
	#######################################################################	-->
  <xsl:template match="Motion">
    <xsl:param name="position"/>
    <xsl:param name="tempY"/>

    <xsl:comment>
      =====Entering Motion Template=====
    </xsl:comment>

    <g id="{@Name}">
      <Name>
        <xsl:value-of select="@Name"/>
      </Name>
      <Duration>
        <xsl:value-of select="round (1000 * (./MotionEndTime - ./MotionStartTime)) div 1000"/>
      </Duration>
      <StartTime>
        <xsl:value-of select="./MotionStartTime"/>
      </StartTime>
      <EndTime>
        <xsl:value-of select="./MotionEndTime"/>
      </EndTime>


      <xsl:variable name="tempX" select="$chartStartX + (./MotionEndTime * $horizontalScale)"/>
      <xsl:variable name="duration" select=" ./MotionEndTime - ./MotionStartTime"/>
      <xsl:variable name="barWidth" select="$duration * $horizontalScale"/>
      <xsl:variable name="height" select="$barHeight * (2 div 3)"/>

      <xsl:comment>
        tempX = <xsl:value-of select="$tempX"/>
        tempY = <xsl:value-of select="$tempY"/>
        duration = <xsl:value-of select="$duration"/>
        horizontal Scale = <xsl:value-of select="$horizontalScale"/>
        barWidth = <xsl:value-of select="$barWidth"/>
        height = <xsl:value-of select="$height"/>
      </xsl:comment>

      <!--<path d = "M {$tempX},{$tempY} l 0,-0 v 15 l -0,0 z" 
                style = "fill:#ffff00;stroke:black;stroke-width:0.5"/>--> <!--Right side of Bar -->
      <!--<path d = "M {$tempX},{$tempY} h -{$barWidth} l 0,-0 h {$barWidth} z"  
                style = "fill:#ffff0a;stroke:black;stroke-width:0.5"/>--> <!--Top side of Bar-->
      <path d = "M {$tempX},{$tempY} h -{$barWidth} v {$height} h {$barWidth} z" stroke="black" 
            stroke-width="0.5" fill="rgb({$MotionRed}, {$MotionGreen}, {$MotionBlue})"/> <!--Front side of bar-->
    </g>
  </xsl:template>

  <!--  #######################################################################                        
		Set Template 

		This template is used to draw the Set IO Task Detail for the Task
	#######################################################################	-->
  <!--<xsl:template match="Set">
		<xsl:param name="position"/>
		<xsl:param name="tempY"/>

		<xsl:comment>
			=====Entering Set Template=====
		</xsl:comment>

		<g id="{@Name}">
			<Name>
			<xsl:value-of select="@Name"/>
			</Name>
			<Duration>
			<xsl:value-of select="round( 1000 * (./SetEndTime - ./SetStartTime)) div 1000"/>
			</Duration>
			<StartTime>
			<xsl:value-of select="./SetStartTime"/>
			</StartTime>
			<EndTime>
			<xsl:value-of select="./SetEndTime"/>
			</EndTime>

			<xsl:variable name="tempX" select="$chartStartX + (./SetEndTime * $horizontalScale)"/>
			<xsl:variable name="duration" select=" ./SetEndTime - ./SetStartTime"/>
			<xsl:variable name="barWidth" select="$duration * $horizontalScale"/>
			<xsl:variable name="height" select="$barHeight * (2 div 3)"/>-->

  
  <!--<path d = "M {$tempX},{$tempY} l 0,-0 v 15 l -0,0 z" 
            style = "fill:#00c400;stroke:black;stroke-width:0.5"/>--> <!--Right side of Bar -->
  
  <!--<path d = "M {$tempX},{$tempY} h -{$barWidth} l 0,-0 h {$barWidth} z"  
            style = "fill:#0ace0a;stroke:black;stroke-width:0.5"/>--> <!--Top side of Bar-->
  
  <!--<path d = "M {$tempX},{$tempY} h -{$barWidth} v {$height} h {$barWidth} z" 
            style = "fill:#0fd30f;stroke:black;stroke-width:0.5"/>--> <!--Front side of bar-->

		<!--</g>
    </xsl:template>-->

  <!--  #######################################################################                        
		Wait Template 

		This template is used to draw the Wait Task Detail for the Task
	#######################################################################	-->
  <xsl:template match="Wait">
    <xsl:param name="position"/>
    <xsl:param name="tempY"/>

    <xsl:comment>
      =====Entering Wait Template=====
    </xsl:comment>

    <g id="{@Name}">
      <Name>
        <xsl:value-of select="@Name"/>
      </Name>
      <Duration>
        <xsl:value-of select="round( 1000 * (./WaitEndTime - ./WaitStartTime)) div 1000"/>
      </Duration>
      <StartTime>
        <xsl:value-of select="./WaitStartTime"/>
      </StartTime>
      <EndTime>
        <xsl:value-of select="./WaitEndTime"/>
      </EndTime>

      <xsl:variable name="tempX" select="$chartStartX + (./WaitEndTime * $horizontalScale)"/>
      <xsl:variable name="duration" select=" ./WaitEndTime - ./WaitStartTime"/>
      <xsl:variable name="barWidth" select="$duration * $horizontalScale"/>
      <xsl:variable name="height" select="$barHeight * (2 div 3)"/>

      <!--<path d = "M {$tempX},{$tempY} l 0,-0 v 15 l -0,0 z" 
                style = "fill:#00c400;stroke:black;stroke-width:0.5"/>--> <!--Right side of Bar -->
      <!--<path d = "M {$tempX},{$tempY} h -{$barWidth} l 0,-0 h {$barWidth} z"  
                style = "fill:#0ace0a;stroke:black;stroke-width:0.5"/>--> <!--Top side of Bar-->
      <path d = "M {$tempX},{$tempY} h -{$barWidth} v {$height} h {$barWidth} z" stroke="black" 
            stroke-width="0.5" fill="rgb({$WaitRed}, {$WaitGreen}, {$WaitBlue})"/> <!--Front side of bar-->

    </g>
  </xsl:template>

  <!--  #######################################################################                        
		Delay Template 

		This template is used to draw the Delay Task Detail for the Task
	#######################################################################	-->
  <xsl:template match="Delay">
    <xsl:param name="position"/>
    <xsl:param name="tempY"/>

    <xsl:comment>
      =====Entering Delay Template=====
    </xsl:comment>

    <g id="{@Name}">
      <Name>
        <xsl:value-of select="@Name"/>
      </Name>
      <Duration>
        <xsl:value-of select="round( 1000 * (./DelayEndTime - ./DelayStartTime)) div 1000"/>
      </Duration>
      <StartTime>
        <xsl:value-of select="./DelayStartTime"/>
      </StartTime>
      <EndTime>
        <xsl:value-of select="./DelayEndTime"/>
      </EndTime>

      <xsl:variable name="tempX" select="$chartStartX + (./DelayEndTime * $horizontalScale)"/>
      <xsl:variable name="duration" select=" ./DelayEndTime - ./DelayStartTime"/>
      <xsl:variable name="barWidth" select="$duration * $horizontalScale"/>
      <xsl:variable name="height" select="$barHeight * (2 div 3)"/>

      <!--<path d = "M {$tempX},{$tempY} l 0,-0 v 15 l -0,0 z" 
                style = "fill:#00c400;stroke:black;stroke-width:0.5"/>--> <!--Right side of Bar -->
      <!--<path d = "M {$tempX},{$tempY} h -{$barWidth} l 0,-0 h {$barWidth} z"  
                style = "fill:#0ace0a;stroke:black;stroke-width:0.5"/>--> <!--Top side of Bar-->
      <path d = "M {$tempX},{$tempY} h -{$barWidth} v {$height} h {$barWidth} z" stroke="black" stroke-width="0.5" 
            fill="rgb({$DelayRed}, {$DelayGreen}, {$DelayBlue})"/> <!--Front side of bar-->

    </g>
  </xsl:template>

</xsl:stylesheet>


