<?xml version="1.0" encoding="UTF-8"?>
<!-- COPYRIGHT DASSAULT SYSTEMES 2002 -->
<!-- 02:06:01 creation -->
<xsl:stylesheet
	xmlns:xsl="http://www.w3.org/TR/WD-xsl"
	xmlns:xlink="http://www.w3.org/1999/xlink"
	xmlns="http://www.w3.org/TR/REC-html40"
	result-ns="">

<xsl:template match="/">
<xsl:comment>This file is automatically generated. Do not edit!</xsl:comment>
  <html>
    <head>
      <title>Images Definition File</title>
    </head>
    <body>
      <xsl:apply-templates/>
    </body>
  </html>
</xsl:template>

<xsl:template match="ImagesList">
  <b>List name : <i><xsl:value-of select="@Name"/></i></b>
  <br/>
  <br/>

  <i>Index :</i><br/>
  <xsl:for-each select="Image">
  <a href="#{@Name}">
  <xsl:value-of select="@Name"/>
  </a>
  <br/>

  </xsl:for-each>
  
  <br/>

  <i>IndexExtension :</i><br/>
  <xsl:for-each select="ImageExtension">
  <a href="#{@Name}">
  <xsl:value-of select="@Name"/>
  </a>
  <br/>

  </xsl:for-each>
  
  <br/>

  <i>IndexByReference :</i><br/>
  <xsl:for-each select="ImageByReference">
  <a href="#{@Name}">
  <xsl:value-of select="@Name"/>
  </a>
  <br/>

  </xsl:for-each>
  
  <br/>

  <xsl:apply-templates/>

</xsl:template>

<xsl:template match="Image">
  <hr/>
  <a name="#{@Name}"></a>
  <b>
  <font color="#FF0505">
  <xsl:value-of select="@Name"/>
  </font>
  </b>
  ( <i>
    <font color="#059005">
    <xsl:value-of select="@Physical"/>
    </font>
    <font color="#059005">
    <xsl:value-of select="@SubType"/>
    </font>
    /
    <font color="#0505FF">
    <xsl:value-of select="@Visu"/>
    </font>
    </i> )
    <xsl:if test="@Hidden">
      Hidden = <xsl:value-of select="@Hidden"/>
    </xsl:if>
    <xsl:if test="@GroupID">
      GroupID = <xsl:value-of select="@GroupID"/>
    </xsl:if>
  <br/>
  <xsl:apply-templates/>
</xsl:template>

<xsl:template match="Criterion">
  <u>Displayed Criterion :</u> <xsl:value-of select="@Name"/> <br/>
  <xsl:apply-templates/>
</xsl:template>

<xsl:template match="Values">
  <u>Input Values :</u>
    
    <xsl:if test="@RefType">
      ref. type = <xsl:value-of select="@RefType"/>
    </xsl:if>
    <xsl:if test="@Combined">
      combined = <xsl:value-of select="@Combined"/>
    </xsl:if>

  <br/>
  <xsl:if test="DefaultPosition">
    <li/>Default Position :
    <xsl:for-each select="DefaultPosition"> <xsl:value-of select="@Name"/> . </xsl:for-each>
  </xsl:if>

  <li/>For Position(s) :
  <xsl:for-each select="Position"> <xsl:value-of select="@Name"/> . </xsl:for-each>
  <br/>
  <li/>Math Type(s) :
  <xsl:for-each select="MathType"> <xsl:value-of select="@Name"/> . </xsl:for-each>

  <xsl:if test="MathDim">
    <li/>Math. Dimension(s) :
    <xsl:for-each select="MathDim"> <xsl:value-of select="@Name"/> . </xsl:for-each>
  </xsl:if>

  <xsl:if test="ValueType">
    <li/>Value Type(s) :
    <xsl:for-each select="ValueType"> <xsl:value-of select="@Name"/> . </xsl:for-each>
  </xsl:if>

  <br/>
  <xsl:apply-templates/>

</xsl:template>

<xsl:template match="Filters">
  <u>Added Filter(s):</u><br/>
  <xsl:apply-templates/>
</xsl:template>

<xsl:template match="Smi">
  <li/>Smi :
  <xsl:value-of select="@Name"/>
  <br/>
  <xsl:apply-templates/>
</xsl:template>

<xsl:template match="Lamina">
  <li/>Lamina :
  <xsl:value-of select="@Name"/>
  <br/>
  <xsl:apply-templates/>
</xsl:template>

<xsl:template match="Component">
  <li/>Component :
  <xsl:value-of select="@Name"/>
  ApplyOn :
  <xsl:value-of select="@ApplyOn"/>
  <br/>
  <xsl:apply-templates/>
</xsl:template>

<xsl:template match="ComplexPart">
  <li/>ComplexPart :
  <xsl:value-of select="@Name"/>
  <br/>
  <xsl:apply-templates/>
</xsl:template>

<xsl:template match="AxisSystem">
  <li/>AxisSystem coordinate system:
  <xsl:value-of select="@CoordinateSystem"/>
  ApplyOn :
  <xsl:value-of select="@ApplyOn"/>
  <br/>
  <xsl:apply-templates/>
</xsl:template>

<xsl:template match="Origin">
  Origin :
    X = <xsl:value-of select="@X"/>
    Y = <xsl:value-of select="@Y"/>
    Z = <xsl:value-of select="@Z"/>
  <br/>
  <xsl:apply-templates/>
</xsl:template>

<xsl:template match="X-Axis">
  X-Axis :
    X = <xsl:value-of select="@X"/>
    Y = <xsl:value-of select="@Y"/>
    Z = <xsl:value-of select="@Z"/>
  <br/>
  <xsl:apply-templates/>
</xsl:template>

<xsl:template match="Y-Axis">
  Y-Axis :
    X = <xsl:value-of select="@X"/>
    Y = <xsl:value-of select="@Y"/>
    Z = <xsl:value-of select="@Z"/>
  <br/>
  <xsl:apply-templates/>
</xsl:template>

<xsl:template match="Z-Axis">
  Z-Axis :
    X = <xsl:value-of select="@X"/>
    Y = <xsl:value-of select="@Y"/>
    Z = <xsl:value-of select="@Z"/>
  <br/>
  <xsl:apply-templates/>
</xsl:template>

<xsl:template match="ProcessList">
  <u>Required Processes :</u><br/>
  <xsl:apply-templates/>
</xsl:template>

<xsl:template match="Process">
  <li/><xsl:value-of select="@Name"/>

  <xsl:if test="IParam"> I-Param. =
    <xsl:for-each select="IParam"> <xsl:value-of/> </xsl:for-each>
  </xsl:if>
  
  <xsl:if test="FParam"> F-Param. =
    <xsl:for-each select="FParam"> <xsl:value-of/> </xsl:for-each>
  </xsl:if>

  <xsl:if test="CParam"> C-Param. =
    <xsl:for-each select="CParam"> <xsl:value-of/> </xsl:for-each>
  </xsl:if>

  <br/>
</xsl:template>

<xsl:template match="Attributes">
  <xsl:apply-templates/>
</xsl:template>

<xsl:template match="Text">
  <u>Text attributes :</u><br/>
  <xsl:apply-templates/>
</xsl:template>

<xsl:template match="Symbol">
  <u>Symbol attributes :</u><br/>

    <xsl:if test="@Type">
      Type = <xsl:value-of select="@Type"/>
    </xsl:if>
    <xsl:if test="@ZoomSensitive">
      ZoomSensitive = <xsl:value-of select="@ZoomSensitive"/>
    </xsl:if>
    <xsl:if test="@Fixed">
      Fixed = <xsl:value-of select="@Fixed"/>
    </xsl:if>
    <br/>

  <xsl:apply-templates/>
</xsl:template>

<xsl:template match="FixedColor">
  <xsl:if test="@Red">
    Red = <xsl:value-of select="@Red"/>
  </xsl:if>
  <xsl:if test="@Green">
    Green = <xsl:value-of select="@Green"/>
  </xsl:if>
  <xsl:if test="@Blue">
    Blue = <xsl:value-of select="@Blue"/>
  </xsl:if>
  <xsl:if test="@Alpha">
    Alpha = <xsl:value-of select="@Alpha"/>
  </xsl:if>
  <br/>

  <xsl:apply-templates/>
</xsl:template>


<xsl:template match="Display">
  <u>Display attributes :</u><br/>

    <xsl:if test="@Deformed">
      Deformed = <xsl:value-of select="@Deformed"/>
    </xsl:if>
    <xsl:if test="@DeformedMethod">
      DeformedMethod = <xsl:value-of select="@DeformedMethod"/>
    </xsl:if>
    <xsl:if test="@WithoutValues">
      WithoutValues = <xsl:value-of select="@WithoutValues"/>
    </xsl:if>
    <xsl:if test="@Mode">
      Mode = <xsl:value-of select="@Mode"/>
    </xsl:if>
    <xsl:if test="@Shrink">
      Shrink = <xsl:value-of select="@Shrink"/>
    </xsl:if>
    <br/>

  <xsl:apply-templates/>
</xsl:template>

<xsl:template match="ColorMap">
  <u>ColorMap attributes :</u><br/>

    <xsl:if test="@MinMaxMode">
      MinMaxMode = <xsl:value-of select="@MinMaxMode"/>
    </xsl:if>
    <xsl:if test="@ComputeMode">
      ComputeMode = <xsl:value-of select="@ComputeMode"/>
    </xsl:if>
    <xsl:if test="@Smooth">
      Smooth = <xsl:value-of select="@Smooth"/>
    </xsl:if>
    <br/>

  <xsl:apply-templates/>
</xsl:template>


<xsl:template match="ImageExtension">
  <hr/>
  <a name="#{@Name}"></a>
  <b>
  <font color="#FF0505">
  <xsl:value-of select="@Name"/>
  </font>
  </b>
  ( <i>
    <font color="#FF00FF">
    Image extension 
    </font>
  </i> )
  <xsl:apply-templates/>
</xsl:template>

<xsl:template match="AddValues">
  <br/>
  <u>Add Values :</u>
    
  <br/>
  <xsl:if test="DefaultPosition">
    <li/>Default Position :
    <xsl:for-each select="DefaultPosition"> <xsl:value-of select="@Name"/> . </xsl:for-each>
  </xsl:if>

  <xsl:if test="AddPosition">
  <li/>For Position(s) :
  <xsl:for-each select="AddPosition"> <xsl:value-of select="@Name"/> . </xsl:for-each>
  <br/>
  </xsl:if>

  <xsl:apply-templates/>
</xsl:template>

<xsl:template match="RemoveValues">
  <br/>
  <u>Remove Values :</u>
    
  <br/>
  <li/>For Position(s) :
  <xsl:for-each select="RemovePosition"> <xsl:value-of select="@Name"/> . </xsl:for-each>
  <br/>

  <xsl:apply-templates/>
</xsl:template>

<xsl:template match="ImageByReference">
  <hr/>
  <a name="#{@Name}"></a>
  <b>
  <font color="#FF0505">
  <xsl:value-of select="@Name"/>
  </font>
  </b>
  ( <i>
    <font color="#FF00FF">
    Image by reference 
    </font>
    <font color="#0505FF">
    <xsl:value-of select="@Reference"/>
    </font>
    <font color="#059005">
    <xsl:value-of select="@SubType"/>
    </font>
    <xsl:if test="@Hidden">
      Hidden = <xsl:value-of select="@Hidden"/>
    </xsl:if>
    <xsl:if test="@GroupID">
      GroupID = <xsl:value-of select="@GroupID"/>
    </xsl:if>
  </i> )
  <xsl:apply-templates/>
</xsl:template>

</xsl:stylesheet>
