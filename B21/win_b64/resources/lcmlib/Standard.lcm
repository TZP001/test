@[ModDef{} module $"Standard" @[Module{} = @[ModElement{} struct
             @[ModDef{$"AUTIsNotVisible"=@[AssocData{} 1@]} open @@$"Pervasives"@]
             @[ModDef{} type $"pure"@[TypeDef{}  = @[TypeExpr{} $"pure"@]@]@]
             @[ModDef{} let $"=" = @[Expr{} $"="@]@]
             @[ModDef{} let $"<>" = @[Expr{} $"<>"@]@]
             @[ModDef{} let $">" = @[Expr{} $">"@]@]
             @[ModDef{} let $"<" = @[Expr{} $"<"@]@]
             @[ModDef{} let $">=" = @[Expr{} $">="@]@]
             @[ModDef{} let $"<=" = @[Expr{} $"<="@]@]
             @[ModDef{} module $"Boolean" @[Module{} = @[ModElement{} struct
                          @[ModDef{} type $"bool"@[TypeDef{}  = @[TypeExpr{} $"bool"@]@]@]
                          @[ModDef{} let $"not" = @[Expr{} $"not"@]@]
                          @[ModDef{} let $"or" = @[Expr{} $"or"@]@]
                          @[ModDef{} let $"and" = @[Expr{} $"and"@]@]
                        end@]@]@]
             @[ModDef{$"AUTIsNotVisible"=@[AssocData{} 1@]} $$include $"Boolean"@]
             @[ModDef{} module $"Number" @[Module{} = @[ModElement{} struct
                          @[ModDef{} let $"+" = @[Expr{} $"+"@]@]
                          @[ModDef{} let $"-" = @[Expr{} $"-"@]@]
                          @[ModDef{} let $"*" = @[Expr{} $"*"@]@]
                          @[ModDef{} let $"/" = @[Expr{} $"/"@]@]
                          @[ModDef{} let $"**" = @[Expr{} $"**"@]@]
                          @[ModDef{} module $"Integer" @[Module{} = @[ModElement{} struct
                                       @[ModDef{} type $"sint"@[TypeDef{}  = @[TypeExpr{} $"sint"@]@]@]
                                       @[ModDef{} type $"int"@[TypeDef{}  = @[TypeExpr{} $"int"@]@]@]
                                       @[ModDef{} type $"lint"@[TypeDef{}  = @[TypeExpr{} $"lint"@]@]@]
                                       @[ModDef{} type $"usint"@[TypeDef{}  = @[TypeExpr{} $"usint"@]@]@]
                                       @[ModDef{} type $"uint"@[TypeDef{}  = @[TypeExpr{} $"uint"@]@]@]
                                       @[ModDef{} type $"ulint"@[TypeDef{}  = @[TypeExpr{} $"ulint"@]@]@]
                                       @[ModDef{} let $"%" = @[Expr{} $"%"@]@]
                                       @[ModDef{} let $"&" = @[Expr{} $"&"@]@]
                                       @[ModDef{} let $"|" = @[Expr{} $"|"@]@]
                                       @[ModDef{} let $"~" = @[Expr{} $"~"@]@]
                                       @[ModDef{} let $"<<" = @[Expr{} $"<<"@]@]
                                       @[ModDef{} let $">>" = @[Expr{} $">>"@]@]
                                       @[ModDef{} let $"^" = @[Expr{} $"^"@]@]
                                     end@]@]@]
                          @[ModDef{$"AUTIsNotVisible"=@[AssocData{} 1@]} $$include $"Integer"@]
                          @[ModDef{} module $"Floating" @[Module{} = @[ModElement{} struct
                                       @[ModDef{} type $"float"@[TypeDef{}  = @[TypeExpr{} $"float"@]@]@]
                                       @[ModDef{} type $"double"@[TypeDef{}  = @[TypeExpr{} $"double"@]@]@]
                                       @[ModDef{} type $"ldouble"@[TypeDef{}  = @[TypeExpr{} $"ldouble"@]@]@]
                                       @[ModDef{} let $"sin" = @[Expr{} $"sin"@]@]
                                       @[ModDef{} let $"cos" = @[Expr{} $"cos"@]@]
                                       @[ModDef{} let $"sqrt" = @[Expr{} $"sqrt"@]@]
                                       @[ModDef{} let $"exp" = @[Expr{} $"exp"@]@]
                                       @[ModDef{} let $"log" = @[Expr{} $"log"@]@]
                                       @[ModDef{} let $"log10" = @[Expr{} $"log10"@]@]
                                       @[ModDef{} let $"tan" = @[Expr{} $"tan"@]@]
                                       @[ModDef{} let $"acos" = @[Expr{} $"acos"@]@]
                                       @[ModDef{} let $"asin" = @[Expr{} $"asin"@]@]
                                       @[ModDef{} let $"atan" = @[Expr{} $"atan"@]@]
                                       @[ModDef{} let $"atan2" = @[Expr{} $"atan2"@]@]
                                       @[ModDef{} let $"cosh" = @[Expr{} $"cosh"@]@]
                                       @[ModDef{} let $"sinh" = @[Expr{} $"sinh"@]@]
                                       @[ModDef{} let $"tanh" = @[Expr{} $"tanh"@]@]
                                     end@]@]@]
                          @[ModDef{$"AUTIsNotVisible"=@[AssocData{} 1@]} $$include $"Floating"@]
                        end@]@]@]
             @[ModDef{$"AUTIsNotVisible"=@[AssocData{} 1@]} $$include $"Number"@]
             @[ModDef{} module $"Word" @[Module{} = @[ModElement{} struct
                          @[ModDef{} type $"sword"@[TypeDef{}  = @[TypeExpr{} $"sword"@]@]@]
                          @[ModDef{} type $"word"@[TypeDef{}  = @[TypeExpr{} $"word"@]@]@]
                          @[ModDef{} type $"lword"@[TypeDef{}  = @[TypeExpr{} $"lword"@]@]@]
                          @[ModDef{} let $"shr" = @[Expr{} $"shr"@]@]
                          @[ModDef{} let $"shl" = @[Expr{} $"shl"@]@]
                          @[ModDef{} let $"ror" = @[Expr{} $"ror"@]@]
                          @[ModDef{} let $"rol" = @[Expr{} $"rol"@]@]
                          @[ModDef{} let $"and_bits" = @[Expr{} $"and_bits"@]@]
                          @[ModDef{} let $"or_bits" = @[Expr{} $"or_bits"@]@]
                          @[ModDef{} let $"xor_bits" = @[Expr{} $"xor_bits"@]@]
                          @[ModDef{} let $"not_bits" = @[Expr{} $"not_bits"@]@]
                        end@]@]@]
             @[ModDef{$"AUTIsNotVisible"=@[AssocData{} 1@]} $$include $"Word"@]
             @[ModDef{} module $"String" @[Module{} = @[ModElement{} struct
                          @[ModDef{} type $"string"@[TypeDef{}  = @[TypeExpr{} $"string"@]@]@]
                          @[ModDef{} let $"concat" = @[Expr{} $"concat"@]@]
                        end@]@]@]
             @[ModDef{$"AUTIsNotVisible"=@[AssocData{} 1@]} $$include $"String"@]
             @[ModDef{} module $"Char" @[Module{} = @[ModElement{} struct
                          @[ModDef{} type $"char"@[TypeDef{}  = @[TypeExpr{} $"char"@]@]@]
                        end@]@]@]
             @[ModDef{$"AUTIsNotVisible"=@[AssocData{} 1@]} $$include $"Char"@]
             @[ModDef{} module $"Time" @[Module{} = @[ModElement{} struct
                          @[ModDef{} let $"get_cycle_time" = @[Expr{} $"get_cycle_time"@]@]
                        end@]@]@]
             @[ModDef{$"AUTIsNotVisible"=@[AssocData{} 1@]} $$include $"Time"@]
             @[ModDef{} module $"Type Conversions" @[Module{} = @[ModElement{} struct
                          @[ModDef{} let $"float_to_double" = @[Expr{} $"float_to_double"@]@]
                          @[ModDef{} let $"float_to_ldouble" = @[Expr{} $"float_to_ldouble"@]@]
                          @[ModDef{} let $"float_to_int" = @[Expr{} $"float_to_int"@]@]
                          @[ModDef{} let $"float_to_sint" = @[Expr{} $"float_to_sint"@]@]
                          @[ModDef{} let $"float_to_lint" = @[Expr{} $"float_to_lint"@]@]
                          @[ModDef{} let $"float_to_uint" = @[Expr{} $"float_to_uint"@]@]
                          @[ModDef{} let $"float_to_usint" = @[Expr{} $"float_to_usint"@]@]
                          @[ModDef{} let $"float_to_ulint" = @[Expr{} $"float_to_ulint"@]@]
                          @[ModDef{} let $"double_to_float" = @[Expr{} $"double_to_float"@]@]
                          @[ModDef{} let $"double_to_ldouble" = @[Expr{} $"double_to_ldouble"@]@]
                          @[ModDef{} let $"double_to_int" = @[Expr{} $"double_to_int"@]@]
                          @[ModDef{} let $"double_to_sint" = @[Expr{} $"double_to_sint"@]@]
                          @[ModDef{} let $"double_to_lint" = @[Expr{} $"double_to_lint"@]@]
                          @[ModDef{} let $"double_to_uint" = @[Expr{} $"double_to_uint"@]@]
                          @[ModDef{} let $"double_to_usint" = @[Expr{} $"double_to_usint"@]@]
                          @[ModDef{} let $"double_to_ulint" = @[Expr{} $"double_to_ulint"@]@]
                          @[ModDef{} let $"ldouble_to_float" = @[Expr{} $"ldouble_to_float"@]@]
                          @[ModDef{} let $"ldouble_to_double" = @[Expr{} $"ldouble_to_double"@]@]
                          @[ModDef{} let $"ldouble_to_int" = @[Expr{} $"ldouble_to_int"@]@]
                          @[ModDef{} let $"ldouble_to_sint" = @[Expr{} $"ldouble_to_sint"@]@]
                          @[ModDef{} let $"ldouble_to_lint" = @[Expr{} $"ldouble_to_lint"@]@]
                          @[ModDef{} let $"ldouble_to_uint" = @[Expr{} $"ldouble_to_uint"@]@]
                          @[ModDef{} let $"ldouble_to_usint" = @[Expr{} $"ldouble_to_usint"@]@]
                          @[ModDef{} let $"ldouble_to_ulint" = @[Expr{} $"ldouble_to_ulint"@]@]
                          @[ModDef{} let $"int_to_float" = @[Expr{} $"int_to_float"@]@]
                          @[ModDef{} let $"int_to_double" = @[Expr{} $"int_to_double"@]@]
                          @[ModDef{} let $"int_to_ldouble" = @[Expr{} $"int_to_ldouble"@]@]
                          @[ModDef{} let $"int_to_sint" = @[Expr{} $"int_to_sint"@]@]
                          @[ModDef{} let $"int_to_lint" = @[Expr{} $"int_to_lint"@]@]
                          @[ModDef{} let $"int_to_uint" = @[Expr{} $"int_to_uint"@]@]
                          @[ModDef{} let $"int_to_usint" = @[Expr{} $"int_to_usint"@]@]
                          @[ModDef{} let $"int_to_ulint" = @[Expr{} $"int_to_ulint"@]@]
                          @[ModDef{} let $"sint_to_float" = @[Expr{} $"sint_to_float"@]@]
                          @[ModDef{} let $"sint_to_double" = @[Expr{} $"sint_to_double"@]@]
                          @[ModDef{} let $"sint_to_ldouble" = @[Expr{} $"sint_to_ldouble"@]@]
                          @[ModDef{} let $"sint_to_int" = @[Expr{} $"sint_to_int"@]@]
                          @[ModDef{} let $"sint_to_lint" = @[Expr{} $"sint_to_lint"@]@]
                          @[ModDef{} let $"sint_to_uint" = @[Expr{} $"sint_to_uint"@]@]
                          @[ModDef{} let $"sint_to_usint" = @[Expr{} $"sint_to_usint"@]@]
                          @[ModDef{} let $"sint_to_ulint" = @[Expr{} $"sint_to_ulint"@]@]
                          @[ModDef{} let $"lint_to_float" = @[Expr{} $"lint_to_float"@]@]
                          @[ModDef{} let $"lint_to_double" = @[Expr{} $"lint_to_double"@]@]
                          @[ModDef{} let $"lint_to_ldouble" = @[Expr{} $"lint_to_ldouble"@]@]
                          @[ModDef{} let $"lint_to_int" = @[Expr{} $"lint_to_int"@]@]
                          @[ModDef{} let $"lint_to_sint" = @[Expr{} $"lint_to_sint"@]@]
                          @[ModDef{} let $"lint_to_uint" = @[Expr{} $"lint_to_uint"@]@]
                          @[ModDef{} let $"lint_to_usint" = @[Expr{} $"lint_to_usint"@]@]
                          @[ModDef{} let $"lint_to_ulint" = @[Expr{} $"lint_to_ulint"@]@]
                          @[ModDef{} let $"uint_to_float" = @[Expr{} $"uint_to_float"@]@]
                          @[ModDef{} let $"uint_to_double" = @[Expr{} $"uint_to_double"@]@]
                          @[ModDef{} let $"uint_to_ldouble" = @[Expr{} $"uint_to_ldouble"@]@]
                          @[ModDef{} let $"uint_to_int" = @[Expr{} $"uint_to_int"@]@]
                          @[ModDef{} let $"uint_to_sint" = @[Expr{} $"uint_to_sint"@]@]
                          @[ModDef{} let $"uint_to_lint" = @[Expr{} $"uint_to_lint"@]@]
                          @[ModDef{} let $"uint_to_usint" = @[Expr{} $"uint_to_usint"@]@]
                          @[ModDef{} let $"uint_to_ulint" = @[Expr{} $"uint_to_ulint"@]@]
                          @[ModDef{} let $"usint_to_float" = @[Expr{} $"usint_to_float"@]@]
                          @[ModDef{} let $"usint_to_double" = @[Expr{} $"usint_to_double"@]@]
                          @[ModDef{} let $"usint_to_ldouble" = @[Expr{} $"usint_to_ldouble"@]@]
                          @[ModDef{} let $"usint_to_int" = @[Expr{} $"usint_to_int"@]@]
                          @[ModDef{} let $"usint_to_sint" = @[Expr{} $"usint_to_sint"@]@]
                          @[ModDef{} let $"usint_to_lint" = @[Expr{} $"usint_to_lint"@]@]
                          @[ModDef{} let $"usint_to_uint" = @[Expr{} $"usint_to_uint"@]@]
                          @[ModDef{} let $"usint_to_ulint" = @[Expr{} $"usint_to_ulint"@]@]
                          @[ModDef{} let $"ulint_to_float" = @[Expr{} $"ulint_to_float"@]@]
                          @[ModDef{} let $"ulint_to_double" = @[Expr{} $"ulint_to_double"@]@]
                          @[ModDef{} let $"ulint_to_ldouble" = @[Expr{} $"ulint_to_ldouble"@]@]
                          @[ModDef{} let $"ulint_to_int" = @[Expr{} $"ulint_to_int"@]@]
                          @[ModDef{} let $"ulint_to_sint" = @[Expr{} $"ulint_to_sint"@]@]
                          @[ModDef{} let $"ulint_to_lint" = @[Expr{} $"ulint_to_lint"@]@]
                          @[ModDef{} let $"ulint_to_uint" = @[Expr{} $"ulint_to_uint"@]@]
                          @[ModDef{} let $"ulint_to_usint" = @[Expr{} $"ulint_to_usint"@]@]
                        end@]@]@]
           end@]@]@]
