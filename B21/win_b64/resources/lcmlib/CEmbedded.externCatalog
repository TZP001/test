



type "LCMBool" 		= "LCMBool";

type "LCMWord8" 	= "LCMWord8";
type "LCMWord16" 	= "LCMWord16";
type "LCMWord32" 	= "LCMWord32";
type "LCMWord64" 	= "LCMWord64";

type "LCMUint8"		= "LCMUint8";
type "LCMUint16"	= "LCMUint16";
type "LCMUint32"	= "LCMUint32";
type "LCMUint64"	= "LCMUint64";

type "LCMInt8"		= "LCMInt8";
type "LCMInt16"		= "LCMInt16";
type "LCMInt32"		= "LCMInt32";
type "LCMInt64"		= "LCMInt64";

type "LCMFloat32"	= "LCMFloat32"; 
type "LCMFloat64"	= "LCMFloat64"; 
(*type "LCMFloat128"	= "LCMFloat128"; *)

type "LCMString8"	= "LCMString8";
type "LCMChar8"		= "LCMChar8";


(* LCMBoolean function*)
fun "eq_LCMBool" = infix "==";
fun "neq_LCMBool" = infix "!=";
fun "not" = prefix "!";
fun "and" = infix "&&";
fun "or" = infix "||";

(* LCMFloat32 function *)
fun "plus_LCMFloat32" = infix "+";
fun "minus_LCMFloat32" = infix "-";
fun "times_LCMFloat32" = infix "*";
fun "div_LCMFloat32" = infix "/";
fun "pow_LCMFloat32" = prefix "(LCMFloat32) pow";
fun "eq_LCMFloat32" = infix "==";
fun "neq_LCMFloat32" = infix "!=";
fun "less_LCMFloat32" = infix "<";
fun "greater_LCMFloat32" = infix ">";
fun "lessequal_LCMFloat32" = infix "<=";
fun "greaterequal_LCMFloat32" = infix ">=";
fun "sin_LCMFloat32" = prefix "sin";
fun "cos_LCMFloat32" = prefix "cos";
fun "sqrt_LCMFloat32"  = prefix "sqrt";
fun "exp_LCMFloat32"  = prefix "exp";
fun "log_LCMFloat32"  = prefix "log";
fun "log10_LCMFloat32"  = prefix "log10";
fun "tan_LCMFloat32"  = prefix "tan";
fun "acos_LCMFloat32"  = prefix "acos";
fun "asin_LCMFloat32"  = prefix "asin";
fun "atan_LCMFloat32"  = prefix "atan";
fun "atan2_LCMFloat32"  = prefix "atan2";
fun "cosh_LCMFloat32"  = prefix "cosh";
fun "sinh_LCMFloat32"  = prefix "sinh";
fun "tanh_LCMFloat32"  = prefix "tanh";


(* LCMFloat64 function *)
fun "plus_LCMFloat64" = infix "+";
fun "minus_LCMFloat64" = infix "-";
fun "times_LCMFloat64" = infix "*";
fun "div_LCMFloat64" = infix "/";
fun "pow_LCMFloat64" = prefix "pow";
fun "eq_LCMFloat64" = infix "==";
fun "neq_LCMFloat64" = infix "!=";
fun "less_LCMFloat64" = infix "<";
fun "greater_LCMFloat64" = infix ">";
fun "lessequal_LCMFloat64" = infix "<=";
fun "greaterequal_LCMFloat64" = infix ">=";
fun "sin_LCMFloat64" = prefix "sin";
fun "cos_LCMFloat64" = prefix "cos";
fun "sqrt_LCMFloat64"  = prefix "sqrt";
fun "exp_LCMFloat64"  = prefix "exp";
fun "log_LCMFloat64"  = prefix "log";
fun "log10_LCMFloat64"  = prefix "log10";
fun "tan_LCMFloat64"  = prefix "tan";
fun "acos_LCMFloat64"  = prefix "acos";
fun "asin_LCMFloat64"  = prefix "asin";
fun "atan_LCMFloat64"  = prefix "atan";
fun "atan2_LCMFloat64"  = prefix "atan2";
fun "cosh_LCMFloat64"  = prefix "cosh";
fun "sinh_LCMFloat64"  = prefix "sinh";
fun "tanh_LCMFloat64"  = prefix "tanh";

(* LCMFloat128 function 
fun "plus_LCMFloat128" = infix "+" ;
fun "minus_LCMFloat128" = infix "-" ;
fun "times_LCMFloat128" = infix "*" ;
fun "div_LCMFloat128" = infix "/" ;
fun "pow_LCMFloat128" =  _;
fun "eq_LCMFloat128" = infix "==" ;
fun "neq_LCMFloat128" = infix "!=" ;
fun "less_LCMFloat128" = infix "<" ;
fun "greater_LCMFloat128" =  infix ">" ;
fun "lessequal_LCMFloat128" = infix "<=" ;
fun "greaterequal_LCMFloat128" = infix ">=";
fun "sin_LCMFloat128" = _;
fun "cos_LCMFloat128" = _;
fun "sqrt_LCMFloat128"  = _;
fun "exp_LCMFloat128"  = _;
fun "log_LCMFloat128"  = _;
fun "log10_LCMFloat128"  = _;
fun "tan_LCMFloat128"  = _;
fun "acos_LCMFloat128"  = _;
fun "asin_LCMFloat128"  = _;
fun "atan_LCMFloat128"  = _;
fun "atan2_LCMFloat128"  = _;
fun "cosh_LCMFloat128"  = _;
fun "sinh_LCMFloat128"  = _;
fun "tanh_LCMFloat128"  = _;
*)

(* LCMInt8 functions*)
fun "plus_LCMInt8" = infix "+";
fun "minus_LCMInt8" = infix "-";
fun "times_LCMInt8" = infix "*";
fun "div_LCMInt8" = infix "/";
fun "pow_LCMInt8" = prefix "pow_LCMInt8";
fun "eq_LCMInt8" = infix "==";
fun "neq_LCMInt8" = infix "!=";
fun "less_LCMInt8" = infix "<";
fun "greater_LCMInt8" = infix ">";
fun "lessequal_LCMInt8" = infix "<=";
fun "greaterequal_LCMInt8" = infix ">=";
fun "mod_LCMInt8" = infix "%";
fun "land_LCMInt8" = infix "&";
fun "lor_LCMInt8" = infix "|";
fun "lnot_LCMInt8" = prefix "~" ;
fun "shiftleft_LCMInt8" = infix "<<" ;
fun "shiftright_LCMInt8" = infix ">>";
fun "lxor_LCMInt8" = infix "^";

(* LCMInt16 functions*)
fun "plus_LCMInt16" = infix "+";
fun "minus_LCMInt16" = infix "-";
fun "times_LCMInt16" = infix "*";
fun "div_LCMInt16" = infix "/";
fun "pow_LCMInt16" = prefix "pow_LCMInt16";
fun "eq_LCMInt16" = infix "==";
fun "neq_LCMInt16" = infix "!=";
fun "less_LCMInt16" = infix "<";
fun "greater_LCMInt16" = infix ">";
fun "lessequal_LCMInt16" = infix "<=";
fun "greaterequal_LCMInt16" = infix ">=";
fun "mod_LCMInt16" = infix "%";
fun "land_LCMInt16" = infix "&" ;
fun "lor_LCMInt16" = infix "|" ;
fun "lnot_LCMInt16" = prefix "~" ;
fun "shiftleft_LCMInt16" = infix "<<" ;
fun "shiftright_LCMInt16" = infix ">>" ;
fun "lxor_LCMInt16" = infix "^" ;

(* LCMInt32 functions*)
fun "plus_LCMInt32" = infix "+";
fun "minus_LCMInt32" = infix "-";
fun "times_LCMInt32" = infix "*";
fun "div_LCMInt32" = infix "/";
fun "pow_LCMInt32" = prefix "pow_LCMInt32";
fun "eq_LCMInt32" = infix "==";
fun "neq_LCMInt32" = infix "!=";
fun "less_LCMInt32" = infix "<";
fun "greater_LCMInt32" = infix ">";
fun "lessequal_LCMInt32" = infix "<=";
fun "greaterequal_LCMInt32" = infix ">=";
fun "mod_LCMInt32" = infix "%";
fun "land_LCMInt32" = infix "&";
fun "lor_LCMInt32" = infix "|";
fun "lnot_LCMInt32" = prefix "~" ;
fun "shiftleft_LCMInt32" = infix "<<";
fun "shiftright_LCMInt32" = infix ">>";
fun "lxor_LCMInt32" = infix "^" ;

(* LCMInt64 functions*)
fun "plus_LCMInt64" = infix "+";
fun "minus_LCMInt64" = infix "-";
fun "times_LCMInt64" = infix "*";
fun "div_LCMInt64" = infix "/";
fun "pow_LCMInt64" = prefix "pow_LCMInt64";
fun "eq_LCMInt64" = infix "==";
fun "neq_LCMInt64" = infix "!=";
fun "less_LCMInt64" = infix "<";
fun "greater_LCMInt64" = infix ">";
fun "lessequal_LCMInt64" = infix "<=";
fun "greaterequal_LCMInt64" = infix ">=";
fun "mod_LCMInt64" = infix "%";
fun "land_LCMInt64" = infix "&" ;
fun "lor_LCMInt64" = infix "|" ;
fun "lnot_LCMInt64" = prefix "~" ;
fun "shiftleft_LCMInt64" = infix "<<" ;
fun "shiftright_LCMInt64" = infix ">>" ;
fun "lxor_LCMInt64" = infix "^" ;


(* LCMUint8 functions*)
fun "plus_LCMUint8" = infix "+";
fun "minus_LCMUint8" = infix "-";
fun "times_LCMUint8" = infix "*";
fun "div_LCMUint8" = infix "/";
fun "pow_LCMUint8" = prefix "(LCMUint8) pow" ;
fun "eq_LCMUint8" = infix "==";
fun "neq_LCMUint8" = infix "!=";
fun "less_LCMUint8" = infix "<";
fun "greater_LCMUint8" = infix ">";
fun "lessequal_LCMUint8" = infix "<=";
fun "greaterequal_LCMUint8" = infix ">=";
fun "mod_LCMUint8" = infix "%";
fun "land_LCMUint8" = infix "&";
fun "lor_LCMUint8" = infix "|";
fun "lnot_LCMUint8" = prefix "~" ;
fun "shiftleft_LCMUint8" = infix "<<" ;
fun "shiftright_LCMUint8" = infix ">>";
fun "lxor_LCMUint8" = infix "^";

(* LCMUint16 functions*)
fun "plus_LCMUint16" = infix "+";
fun "minus_LCMUint16" = infix "-";
fun "times_LCMUint16" = infix "*";
fun "div_LCMUint16" = infix "/";
fun "pow_LCMUint16" = prefix "(LCMUint16) pow" ;
fun "eq_LCMUint16" = infix "==";
fun "neq_LCMUint16" = infix "!=";
fun "less_LCMUint16" = infix "<";
fun "greater_LCMUint16" = infix ">";
fun "lessequal_LCMUint16" = infix "<=";
fun "greaterequal_LCMUint16" = infix ">=";
fun "mod_LCMUint16" = infix "%";
fun "land_LCMUint16" = infix "&" ;
fun "lor_LCMUint16" = infix "|" ;
fun "lnot_LCMUint16" = prefix "~" ;
fun "shiftleft_LCMUint16" = infix "<<" ;
fun "shiftright_LCMUint16" = infix ">>" ;
fun "lxor_LCMUint16" = infix "^" ;

(* LCMUint32 functions*)
fun "plus_LCMUint32" = infix "+";
fun "minus_LCMUint32" = infix "-";
fun "times_LCMUint32" = infix "*";
fun "div_LCMUint32" = infix "/";
fun "pow_LCMUint32" = prefix "(LCMUint32) pow" ;
fun "eq_LCMUint32" = infix "==";
fun "neq_LCMUint32" = infix "!=";
fun "less_LCMUint32" = infix "<";
fun "greater_LCMUint32" = infix ">";
fun "lessequal_LCMUint32" = infix "<=";
fun "greaterequal_LCMUint32" = infix ">=";
fun "mod_LCMUint32" = infix "%";
fun "land_LCMUint32" = infix "&" ;
fun "lor_LCMUint32" = infix "|" ;
fun "lnot_LCMUint32" = prefix "~" ;
fun "shiftleft_LCMUint32" = infix "<<" ;
fun "shiftright_LCMUint32" = infix ">>" ;
fun "lxor_LCMUint32" = infix "^" ;

(* LCMUint64 functions*)
fun "plus_LCMUint64" = infix "+" ;
fun "minus_LCMUint64" = infix "-" ;
fun "times_LCMUint64" = infix "*" ;
fun "div_LCMUint64" = infix "/" ;
fun "pow_LCMUint64" = prefix "pow_LCMUint64" ;
fun "eq_LCMUint64" = infix "==" ;
fun "neq_LCMUint64" = infix "!=" ;
fun "less_LCMUint64" = infix "<" ;
fun "greater_LCMUint64" = infix ">" ;
fun "lessequal_LCMUint64" = infix "<=" ;
fun "greaterequal_LCMUint64" = infix ">=" ;
fun "mod_LCMUint64" = infix "%" ;
fun "land_LCMUint64" = infix "&" ;
fun "lor_LCMUint64" = infix "|" ;
fun "lnot_LCMUint64" = prefix "~" ;
fun "shiftleft_LCMUint64" = infix "<<" ;
fun "shiftright_LCMUint64" = infix ">>" ;
fun "lxor_LCMUint64" = infix "^" ;

(* LCMString8 functions *)
fun "eq_LCMString8" = prefix "lcmEqString8" ;
fun "neq_LCMString8" = prefix "lcmNeqString8" ;
fun "less_LCMString8" = prefix "lcmLessString8" ;
fun "greater_LCMString8" = prefix "lcmGreaterString8" ;
fun "lessequal_LCMString8" = prefix "lcmLessequalString8" ;
fun "greaterequal_LCMString8" = prefix "lcmGreaterequalString8" ;
fun "concat_LCMString8" = prefix "lcmConcatString8" ;

(* LCMChar8 functions*)  
fun "eq_LCMChar8" = infix "==" ;
fun "neq_LCMChar8" = infix "!=" ;
fun "less_LCMChar8" = infix "<" ;
fun "greater_LCMChar8" = infix ">" ;
fun "lessequal_LCMChar8" = infix "<=" ;
fun "greaterequal_LCMChar8" = infix ">=" ;

(* type LCMWord8*)
fun "eq_LCMWord8" = infix "==";
fun "neq_LCMWord8" = infix "!=";
fun "shl_LCMWord8" = infix "<<";
fun "shr_LCMWord8" = infix ">>";
fun "ror_LCMWord8" = prefix "lcmRorWord8";
fun "rol_LCMWord8" = prefix "lcmRolWord8";
fun "and_bits_LCMWord8" = infix "&";
fun "or_bits_LCMWord8" = infix "|";
fun "xor_bits_LCMWord8" = infix "^";
fun "not_bits_LCMWord8" = prefix "~";

(* type LCMWord16*)
fun "eq_LCMWord16" = infix "==" ;
fun "neq_LCMWord16" = infix "!=" ;
fun "shl_LCMWord16" = infix "<<" ;
fun "shr_LCMWord16" = infix ">>" ;
fun "ror_LCMWord16" = prefix "lcmRorWord16" ;
fun "rol_LCMWord16" = prefix "lcmRolWord16" ;
fun "and_bits_LCMWord16" = infix "&";
fun "or_bits_LCMWord16" = infix "|";
fun "xor_bits_LCMWord16" = infix "^";
fun "not_bits_LCMWord16" = prefix "~";
  
(* type LCMWord32*)
fun "eq_LCMWord32" = infix "==";
fun "neq_LCMWord32" = infix "!=";
fun "shl_LCMWord32" = infix "<<";
fun "shr_LCMWord32" = infix ">>";
fun "ror_LCMWord32" = prefix "lcmRorWord32";
fun "rol_LCMWord32" = prefix "lcmRolWord32";
fun "and_bits_LCMWord32" = infix "&";
fun "or_bits_LCMWord32" = infix "|";
fun "xor_bits_LCMWord32" = infix "^";
fun "not_bits_LCMWord32" = prefix "~";

(* type LCMWord64*)
fun "eq_LCMWord64" = infix "==";
fun "neq_LCMWord64" = infix "!=";
fun "shl_LCMWord64" = infix "<<";
fun "shr_LCMWord64" = infix ">>";
fun "ror_LCMWord64" = prefix "lcmRorWord64";
fun "rol_LCMWord64" = prefix "lcmRolWord64";
fun "and_bits_LCMWord64" = infix "&";
fun "or_bits_LCMWord64" = infix "|";
fun "xor_bits_LCMWord64" = infix "^";
fun "not_bits_LCMWord64" = prefix "~";

(* convertion function*)
fun "LCMFloat32_to_LCMFloat64" = prefix "(LCMFloat64)" ;
(*fun "LCMFloat32_to_LCMFloat128" = _ ;*)
fun "LCMFloat32_to_LCMInt8" = prefix "(LCMInt8)";
fun "LCMFloat32_to_LCMInt16" = prefix "(LCMInt16)";
fun "LCMFloat32_to_LCMInt32" = prefix "(LCMInt32)";
fun "LCMFloat32_to_LCMInt64" = prefix "(LCMInt64)";
fun "LCMFloat32_to_LCMUint8" = prefix "(LCMUint8)";
fun "LCMFloat32_to_LCMUint16" = prefix "(LCMUint16)";
fun "LCMFloat32_to_LCMUint32" = prefix "(LCMUint32)";
fun "LCMFloat32_to_LCMUint64" = prefix "(LCMUint64)";

fun "LCMFloat64_to_LCMFloat32" = prefix "(LCMFloat32)" ;
(*fun "LCMFloat64_to_LCMFloat128" = _ ;*)
fun "LCMFloat64_to_LCMInt8" = prefix "(LCMInt8)";
fun "LCMFloat64_to_LCMInt16" = prefix "(LCMInt16)";
fun "LCMFloat64_to_LCMInt32" = prefix "(LCMInt32)";
fun "LCMFloat64_to_LCMInt64" = prefix "(LCMInt64)";
fun "LCMFloat64_to_LCMUint8" = prefix "(LCMUint8)";
fun "LCMFloat64_to_LCMUint16" = prefix "(LCMUint16)";
fun "LCMFloat64_to_LCMUint32" = prefix "(LCMUint32)";
fun "LCMFloat64_to_LCMUint64" = prefix "(LCMUint64)";
(*
fun "LCMFloat128_to_LCMFloat32" = prefix "(LCMFloat32)" ;
fun "LCMFloat128_to_LCMFloat64" = prefix "(LCMFloat64)" ;
fun "LCMFloat128_to_LCMInt8" = prefix "(LCMInt8)";
fun "LCMFloat128_to_LCMInt16" = prefix "(LCMInt16)";
fun "LCMFloat128_to_LCMInt32" = prefix "(LCMInt32)";
fun "LCMFloat128_to_LCMInt64" = prefix "(LCMInt64)";
fun "LCMFloat128_to_LCMUint8" = prefix "(LCMUint8)";
fun "LCMFloat128_to_LCMUint16" = prefix "(LCMUint16)";
fun "LCMFloat128_to_LCMUint32" = prefix "(LCMUint32)";
fun "LCMFloat128_to_LCMUint64" = prefix "(LCMUint64)";
*)

fun "LCMInt8_to_LCMFloat32" = prefix "(LCMFloat32)" ;
fun "LCMInt8_to_LCMFloat64" = prefix "(LCMFloat64)" ;
(*fun "LCMInt8_to_LCMFloat128" = _ ;*)
fun "LCMInt8_to_LCMInt16" = prefix "(LCMInt16)";
fun "LCMInt8_to_LCMInt32" = prefix "(LCMInt32)";
fun "LCMInt8_to_LCMInt64" = prefix "(LCMInt64)";
fun "LCMInt8_to_LCMUint8" = prefix "(LCMUint8)";
fun "LCMInt8_to_LCMUint16" = prefix "(LCMUint16)";
fun "LCMInt8_to_LCMUint32" = prefix "(LCMUint32)";
fun "LCMInt8_to_LCMUint64" = prefix "(LCMUint64)";

fun "LCMInt16_to_LCMFloat32" = prefix "(LCMFloat32)" ;
fun "LCMInt16_to_LCMFloat64" = prefix "(LCMFloat64)" ;
(*fun "LCMInt16_to_LCMFloat128" = _ ;*)
fun "LCMInt16_to_LCMInt8" = prefix "(LCMInt8)";
fun "LCMInt16_to_LCMInt32" = prefix "(LCMInt32)";
fun "LCMInt16_to_LCMInt64" = prefix "(LCMInt64)";
fun "LCMInt16_to_LCMUint8" = prefix "(LCMUint8)";
fun "LCMInt16_to_LCMUint16" = prefix "(LCMUint16)";
fun "LCMInt16_to_LCMUint32" = prefix "(LCMUint32)";
fun "LCMInt16_to_LCMUint64" = prefix "(LCMUint64)";

fun "LCMInt32_to_LCMFloat32" = prefix "(LCMFloat32)" ;
fun "LCMInt32_to_LCMFloat64" = prefix "(LCMFloat64)" ;
(*fun "LCMInt32_to_LCMFloat128" = _ ;*)
fun "LCMInt32_to_LCMInt8" = prefix "(LCMInt8)";
fun "LCMInt32_to_LCMInt16" = prefix "(LCMInt16)";
fun "LCMInt32_to_LCMInt64" = prefix "(LCMInt64)";
fun "LCMInt32_to_LCMUint8" = prefix "(LCMUint8)";
fun "LCMInt32_to_LCMUint16" = prefix "(LCMUint16)";
fun "LCMInt32_to_LCMUint32" = prefix "(LCMUint32)";
fun "LCMInt32_to_LCMUint64" = prefix "(LCMUint64)";

fun "LCMInt64_to_LCMFloat32" = prefix "(LCMFloat32)" ;
fun "LCMInt64_to_LCMFloat64" = prefix "(LCMFloat64)" ;
(*fun "LCMInt64_to_LCMFloat128" = _ ;*)
fun "LCMInt64_to_LCMInt8" = prefix "(LCMInt8)";
fun "LCMInt64_to_LCMInt16" = prefix "(LCMInt16)";
fun "LCMInt64_to_LCMInt32" = prefix "(LCMInt32)";
fun "LCMInt64_to_LCMUint8" = prefix "(LCMUint8)";
fun "LCMInt64_to_LCMUint16" = prefix "(LCMUint16)";
fun "LCMInt64_to_LCMUint32" = prefix "(LCMUint32)";
fun "LCMInt64_to_LCMUint64" = prefix "(LCMUint64)";


fun "LCMUint8_to_LCMFloat32" = prefix "(LCMFloat32)" ;
fun "LCMUint8_to_LCMFloat64" = prefix "(LCMFloat64)" ;
(*fun "LCMUint8_to_LCMFloat128" = _ ;*)
fun "LCMUint8_to_LCMInt8" = prefix "(LCMInt8)";
fun "LCMUint8_to_LCMInt16" = prefix "(LCMInt16)";
fun "LCMUint8_to_LCMInt32" = prefix "(LCMInt32)";
fun "LCMUint8_to_LCMInt64" = prefix "(LCMInt64)";
fun "LCMUint8_to_LCMUint16" = prefix "(LCMUint16)";
fun "LCMUint8_to_LCMUint32" = prefix "(LCMUint32)";
fun "LCMUint8_to_LCMUint64" = prefix "(LCMUint64)";

fun "LCMUint16_to_LCMFloat32" = prefix "(LCMFloat32)" ;
fun "LCMUint16_to_LCMFloat64" = prefix "(LCMFloat64)" ;
(*fun "LCMUint16_to_LCMFloat128" = _ ;*)
fun "LCMUint16_to_LCMInt8" = prefix "(LCMInt8)";
fun "LCMUint16_to_LCMInt16" = prefix "(LCMInt16)";
fun "LCMUint16_to_LCMInt32" = prefix "(LCMInt32)";
fun "LCMUint16_to_LCMInt64" = prefix "(LCMInt64)";
fun "LCMUint16_to_LCMUint8" = prefix "(LCMUint8)";
fun "LCMUint16_to_LCMUint32" = prefix "(LCMUint32)";
fun "LCMUint16_to_LCMUint64" = prefix "(LCMUint64)";

fun "LCMUint32_to_LCMFloat32" = prefix "(LCMFloat32)" ;
fun "LCMUint32_to_LCMFloat64" = prefix "(LCMFloat64)" ;
(*fun "LCMUint32_to_LCMFloat128" = _ ;*)
fun "LCMUint32_to_LCMInt8" = prefix "(LCMInt8)";
fun "LCMUint32_to_LCMInt16" = prefix "(LCMInt16)";
fun "LCMUint32_to_LCMInt32" = prefix "(LCMInt32)";
fun "LCMUint32_to_LCMInt64" = prefix "(LCMInt64)";
fun "LCMUint32_to_LCMUint8" = prefix "(LCMUint8)";
fun "LCMUint32_to_LCMUint16" = prefix "(LCMUint16)";
fun "LCMUint32_to_LCMUint64" = prefix "(LCMUint64)";

fun "LCMUint64_to_LCMFloat32" = prefix "(LCMFloat32)" ;
fun "LCMUint64_to_LCMFloat64" = prefix "(LCMFloat64)" ;
(*fun "LCMUint64_to_LCMFloat128" = _ ;*)
fun "LCMUint64_to_LCMInt8" = prefix "(LCMInt8)";
fun "LCMUint64_to_LCMInt16" = prefix "(LCMInt16)";
fun "LCMUint64_to_LCMInt32" = prefix "(LCMInt32)";
fun "LCMUint64_to_LCMInt64" = prefix "(LCMInt64)";
fun "LCMUint64_to_LCMUint8" = prefix "(LCMUint8)";
fun "LCMUint64_to_LCMUint16" = prefix "(LCMUint16)";
fun "LCMUint64_to_LCMUint32" = prefix "(LCMUint32)";


fun "LCMWord8_to_LCMWord16" = prefix "(LCMWord16)";
fun "LCMWord8_to_LCMWord32" = prefix "(LCMWord32)";
fun "LCMWord8_to_LCMWord64" = prefix "(LCMWord64)";

fun "LCMWord16_to_LCMWord8" = prefix "(LCMWord8)";
fun "LCMWord16_to_LCMWord32" = prefix "(LCMWord32)";
fun "LCMWord16_to_LCMWord64" = prefix "(LCMWord64)";

fun "LCMWord32_to_LCMWord8" = prefix "(LCMWord8)";
fun "LCMWord32_to_LCMWord16" = prefix "(LCMWord16)";
fun "LCMWord32_to_LCMWord64" = prefix "(LCMWord64)";

fun "LCMWord64_to_LCMWord8" = prefix "(LCMWord8)";
fun "LCMWord64_to_LCMWord16" = prefix "(LCMWord16)";
fun "LCMWord64_to_LCMWord32" = prefix "(LCMWord32)";


fun "LCMUint8_to_LCMWord8" = prefix "(LCMWord8)";
fun "LCMUint16_to_LCMWord16" = prefix "(LCMWord16)";
fun "LCMUint32_to_LCMWord32" = prefix "(LCMWord32)";
fun "LCMUint64_to_LCMWord64" = prefix "(LCMWord64)";

fun "LCMWord8_to_LCMUint8" = prefix "(LCMUint8)";
fun "LCMWord16_to_LCMUint16" = prefix "(LCMUint16)";
fun "LCMWord32_to_LCMUint32" = prefix "(LCMUint32)";
fun "LCMWord64_to_LCMUint64" = prefix "(LCMUint64)";

