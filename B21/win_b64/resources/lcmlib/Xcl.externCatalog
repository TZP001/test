 


type "LCMBool" 		= "BOOL";

type "LCMWord8" 	= "BYTE";
type "LCMWord16" 	= "WORD";
type "LCMWord32" 	= "DWORD";
type "LCMWord64" 	= "LWORD";

type "LCMUint8"		= "USINT";
type "LCMUint16"	= "UINT";
type "LCMUint32"	= "UDINT";
type "LCMUint64"	= "ULINT";

type "LCMInt8"		= "SINT";
type "LCMInt16"		= "INT";
type "LCMInt32"		= "DINT";
type "LCMInt64"		= "LINT";

type "LCMFloat32"	= "REAL";
type "LCMFloat64"	= "LREAL";

type "LCMString8"	= "STRING";
type "LCMChar8" 	= _;

(* LCMBoolean function*)
fun "eq_LCMBool" = infix "=";
fun "neq_LCMBool" = infix "&lt;&gt;";
fun "not" = prefix "NOT";
fun "and" = infix "OR";
fun "or" = infix "AND";

(* LCMFloat32 function *)
fun "plus_LCMFloat32" = infix "+";
fun "minus_LCMFloat32" = infix "-";
fun "times_LCMFloat32" = infix "*";
fun "div_LCMFloat32" = infix "/";
fun "pow_LCMFloat32" = infix "**";
fun "eq_LCMFloat32" = infix "=";
fun "neq_LCMFloat32" = infix "&lt;&gt;";
fun "less_LCMFloat32" = infix "&lt;";
fun "greater_LCMFloat32" = infix "&gt;";
fun "lessequal_LCMFloat32" = infix "&lt;=";
fun "greaterequal_LCMFloat32" = infix "&gt;=";
fun "sin_LCMFloat32" = prefix "SIN";
fun "cos_LCMFloat32" = prefix "COS";
fun "sqrt_LCMFloat32"  = prefix "SQRT";
fun "exp_LCMFloat32"  = prefix "EXP";
fun "log_LCMFloat32"  = prefix "LN";
fun "log10_LCMFloat32"  = prefix "LOG";
fun "tan_LCMFloat32"  = prefix "TAN";
fun "acos_LCMFloat32"  = prefix "ACOS";
fun "asin_LCMFloat32"  = prefix "ASIN";
fun "atan_LCMFloat32"  = prefix "ATAN";
fun "atan2_LCMFloat32"  = _;
fun "cosh_LCMFloat32"  = _;
fun "sinh_LCMFloat32"  = _;
fun "tanh_LCMFloat32"  = _;


(* LCMFloat64 function *)
fun "plus_LCMFloat64" = infix "+";
fun "minus_LCMFloat64" = infix "-";
fun "times_LCMFloat64" = infix "*";
fun "div_LCMFloat64" = infix "/";
fun "pow_LCMFloat64" = infix "**";
fun "eq_LCMFloat64" = infix "=";
fun "neq_LCMFloat64" = infix "&lt;&gt;";
fun "less_LCMFloat64" = infix "&lt;";
fun "greater_LCMFloat64" = infix "&gt;";
fun "lessequal_LCMFloat64" = infix "&lt;=";
fun "greaterequal_LCMFloat64" = infix "&gt;=";
fun "sin_LCMFloat64" = prefix "SIN";
fun "cos_LCMFloat64" = prefix "COS";
fun "sqrt_LCMFloat64"  = prefix "SQRT";
fun "exp_LCMFloat64"  = prefix "EXP";
fun "log_LCMFloat64"  = prefix "LN";
fun "log10_LCMFloat64"  = prefix "LOG";
fun "tan_LCMFloat64"  = prefix "TAN";
fun "acos_LCMFloat64"  = prefix "ACOS";
fun "asin_LCMFloat64"  = prefix "ASIN";
fun "atan_LCMFloat64"  = prefix "ATAN";
fun "atan2_LCMFloat64"  = _;
fun "cosh_LCMFloat64"  = _;
fun "sinh_LCMFloat64"  = _;
fun "tanh_LCMFloat64"  = _;
(*
(* LCMFloat128 function *)
fun "plus_LCMFloat128" = _;
fun "minus_LCMFloat128" = _;
fun "times_LCMFloat128" = _;
fun "div_LCMFloat128" = _;
fun "pow_LCMFloat128" = _;
fun "eq_LCMFloat128" = _;
fun "neq_LCMFloat128" = _;
fun "less_LCMFloat128" = _;
fun "greater_LCMFloat128" = _;
fun "lessequal_LCMFloat128" = _;
fun "greaterequal_LCMFloat128" = _;
fun "sin_LCMFloat128" = _;
fun "cos_LCMFloat128" = _;
fun "sqrt_LCMFloat128"  = _;
fun "exp_LCMFloat128"  = _;
fun "log_LCMFloat128"  = _;
fun "log10_LCMFloat128"  = _;
fun "tan_LCMFloat128"  = _;
fun "acos_LCMFloat128"  = _;
fun "asin_LCMFloat128"  = _;
fun "atan_LCMFloat128"  = _;
fun "atan2_LCMFloat128"  = _;
fun "cosh_LCMFloat128"  = _;
fun "sinh_LCMFloat128"  = _;
fun "tanh_LCMFloat128"  = _;
*)
(* LCMInt8 functions*)
fun "plus_LCMInt8" = infix "+";
fun "minus_LCMInt8" = infix "-";
fun "times_LCMInt8" = infix "*";
fun "div_LCMInt8" = infix "/";
fun "pow_LCMInt8" = infix "**";
fun "eq_LCMInt8" = infix "=";
fun "neq_LCMInt8" = infix "&lt;&gt;";
fun "less_LCMInt8" = infix "&lt;";
fun "greater_LCMInt8" = infix "&gt;";
fun "lessequal_LCMInt8" = infix "&lt;=";
fun "greaterequal_LCMInt8" = infix "&gt;=";
fun "mod_LCMInt8" = infix "MOD";
fun "land_LCMInt8" = _ ;
fun "lor_LCMInt8" = _ ;
fun "lnot_LCMInt8" = _ ;
fun "shiftleft_LCMInt8" = _ ;
fun "shiftright_LCMInt8" = _ ;
fun "lxor_LCMInt8" = _ ;

(* LCMInt16 functions*)
fun "plus_LCMInt16" = infix "+";
fun "minus_LCMInt16" = infix "-";
fun "times_LCMInt16" = infix "*";
fun "div_LCMInt16" = infix "/";
fun "pow_LCMInt16" = infix "**";
fun "eq_LCMInt16" = infix "=";
fun "neq_LCMInt16" = infix "&lt;&gt;";
fun "less_LCMInt16" = infix "&lt;";
fun "greater_LCMInt16" = infix "&gt;";
fun "lessequal_LCMInt16" = infix "&lt;=";
fun "greaterequal_LCMInt16" = infix "&gt;=";
fun "mod_LCMInt16" = infix "MOD";
fun "land_LCMInt16" = _ ;
fun "lor_LCMInt16" = _ ;
fun "lnot_LCMInt16" = _ ;
fun "shiftleft_LCMInt16" = _ ;
fun "shiftright_LCMInt16" = _ ;
fun "lxor_LCMInt16" = _ ;

(* LCMInt32 functions*)
fun "plus_LCMInt32" = infix "+";
fun "minus_LCMInt32" = infix "-";
fun "times_LCMInt32" = infix "*";
fun "div_LCMInt32" = infix "/";
fun "pow_LCMInt32" = infix "**";
fun "eq_LCMInt32" = infix "=";
fun "neq_LCMInt32" = infix "&lt;&gt;";
fun "less_LCMInt32" = infix "&lt;";
fun "greater_LCMInt32" = infix "&gt;";
fun "lessequal_LCMInt32" = infix "&lt;=";
fun "greaterequal_LCMInt32" = infix "&gt;=";
fun "mod_LCMInt32" = infix "MOD";
fun "land_LCMInt32" = _ ;
fun "lor_LCMInt32" = _ ;
fun "lnot_LCMInt32" = _ ;
fun "shiftleft_LCMInt32" = _ ;
fun "shiftright_LCMInt32" = _ ;
fun "lxor_LCMInt32" = _ ;

(* LCMInt64 functions*)
fun "plus_LCMInt64" = infix "+";
fun "minus_LCMInt64" = infix "-";
fun "times_LCMInt64" = infix "*";
fun "div_LCMInt64" = infix "/";
fun "pow_LCMInt64" = infix "**";
fun "eq_LCMInt64" = infix "=";
fun "neq_LCMInt64" = infix "&lt;&gt;";
fun "less_LCMInt64" = infix "&lt;";
fun "greater_LCMInt64" = infix "&gt;";
fun "lessequal_LCMInt64" = infix "&lt;=";
fun "greaterequal_LCMInt64" = infix "&gt;=";
fun "mod_LCMInt64" = infix "MOD";
fun "land_LCMInt64" = _ ;
fun "lor_LCMInt64" = _ ;
fun "lnot_LCMInt64" = _ ;
fun "shiftleft_LCMInt64" = _ ;
fun "shiftright_LCMInt64" = _ ;
fun "lxor_LCMInt64" = _ ;


(* LCMUint8 functions*)
fun "plus_LCMUint8" = infix "+";
fun "minus_LCMUint8" = infix "-";
fun "times_LCMUint8" = infix "*";
fun "div_LCMUint8" = infix "/";
fun "pow_LCMUint8" = infix "**";
fun "eq_LCMUint8" = infix "=";
fun "neq_LCMUint8" = infix "&lt;&gt;";
fun "less_LCMUint8" = infix "&lt;";
fun "greater_LCMUint8" = infix "&gt;";
fun "lessequal_LCMUint8" = infix "&lt;=";
fun "greaterequal_LCMUint8" = infix "&gt;=";
fun "mod_LCMUint8" = infix "MOD";
fun "land_LCMUint8" = _ ;
fun "lor_LCMUint8" = _ ;
fun "lnot_LCMUint8" = _ ;
fun "shiftleft_LCMUint8" = _ ;
fun "shiftright_LCMUint8" = _ ;
fun "lxor_LCMUint8" = _ ;

(* LCMUint16 functions*)
fun "plus_LCMUint16" = infix "+";
fun "minus_LCMUint16" = infix "-";
fun "times_LCMUint16" = infix "*";
fun "div_LCMUint16" = infix "/";
fun "pow_LCMUint16" = infix "**";
fun "eq_LCMUint16" = infix "=";
fun "neq_LCMUint16" = infix "&lt;&gt;";
fun "less_LCMUint16" = infix "&lt;";
fun "greater_LCMUint16" = infix "&gt;";
fun "lessequal_LCMUint16" = infix "&lt;=";
fun "greaterequal_LCMUint16" = infix "&gt;=";
fun "mod_LCMUint16" = infix "MOD";
fun "land_LCMUint16" = _ ;
fun "lor_LCMUint16" = _ ;
fun "lnot_LCMUint16" = _ ;
fun "shiftleft_LCMUint16" = _ ;
fun "shiftright_LCMUint16" = _ ;
fun "lxor_LCMUint16" = _ ;

(* LCMUint32 functions*)
fun "plus_LCMUint32" = infix "+";
fun "minus_LCMUint32" = infix "-";
fun "times_LCMUint32" = infix "*";
fun "div_LCMUint32" = infix "/";
fun "pow_LCMUint32" = infix "**";
fun "eq_LCMUint32" = infix "=";
fun "neq_LCMUint32" = infix "&lt;&gt;";
fun "less_LCMUint32" = infix "&lt;";
fun "greater_LCMUint32" = infix "&gt;";
fun "lessequal_LCMUint32" = infix "&lt;=";
fun "greaterequal_LCMUint32" = infix "&gt;=";
fun "mod_LCMUint32" = infix "MOD";
fun "land_LCMUint32" = _ ;
fun "lor_LCMUint32" = _ ;
fun "lnot_LCMUint32" = _ ;
fun "shiftleft_LCMUint32" = _ ;
fun "shiftright_LCMUint32" = _ ;
fun "lxor_LCMUint32" = _ ;

(* LCMUint64 functions*)
fun "plus_LCMUint64" = infix "+";
fun "minus_LCMUint64" = infix "-";
fun "times_LCMUint64" = infix "*";
fun "div_LCMUint64" = infix "/";
fun "pow_LCMUint64" = infix "**";
fun "eq_LCMUint64" = infix "=";
fun "neq_LCMUint64" = infix "&lt;&gt;";
fun "less_LCMUint64" = infix "&lt;";
fun "greater_LCMUint64" = infix "&gt;";
fun "lessequal_LCMUint64" = infix "&lt;=";
fun "greaterequal_LCMUint64" = infix "&gt;=";
fun "mod_LCMUint64" = infix "MOD";
fun "land_LCMUint64" = _ ;
fun "lor_LCMUint64" = _ ;
fun "lnot_LCMUint64" = _ ;
fun "shiftleft_LCMUint64" = _ ;
fun "shiftright_LCMUint64" = _ ;
fun "lxor_LCMUint64" = _ ;

(* LCMString8 functions*)  
fun "eq_LCMString8" = infix "=";
fun "neq_LCMString8" = infix "&lt;&gt;";
fun "less_LCMString8" = infix "&lt;";
fun "greater_LCMString8" = infix "&gt;";
fun "lessequal_LCMString8" = infix "&lt;=";
fun "greaterequal_LCMString8" = infix "&gt;=";
fun "concat_LCMString8" = prefix "CONCAT";

(* LCMChar8 functions*)  
fun "eq_LCMChar8" = _;
fun "neq_LCMChar8" = _;
fun "less_LCMChar8" = _;
fun "greater_LCMChar8" = _;
fun "lessequal_LCMChar8" = _;
fun "greaterequal_LCMChar8" = _;
  
(* type LCMWord8*)
fun "eq_LCMWord8" = infix "=";
fun "neq_LCMWord8" = infix "&lt;&gt;";
fun "shl_LCMWord8" = prefix "SHL";
fun "shr_LCMWord8" = prefix "SHR";
fun "ror_LCMWord8" = prefix "ROR";
fun "rol_LCMWord8" = prefix "ROL";
fun "and_bits_LCMWord8" = infix "AND";
fun "or_bits_LCMWord8" = infix "OR";
fun "xor_bits_LCMWord8" = infix "XOR";
fun "not_bits_LCMWord8" = prefix "NOT";

(* type LCMWord16*)
fun "eq_LCMWord16" = infix "=";
fun "neq_LCMWord16" = infix "&lt;&gt;";
fun "shl_LCMWord16" = prefix "SHL";
fun "shr_LCMWord16" = prefix "SHR";
fun "ror_LCMWord16" = prefix "ROR";
fun "rol_LCMWord16" = prefix "ROL";
fun "and_bits_LCMWord16" = infix "AND";
fun "or_bits_LCMWord16" = infix "OR";
fun "xor_bits_LCMWord16" = infix "XOR";
fun "not_bits_LCMWord16" = prefix "NOT";

(* type LCMWord32*)
fun "eq_LCMWord32" = infix "=";
fun "neq_LCMWord32" = infix "&lt;&gt;";
fun "shl_LCMWord32" = prefix "SHL";
fun "shr_LCMWord32" = prefix "SHR";
fun "ror_LCMWord32" = prefix "ROR";
fun "rol_LCMWord32" = prefix "ROL";
fun "and_bits_LCMWord32" = infix "AND";
fun "or_bits_LCMWord32" = infix "OR";
fun "xor_bits_LCMWord32" = infix "XOR";
fun "not_bits_LCMWord32" = prefix "NOT";

(* type LCMWord64*)
fun "eq_LCMWord64" = infix "=";
fun "neq_LCMWord64" = infix "&lt;&gt;";
fun "shl_LCMWord64" = prefix "SHL";
fun "shr_LCMWord64" = prefix "SHR";
fun "ror_LCMWord64" = prefix "ROR";
fun "rol_LCMWord64" = prefix "ROL";
fun "and_bits_LCMWord64" = infix "AND";
fun "or_bits_LCMWord64" = infix "OR";
fun "xor_bits_LCMWord64" = infix "XOR";
fun "not_bits_LCMWord64" = prefix "NOT";


(* convertion function*)

fun "LCMFloat32_to_LCMFloat64" = implicit;
(*fun "LCMFloat32_to_LCMFloat128" = implicit ;*)
fun "LCMFloat32_to_LCMInt8" = prefix "REAL_TO_SINT";
fun "LCMFloat32_to_LCMInt16" = prefix "REAL_TO_INT";
fun "LCMFloat32_to_LCMInt32" = prefix "REAL_TO_DINT";
fun "LCMFloat32_to_LCMInt64" = prefix "REAL_TO_LINT";
fun "LCMFloat32_to_LCMUint8" = prefix "REAL_TO_USINT";
fun "LCMFloat32_to_LCMUint16" = prefix "REAL_TO_UINT";
fun "LCMFloat32_to_LCMUint32" = prefix "REAL_TO_UDINT";
fun "LCMFloat32_to_LCMUint64" = prefix "REAL_TO_ULINT";

fun "LCMFloat64_to_LCMFloat32" = implicit;
(*fun "LCMFloat64_to_LCMFloat128" = implicit;*)
fun "LCMFloat64_to_LCMInt8" = prefix "LREAL_TO_SINT";
fun "LCMFloat64_to_LCMInt16" = prefix "LREAL_TO_INT";
fun "LCMFloat64_to_LCMInt32" = prefix "LREAL_TO_DINT";
fun "LCMFloat64_to_LCMInt64" = prefix "LREAL_TO_LINT";
fun "LCMFloat64_to_LCMUint8" = prefix "LREAL_TO_USINT";
fun "LCMFloat64_to_LCMUint16" = prefix "LREAL_TO_UINT";
fun "LCMFloat64_to_LCMUint32" = prefix "LREAL_TO_UDINT";
fun "LCMFloat64_to_LCMUint64" = prefix "LREAL_TO_ULINT";

fun "LCMInt8_to_LCMFloat32" = prefix "SINT_TO_REAL";
fun "LCMInt8_to_LCMFloat64" = prefix "SINT_TO_LREAL";
(*fun "LCMInt8_to_LCMFloat128" = _ ;*)
fun "LCMInt8_to_LCMInt16" = prefix "SINT_TO_INT";
fun "LCMInt8_to_LCMInt32" = prefix "SINT_TO_DINT";
fun "LCMInt8_to_LCMInt64" = prefix "SINT_TO_LINT";
fun "LCMInt8_to_LCMUint8" = prefix "SINT_TO_USINT";
fun "LCMInt8_to_LCMUint16" = prefix "SINT_TO_UINT";
fun "LCMInt8_to_LCMUint32" = prefix "SINT_TO_UDINT";
fun "LCMInt8_to_LCMUint64" = prefix "SINT_TO_ULINT";

fun "LCMInt16_to_LCMFloat32" = prefix "INT_TO_REAL";
fun "LCMInt16_to_LCMFloat64" = prefix "INT_TO_LREAL";
(*fun "LCMInt16_to_LCMFloat128" = _ ;*)
fun "LCMInt16_to_LCMInt8" = prefix "INT_TO_SINT";
fun "LCMInt16_to_LCMInt32" = prefix "INT_TO_DINT";
fun "LCMInt16_to_LCMInt64" = prefix "INT_TO_LINT";
fun "LCMInt16_to_LCMUint8" = prefix "INT_TO_USINT";
fun "LCMInt16_to_LCMUint16" = prefix "INT_TO_UINT";
fun "LCMInt16_to_LCMUint32" = prefix "INT_TO_UDINT";
fun "LCMInt16_to_LCMUint64" = prefix "INT_TO_ULINT";

fun "LCMInt32_to_LCMFloat32" = prefix "DINT_TO_REAL";
fun "LCMInt32_to_LCMFloat64" = prefix "DINT_TO_LREAL";
(*fun "LCMInt32_to_LCMFloat128" = _ ;*)
fun "LCMInt32_to_LCMInt8" = prefix "DINT_TO_SINT";
fun "LCMInt32_to_LCMInt16" = prefix "DINT_TO_INT";
fun "LCMInt32_to_LCMInt64" = prefix "DINT_TO_LINT";
fun "LCMInt32_to_LCMUint8" = prefix "DINT_TO_USINT";
fun "LCMInt32_to_LCMUint16" = prefix "DINT_TO_UINT";
fun "LCMInt32_to_LCMUint32" = prefix "DINT_TO_UDINT";
fun "LCMInt32_to_LCMUint64" = prefix "DINT_TO_ULINT";

fun "LCMInt64_to_LCMFloat32" = prefix "LINT_TO_REAL";
fun "LCMInt64_to_LCMFloat64" = prefix "LINT_TO_LREAL";
(*fun "LCMInt64_to_LCMFloat128" = _ ;*)
fun "LCMInt64_to_LCMInt8" = prefix "LINT_TO_SINT";
fun "LCMInt64_to_LCMInt16" = prefix "LINT_TO_INT";
fun "LCMInt64_to_LCMInt32" = prefix "LINT_TO_DINT";
fun "LCMInt64_to_LCMUint8" = prefix "LINT_TO_USINT";
fun "LCMInt64_to_LCMUint16" = prefix "LINT_TO_UINT";
fun "LCMInt64_to_LCMUint32" = prefix "LINT_TO_UDINT";
fun "LCMInt64_to_LCMUint64" = prefix "LINT_TO_ULINT";

fun "LCMUint8_to_LCMFloat32" = prefix "USINT_TO_REAL";
fun "LCMUint8_to_LCMFloat64" = prefix "USINT_TO_LREAL";
(*fun "LCMUint8_to_LCMFloat128" = _ ;*)
fun "LCMUint8_to_LCMInt8" = prefix "USINT_TO_SINT";
fun "LCMUint8_to_LCMInt16" = prefix "USINT_TO_INT";
fun "LCMUint8_to_LCMInt32" = prefix "USINT_TO_DINT";
fun "LCMUint8_to_LCMInt64" = prefix "USINT_TO_LINT";
fun "LCMUint8_to_LCMUint16" = prefix "USINT_TO_UINT";
fun "LCMUint8_to_LCMUint32" = prefix "USINT_TO_UDINT";
fun "LCMUint8_to_LCMUint64" = prefix "USINT_TO_ULINT";

fun "LCMUint16_to_LCMFloat32" = prefix "UINT_TO_REAL";
fun "LCMUint16_to_LCMFloat64" = prefix "UINT_TO_LREAL";
(*fun "LCMUint16_to_LCMFloat128" = _ ;*)
fun "LCMUint16_to_LCMInt8" = prefix "UINT_TO_SINT";
fun "LCMUint16_to_LCMInt16" = prefix "UINT_TO_INT";
fun "LCMUint16_to_LCMInt32" = prefix "UINT_TO_DINT";
fun "LCMUint16_to_LCMInt64" = prefix "UINT_TO_LINT";
fun "LCMUint16_to_LCMUint8" = prefix "UINT_TO_USINT";
fun "LCMUint16_to_LCMUint32" = prefix "UINT_TO_UDINT";
fun "LCMUint16_to_LCMUint64" = prefix "UINT_TO_ULINT";

fun "LCMUint32_to_LCMFloat32" = prefix "UDINT_TO_REAL";
fun "LCMUint32_to_LCMFloat64" = prefix "UDINT_TO_LREAL";
(*fun "LCMUint32_to_LCMFloat128" = _ ;*)
fun "LCMUint32_to_LCMInt8" = prefix "UDINT_TO_SINT";
fun "LCMUint32_to_LCMInt16" = prefix "UDINT_TO_INT";
fun "LCMUint32_to_LCMInt32" = prefix "UDINT_TO_DINT";
fun "LCMUint32_to_LCMInt64" = prefix "UDINT_TO_LINT";
fun "LCMUint32_to_LCMUint8" = prefix "UDINT_TO_USINT";
fun "LCMUint32_to_LCMUint16" = prefix "UDINT_TO_UINT";
fun "LCMUint32_to_LCMUint64" = prefix "UDINT_TO_ULINT";

fun "LCMUint64_to_LCMFloat32" = prefix "ULINT_TO_REAL";
fun "LCMUint64_to_LCMFloat64" = prefix "ULINT_TO_LREAL";
(*fun "LCMUint64_to_LCMFloat128" = _ ;*)
fun "LCMUint64_to_LCMInt8" = prefix "ULINT_TO_SINT";
fun "LCMUint64_to_LCMInt16" = prefix "ULINT_TO_INT";
fun "LCMUint64_to_LCMInt32" = prefix "ULINT_TO_DINT";
fun "LCMUint64_to_LCMInt64" = prefix "ULINT_TO_LINT";
fun "LCMUint64_to_LCMUint8" = prefix "ULINT_TO_UINT";
fun "LCMUint64_to_LCMUint16" = prefix "ULINT_TO_UINT";
fun "LCMUint64_to_LCMUint32" = prefix "ULINT_TO_UDINT";

fun "LCMWord8_to_LCMWord16" = prefix "BYTE_TO_WORD";
fun "LCMWord8_to_LCMWord32" = prefix "BYTE_TO_DWORD";
fun "LCMWord8_to_LCMWord64" = prefix "BYTE_TO_LWORD";

fun "LCMWord16_to_LCMWord8" = prefix "WORD_TO_BYTE";
fun "LCMWord16_to_LCMWord32" = prefix "WORD_TO_DWORD";
fun "LCMWord16_to_LCMWord64" = prefix "WORD_TO_LWORD";

fun "LCMWord32_to_LCMWord8" = prefix "DWORD_TO_BYTE";
fun "LCMWord32_to_LCMWord16" = prefix "DWORD_TO_WORD";
fun "LCMWord32_to_LCMWord64" = prefix "DWORD_TO_LWORD";

fun "LCMWord64_to_LCMWord8" = prefix "LWORD_TO_BYTE";
fun "LCMWord64_to_LCMWord16" = prefix "LWORD_TO_WORD";
fun "LCMWord64_to_LCMWord32" = prefix "LWORD_TO_DWORD";


fun "LCMUint8_to_LCMWord8" = prefix "USINT_TO_BYTE";
fun "LCMUint16_to_LCMWord16" = prefix "UINT_TO_WORD";
fun "LCMUint32_to_LCMWord32" = prefix "UDINT_TO_DWORD";
fun "LCMUint64_to_LCMWord64" = prefix "ULINT_TO_LWORD";

fun "LCMWord8_to_LCMUint8" = prefix "BYTE_TO_USINT";
fun "LCMWord16_to_LCMUint16" = prefix "WORD_TO_UINT";
fun "LCMWord32_to_LCMUint32" = prefix "DWORD_TO_UDINT";
fun "LCMWord64_to_LCMUint64" = prefix "LWORD_TO_ULINT";

