
=====================================================================
   Simulation of LCM applications including external C definitions
=====================================================================

===================
Product: LCM Studio 
Version: R15
===================


Description: 

In order to simulate or debug LCM programs that include external C 
definitions (types, functions, constants), the LCM interpreter needs 
to link dynamically with libraries that provides these definitions.
This file describes the process of building such a library. 


Interpreter overview:

The LCM simulator/debugger interprets the LCM bytecode generated by 
the LCM compiler. This bytecode does not manage any LCM data, that is, 
even basic LCM types or basic operators must be provided as external C 
definitions. 
External definitions of LCM basic types and operators are defined in
src/predefined.c and include/predefined.h files. These functions are
registrated with the LCM interpreter via special stubs defined in
src/predefined_stub.c and include/predefined_stub.h files.
This files are compiled and linked inside the same dynamic library
called AUTLciVMExterns.dll, and definitions are loaded by the LCM
interpreter by calling the function void install_lcm_library(...).


Adding external functions:

Other C types and functions can be added to this library and loaded 
by the LCM interpreter. All C definitions must be declared inside a 
C header file, and implementation must be provided either by a C file, 
or at least by an object file. 
Stubs for these definitions can be automatically generated by the LCM
compiler using the -genstub option. Assuming that all LCM external
definitions are defined inside a LCM module 'RootModule@EXT', one can
generate stubs for these definitions by calling the LCM compiler with 
the following option: -genstub RootModule@EXT. 
This will produce two files EXT_stub.h and EXT_stub.c.


Building the library:

Move new C files and generated C stub files into the src directory.
Move new C header files and generated C header stub files into the 
include directory. Add a call to the generated install_EXT function 
inside the function install_lcm_library (file install_value.c).
Include the new C header inside the generated C stub file.
Compile all source files and link them inside a single library 
called AUTLciVMExterns.dll. Replace the existing AUTLciVMExterns.dll
by the new one. Restart LCM studio.

See Makefile.model for an example using the Visual C++ compiler.


Building several libraries:

The LCM interpreter can call several libraries that register different 
types and functions. Each library must be generated from a customized
install_value.c file, i.e. function install_lcm_library must call the
required install functions.
For instance, assume that one want to separate predefined types and 
mathematical functions. First step is to duplicate the hierarchy of 
directories that contains this README file. Second step is to remove 
the call to install_lcm_predefined in one install_value.c file, and  
the call to install_lcm_extern in the other. Third and last step is 
to build a dll from all duplicated directories.

