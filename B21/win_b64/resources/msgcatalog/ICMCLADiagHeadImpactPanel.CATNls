DialogBoxTitle = "Head-Impact Analysis";

Label_Elements.Title = "Elements: ";
Label_Elements.LongHelp = 
"Selection of the surface geometry to be analysed.
A context menu is available. A selection window is
available.";
Label_Elements.ShortHelp = "Definition of Elements";

Frame_Tessallation.Title = "Tessellation";
Frame_Tessallation.LongHelp = 
"The analysis is based on triangulated data.
That means that surfaces are converted into
a facet model before they are checked.";
CheckButton_Length.Title = "Facet length: ";
CheckButton_Length.LongHelp = 
"Define the maximum length of the facets, 
regardless of the surface curvature.";
CheckButton_Length.ShortHelp = "Maximum facet length";
Label_Tolerance.Title = "Tolerance: ";
Label_Tolerance.LongHelp = 
"Define the maximum deviation of the facet model 
from the surface for a curvature dependent tessellation.";
Label_Tolerance.ShortHelp = "Maximum deviation from the surface";

Frame_Options.Title = "Options";
Frame_Options.LongHelp = 
"Following options are available:
Topology, Sharp Bend, Edge, Radius, Curvature Radius.";
Frame_Display.Title = "Display";
Frame_Display.LongHelp = 
"Display mode for the analysis result:
- display of facet edges
- shaded display";
RadioButton_Edge.Title = "Edge";
RadioButton_Edge.LongHelp = 
"Display of facet edges";
RadioButton_Shading.Title = "Shading";
RadioButton_Shading.LongHelp = 
"Shaded mode is only available when display
mode shading with materials is active.";
Frame_Topology.Title = "Topology";
Frame_Topology.LongHelp = 
"Determination of the elements to be detected:
- Sharp Bend
- Edge";
CheckButton_SharpBend.Title = "Sharp Bend";
CheckButton_SharpBend.LongHelp = 
"Detection of sharp bends.";
CheckButton_SharpBend.ShortHelp = "Display sharp bends";
CheckButton_Edge.Title = "Edge";
CheckButton_Edge.LongHelp = 
"Detection of facet edges.";
CheckButton_Edge.ShortHelp = "Display edges";
Label_Radius.Title = "Radius: ";
Label_Radius.LongHelp = 
"Determination of the radius of the sphere.
A standard head has an assumed radius of 80 
resp.85mm.";
Label_Radius.ShortHelp = "Definition of the Radius";
Label_CurvatureRadius.Title = "Curvature Radius: ";
Label_CurvatureRadius.LongHelp = 
"All geometry regions with curvatures being lower
than this radius will be marked as critical in red.";
Label_CurvatureRadius.ShortHelp = "Definition of the Curvature Radius";

Frame_Parameters.Title = "Parameters";
Frame_Parameters.LongHelp = 
"Determination of parameters:
- separate 
- individual";
CheckButton_Separate.Title = "Separate: ";
CheckButton_Separate.LongHelp = 
"A second curvature radius can be defined.
A surface can be selected as separating surface.
A context menu is availabe. A selection window is
available.";
CheckButton_Separate.ShortHelp = "Definition of a second curvature radius.";
CheckButton_Individual.Title = "Individual: ";
CheckButton_Individual.LongHelp = 
"Individual curvature radii can be 
defined for the diagnosis at separate 
faces. A context menu is available. A
selection window is available.";
CheckButton_Individual.ShortHelp = "Definition of an individual curvature radii.";

Frame_Orientation.Title = "Normal Orientation";
Frame_Orientation.LongHelp = 
"Display the normal of each shell.";
RadioButton_Automatic.Title = "Automatic";
RadioButton_Automatic.LongHelp = 
"The normals will be aligned automatically
across topology boundaries.";
RadioButton_Manual.Title = "Manual";
RadioButton_Manual.LongHelp = 
"Manual alignment of normals.";
RadioButton_Original.Title = "Original";
RadioButton_Original.LongHelp = 
"The convergence direction is assumed for each
surface in the direction of its natural normal.";
RadioButton_Inverted.Title = "Inverted";
RadioButton_Inverted.LongHelp = 
"The convergence direction is assumed for
each surface contrary to its natural normal.";

CheckButton_ShowNormals.Title = "Show shell normals";
CheckButton_ShowNormals.LongHelp = 
"The normals can be inverted by clicking
the middle handle of the manipulator.";
CheckButton_ShowNormals.ShortHelp = "Display Shell Normals";
PushButton_Reset.Title = "Reset";
PushButton_Reset.LongHelp = 
"The normal inversion can be reset.";
PushButton_Reset.ShortHelp = "Reset";
