Title = "Method Or Function Creation";
frSignature.MethodNameLabel.Title = "Name Of Method Or Function: ";
frSignature.FrameInputOutput.ReturnTypeLabel.Title = "Return Type: ";
frSignature.FrameInputOutput.SignatureLabel.Title = "Argument(s): ";
frSignature.FrameRadioButton.rdFunction.Title = "Function ";
frSignature.FrameRadioButton.rdMethod.Title = "Method ";
frSignature.FrameRadioButton.TypeLabel.Title = "Method Type: ";
frSignature.framecompletesignature.Title = "Signature: ";
frSignature.FrameVariable.Title = "Variables: ";
frSignature.labeldefinition.Title  = "Definition:";
frSignature.InteractiveFunctionNameLabel.Title="Name of Interactive Function: ";
frSignature.FrameRadioButton.Title="Function/Method Selection ";
frSignature.FrameInputOutput.Title="Input/Output Selection ";
frSignature.FullDeclarationLabel.Title="Declaration in the Knowledge Dictionary :";
frSignature.Declarationlabel.Title="Declaration: ";
frSignature.CompleteSignatureEditor.ShortHelp="Declaration in the Knowledge Dictionary";
frSignature.CompleteSignatureEditor.LongHelp="This signature is added in the Knowledge Dictionary";
frSignature.InteractiveFunctionNameEditor.ShortHelp="Name of Function or Method";
frSignature.InteractiveFunctionNameEditor.LongHelp="Name of Function or Method\n This name must be unique in the Knowledge Dictionary";
frSignature.FrameRadioButton.TypeEditor.ShortHelp="Type on which method is called";
frSignature.FrameRadioButton.TypeEditor.LongHelp="If you declare a method the signature is Type->(...)\n and you can use the keyword This in the definition";
frSignature.FrameRadioButton.BrowserType.ShortHelp="Help to define the method type";
frSignature.FrameRadioButton.BrowserType.LongHelp="Open a panel to help to define the method type";
frSignature.FrameInputOutput.SignatureEditor.ShortHelp="Argument(s) of the function or Method";
frSignature.FrameInputOutput.SignatureEditor.LongHelp="Define the argument of the function or method\n Argument name : Argument type,...";
frSignature.FrameInputOutput.AddArgument.ShortHelp="Help to define arguments";
frSignature.FrameInputOutput.AddArgument.LongHelp="Open a panel to help to define arguments";
frSignature.FrameInputOutput.ReturnTypeEditor.ShortHelp="Return type of the function or method";
frSignature.FrameInputOutput.ReturnTypeEditor.LongHelp="Return type of the function or method";
frSignature.FrameInputOutput.BrowserReturnType.ShortHelp="Help to define return type";
frSignature.FrameInputOutput.BrowserReturnType.LongHelp="Open a panel to help to define the return type";
frSignature.FrameVariable.VariablesList.ShortHelp="List of Keywords";
frSignature.FrameVariable.VariablesList.LongHelp="List of keywords usable in the definition \n they are arguments of the function or methods ";
DefinitionEditor.ShortHelp="Body of the Function or Method";
DefinitionEditor.LongHelp="Describe the behavior of the Function or Method in this body \n Use the language Knowledge";

// message d erreur lorsque il y a une erreur de parse en sortie de
// l editeur de function
DefinitionEditor.InteractiveFunctionParseError="Syntax error in the interactive function. \n Please consult the Error Log for further explanation.\n";
DefinitionEditor.ParseErrorExit=" Do you want to exit anyway? ";
DefinitionEditor.ParseErrorTitle=" Parse Error ";

ErrorInteractiveFunctionNameEmpty=" Enter the name of the Interactive Function ";
ErrorInteractiveFunctionNameEmpty.Title=" Error ";

ErrorInteractiveFunctionSignature="Missing character : after argument. ";
ErrorInteractiveFunctionSignature.Title="Syntax Error in arguments editor";
ErrorInteractiveFunctionSignature2="Type /P01 not found. ";
ErrorInteractiveFunctionSignature3="Using ReturnParm key word is forbiden in arguments editor.";
ErrorInteractiveFunctionReturnType.Title="Syntax Error in return type editor";
ErrorInteractiveFunctionType.Title="Syntax Error in method type editor";


