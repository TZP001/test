// ERRORS DURING INITIALIZATION
Data.ErrCATInstallPath = "CATInstallPath ist nicht gesetzt\n";
Data.ErrCATInstallPathNoPresent = "CATInstallPath ist falsch: Die Datei PRESENT wurde im Suchpfad nicht gefunden\n";
Data.ErrPresent        = "/p1 ist beschädigt";
Data.ErrOpenPresent    = "Kann /p1 nicht öffnen\n";
// ERRORS DURING COMMIT
Commit.ErrOpenSPK      ="Fehler COMMIT-Operation - Öffnen nicht möglich von Datei /p1: /p2";
Commit.ErrNoControl    ="Fehler COMMIT-Operation - Datei /p1 nicht gefunden ";
Commit.ErrOpenControl  ="Fehler COMMIT-Operation - Öffnen nicht möglich von Datei /p1: /p2";
// ERRORS DURING ROLLBACK
Rollback.ErrOpenSPK    ="Fehler ROLLBACK-Operation - Öffnen nicht möglich von Datei /p1: /p2";
Rollback.ErrNoControl  ="Fehler ROLLBACK-Operation - Datei /p1 nicht gefunden ";
Rollback.ErrOpenControl ="Fehler ROLLBACK-Operation - Öffnen nicht möglich von Datei /p1: /p2";
Rollback.ErrUpdatePresent="Fehler ROLLBACK-Operation - Aktualisieren nicht möglich von Datei /p1: /p2";
// ERRORS CHECK INTEGRITY
CheckIntegrity.ErrReinstallSPK="Einige installierte Komponenten weisen nicht die richtige Stufe auf.\nErneut installieren: Service-Pack /p1.";
CheckIntegrityCAA2="Ungültige Build-Stufe für CAA2:/p1 - Korrekter Build-Level ist:/p2\n";
NeedInstallCAASPKn="Code Service-Pack Stufe /p1 ist installiert. Nun muss CAA Service-Pack Stufe /p2 installiert werden\n";
NeedCommitRollbackCAASPKn="Vor der Installation von CAA Service-Pack /p1 muss CAA Service-Pack /p2 festgeschrieben oder wiederhergestellt werden\n";
NeedInstallCommitCAASPKn="Code Service-Pack Stufe /p1 ist installiert und festgeschrieben; nun muss CAA Service-Pack Stufe /p2 installiert und festgeschrieben werden\n";
NeedCommitCAASPKn="Code Service-Pack Stufe /p1 ist installiert und festgeschrieben; nun  muss CAA Service-Pack Stufe /p2 festgeschrieben werden\n"; 
NeedRollbackCAASPKn="Es ist kein Code Service-Pack mehr installiert; daher muss CAA Service-Pack Stufe /p1 wiederhergestellt werden\n"; 
Need2RollbackCAASPKn="Am CAA-Service-Pack Stufe /p1 muss eine ROLLBACK-Operation durchgeführt werden\n"; 
CommitInterditCAASPKn="Code Service-Pack Stufe /p1 ist installiert, jedoch nicht festgeschrieben. Deshalb kann CAA Service-Pack Stufe /p2 nicht installiert werden\n";
// ERRORS CHECKPREREQS
CheckPrereqs.PrereqKONT ="Windows NT 4.0 mit Service-Pack 4 oder Windows 2000 erforderlich\n";
CheckPrereqs.PrereqKOWIN ="Windows 95, OEM Service Release 2 oder ein späteres Release von Windows 95 ist erforderlich\n";
CheckPrereqsOS_OK="\nVersion des Betriebssystems prüfen: OK \n";
CheckPrereqsOS_KO="\nVersion des Betriebssystems prüfen: KO \n";
CheckProcessor_OK="Prozessor prüfen: OK \n";
CheckProcessor_KO="Prozessor prüfen: KO \nProzessor =/p1 Erforderlicher Prozessor =/p2\n";
CheckProcessorKO_Registry="Prozessor prüfen: KO (mehrere Registrierungsschlüssel können nicht gelesen werden. Mögliche Ursache: unzureichende Zugriffsrechte)\n";
CheckMemory_OK="Speicher prüfen: OK \n";
CheckMemory_KO="Speicher prüfen: KO \nVerfügbarer Speicher = /p1 Byte Erforderlicher Speicher= /p2 Byte";
CheckNetworkAdapter_OK ="Netzwerkadapter prüfen: OK\n"; 
CheckNetworkAdapter_KO ="Netzwerkadapter prüfen: KO\n";
CheckNetworkAdapter_1="Netzwerk nicht gefunden\n";
CheckNetworkAdapter_2="Zugriff auf Netzwerk nicht möglich\n";
CheckNetworkAdapter_3="Netzwerk nicht angegeben\n";
CheckNetworkAdapter_254= "Netzwerkadapter ist Ethernet\n";
CheckNetworkAdapter_255="Netzwerkadapter ist TokenRing\n";
CheckNetworkAdapter_unknown="Netzwerkadapter ist unbekannt\n";
CheckNetworkAdapter_problem="Netzwerkfehler = /p1\n";
CheckNetworkAdapter_Address="Netzwerkadresse ist /p1\n";
CheckOpenGL_OK ="OpenGL prüfen: OK\n"; 
CheckOpenGL_KO ="OpenGL prüfen: KO\n";
CheckOpenGLVersion = "OpenGL-Version: /p1./p2\n";
CheckOpenGLWrongVersion ="Falsche OpenGL-Version  : /p1./p2\n";
CheckOpenGLRequiredVersion = "Erforderliche OpenGL-Version: /p1./p2\n";
CheckOpenGLNotfound= "Bibliothek OpenGL32.dll wurde nicht gefunden\n";
CheckOpenGLProbleme= "Grafische Umgebung kann nicht initialisiert werden\n";
CheckOpenGLdefault= "OpenGL - Fehlerergebnis = /p1\n";
CheckDLLs_OK="DLLs prüfen: OK \n";
CheckDLLs_KO="DLLs prüfen: KO \n";
CheckDLLs_probleme="DLL /p1 Version=/p2 Erforderlich=/p3";
CheckDLLs_Correct="DLL /p1  Korrekte Version=/p2 \n";
GetLanguages.French="Französisch";
GetLanguages.German="Deutsch";
GetLanguages.Italian="Italienisch";
GetLanguages.Japanese="Japanisch";
GetLanguages.Chinese="Vereinfachtes Chinesisch";
GetLanguages.Korean="Koreanisch";
