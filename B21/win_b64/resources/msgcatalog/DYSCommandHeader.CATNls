//---------------------------------------------------
// Ressource File for DYSCommandHeader Class
// En_US
//
// LGK Revision 	15/10/2002
// LGK Revision     15/01/2003
// NMB Revision     20/03/2003
//---------------------------------------------------

// Point creation by entering coordinates
DYSCommandHeader.2DPointCoord.Title="Point Using Coordinates";
DYSCommandHeader.2DPointCoord.Help="Creates a point by entering cartesian or polar coordinates, and if needed, by selecting a reference point";
DYSCommandHeader.2DPointCoord.ShortHelp="Point by Using Coordinates";
DYSCommandHeader.2DPointCoord.LongHelp="Point\nCreates a point by entering coordinates, \nand if needed, by selecting a reference point.";

// Point creation by selection
DYSCommandHeader.2DPoint.Title="Point";
DYSCommandHeader.2DPoint.Help="Creates a point by clicking";
DYSCommandHeader.2DPoint.ShortHelp="Point by Clicking";
DYSCommandHeader.2DPoint.LongHelp="Point\nCreates a point by clicking.";

// Line creation by selecting two points
DYSCommandHeader.2DLine.Title="Line";
DYSCommandHeader.2DLine.Help="Creates a line by using two points";
DYSCommandHeader.2DLine.ShortHelp="Line";
DYSCommandHeader.2DLine.LongHelp="Line\nCreates a line by selecting \nor clicking two points.";

// AxisLine creation by selecting two points
DYSCommandHeader.2DAxisLine.Title="Axis";
DYSCommandHeader.2DAxisLine.Help="Creates an axis by using two points";
DYSCommandHeader.2DAxisLine.ShortHelp="Axis";
DYSCommandHeader.2DAxisLine.LongHelp="Axis\nCreates an axis by selecting \nor clicking two points.";

// Circle creation by controlling the radius
DYSCommandHeader.2DCircleRadius.Title="Circle";
DYSCommandHeader.2DCircleRadius.Help="Creates a circle by using two points";
DYSCommandHeader.2DCircleRadius.ShortHelp="Circle";
DYSCommandHeader.2DCircleRadius.LongHelp="Circle\nCreates a circle by selecting \nor clicking two points.";

// Creation d'un arc en selectionnant trois points
DYSCommandHeader.2DCircle3Points.Title="Three Point Circle";
DYSCommandHeader.2DCircle3Points.Help="Creates a circle by using three points";
DYSCommandHeader.2DCircle3Points.ShortHelp="Three Point Circle";
DYSCommandHeader.2DCircle3Points.LongHelp="Three Point Circle\nCreates a circle by selecting \nor clicking three points.";

// Circle creation by entering its coordinates
DYSCommandHeader.2DCircleCoord.Title="Circle Using Coordinates";
DYSCommandHeader.2DCircleCoord.Help="Creates a circle by entering the center point coordinates and the radius value";
DYSCommandHeader.2DCircleCoord.ShortHelp="Circle Using Coordinates";
DYSCommandHeader.2DCircleCoord.LongHelp="Circle Using Coordinates\nCreates a circle by entering the center \npoint coordinates and the radius value.";

// Arc creation by controlling the radius
DYSCommandHeader.2DArcRadius.Title="Arc";
DYSCommandHeader.2DArcRadius.Help="Creates an arc";
DYSCommandHeader.2DArcRadius.ShortHelp="Arc";
DYSCommandHeader.2DArcRadius.LongHelp="Arc\nCreates an arc by specifying the radius value.";

// Arc creation by selecting 3 points
DYSCommandHeader.2DArc3Points.Title="Three Point Arc";
DYSCommandHeader.2DArc3Points.Help="Creates an arc through three points";
DYSCommandHeader.2DArc3Points.ShortHelp="Three Point Arc";
DYSCommandHeader.2DArc3Points.LongHelp="Three Point Arc\Creates an arc by selecting \nor clicking three points.";

// Arc creation by selecting 3 points first selecting the limits
DYSCommandHeader.2DArc3Points132.Title="Three Point Arc Starting With Limits";
DYSCommandHeader.2DArc3Points132.Help="Creates an arc through three points starting with the limits";
DYSCommandHeader.2DArc3Points132.ShortHelp="Three Point Arc Starting With Limits";
DYSCommandHeader.2DArc3Points132.LongHelp="Three Point Arc\nCreates an arc by selecting \nor clicking three points\nbut starting by selecting\narc limits.";

// Ellipse creation by selecting the center and controlling the radii
DYSCommandHeader.2DEllipseRadius.Title="Ellipse";
DYSCommandHeader.2DEllipseRadius.Help="Creates an ellipse using three points";
DYSCommandHeader.2DEllipseRadius.ShortHelp="Ellipse";
DYSCommandHeader.2DEllipseRadius.LongHelp="Ellipse\nCreates an ellipse by selecting the center point\nand specifying the radius.";

// Contour creation
DYSCommandHeader.2DContour.Title="Profile";
DYSCommandHeader.2DContour.Help="Creates a profile made of lines and arcs";
DYSCommandHeader.2DContour.ShortHelp="Profile";
DYSCommandHeader.2DContour.LongHelp="Profile\nCreates a profile made of lines and arcs.";

// Rectangle creation
DYSCommandHeader.2DRectangle.Title="Rectangle";
DYSCommandHeader.2DRectangle.Help="Creates a rectangle by using two points";
DYSCommandHeader.2DRectangle.ShortHelp="Rectangle";
DYSCommandHeader.2DRectangle.LongHelp="Rectangle\nCreates a rectangle by clicking \nor selecting two points.";

// Centered rectangle creation
DYSCommandHeader.2DCenteredRectangle.Title="Centered Rectangle";
DYSCommandHeader.2DCenteredRectangle.Help="Creates a centered rectangle";
DYSCommandHeader.2DCenteredRectangle.ShortHelp="Centered Rectangle";
DYSCommandHeader.2DCenteredRectangle.LongHelp="Centered Rectangle\nCreates a centered rectangle by clicking \nor selecting a point.";

// Centered parallelogram creation
DYSCommandHeader.2DCenteredParallelogram.Title="Centered Parallelogram";
DYSCommandHeader.2DCenteredParallelogram.Help="Creates a centered parallelogram";
DYSCommandHeader.2DCenteredParallelogram.ShortHelp="Centered Parallelogram";
DYSCommandHeader.2DCenteredParallelogram.LongHelp="Centered Parallelogram\nCreates a centered parallelogram by clicking \nor selecting two lines.";

// Oriented Rectangle creation
DYSCommandHeader.2DOrientedRectangle.Title="Oriented Rectangle";
DYSCommandHeader.2DOrientedRectangle.Help="Creates an oriented rectangle by using three points";
DYSCommandHeader.2DOrientedRectangle.ShortHelp="Oriented Rectangle";
DYSCommandHeader.2DOrientedRectangle.LongHelp="Oriented Rectangle\nCreates an oriented rectangle \nby selecting or clicking three points.";

// Parallelogram creation
DYSCommandHeader.2DParallelogram.Title="Parallelogram";
DYSCommandHeader.2DParallelogram.Help="Creates a parallelogram by selecting three points";
DYSCommandHeader.2DParallelogram.ShortHelp="Parallelogram";
DYSCommandHeader.2DParallelogram.LongHelp="Parallelogram\nCreates a parallelogram by selecting three points.";

// Curve creation
DYSCommandHeader.2DSpline.Title="Spline";
DYSCommandHeader.2DSpline.Help="Creates a spline by clicking or selecting points";
DYSCommandHeader.2DSpline.ShortHelp="Spline";
DYSCommandHeader.2DSpline.LongHelp="Spline\nCreates a spline by clicking or selecting points.";

// UseEdge by Intersection
DYSCommandHeader.2DUse3DByIntersect.Title="Intersect 3D Elements";
DYSCommandHeader.2DUse3DByIntersect.Help="Intersects 3D elements with the sketch plane";
DYSCommandHeader.2DUse3DByIntersect.ShortHelp="Intersect 3D Elements";
DYSCommandHeader.2DUse3DByIntersect.LongHelp="Intersect 3D\nIntersects 3D elements with the sketch plane.\nThe intersection appears in yellow.";

// UseEdge by Intersection with panel
DYSCommandHeader.2DUseEdgeIntersection.Title="Intersect 3D Elements";
DYSCommandHeader.2DUseEdgeIntersection.Help="Intersects 3D elements with the sketch plane";
DYSCommandHeader.2DUseEdgeIntersection.ShortHelp="Intersect 3D Elements";
DYSCommandHeader.2DUseEdgeIntersection.LongHelp="Intersect 3D\nIntersects 3D elements with the sketch plane.\nThe intersection appears in yellow.";

// UseEdge by Projection
DYSCommandHeader.2DUse3DByProject.Title="Project 3D Elements";
DYSCommandHeader.2DUse3DByProject.Help="Projects 3D elements onto the sketch plane";
DYSCommandHeader.2DUse3DByProject.ShortHelp="Project 3D Elements";
DYSCommandHeader.2DUse3DByProject.LongHelp="Project 3D\nProjects 3D elements onto the sketch plane.\nThe projection appears in yellow.";

// UseEdge by Projection with panel
DYSCommandHeader.2DUseEdgeProjection.Title="Project 3D Elements";
DYSCommandHeader.2DUseEdgeProjection.Help="Projects 3D elements onto the sketch plane";
DYSCommandHeader.2DUseEdgeProjection.ShortHelp="Project 3D Elements";
DYSCommandHeader.2DUseEdgeProjection.LongHelp="Project 3D\nProjects 3D elements onto the sketch plane.\nThe projection appears in yellow.";

// Isolate a UseEdge 
DYSCommandHeader.2DIsolate.Title="Isolate";
DYSCommandHeader.2DIsolate.Help="Isolates projections and intersections from their original supports";
DYSCommandHeader.2DIsolate.ShortHelp="Isolate projections and intersections";
DYSCommandHeader.2DIsolate.LongHelp="Isolates projections and intersections\nfrom their original supports.";

// Fix Element 
DYSCommandHeader.2DFix.Title="Fix";
DYSCommandHeader.2DFix.Help="Fixes the element location";
DYSCommandHeader.2DFix.ShortHelp="Fix element";
DYSCommandHeader.2DFix.LongHelp="Fix\nFixes the element location.\nNevertheless, the endpoints can still be edited.";

// Horizontal Element 
DYSCommandHeader.2DHorizontal.Title="Horizontal";
DYSCommandHeader.2DHorizontal.Help="Makes the selected element horizontal";
DYSCommandHeader.2DHorizontal.ShortHelp="Make horizontal";
DYSCommandHeader.2DHorizontal.LongHelp="Horizontal\nMakes the selected element horizontal.";

// Vertical Element 
DYSCommandHeader.2DVertical.Title="Vertical";
DYSCommandHeader.2DVertical.Help="Makes the selected element vertical";
DYSCommandHeader.2DVertical.ShortHelp="Make vertical";
DYSCommandHeader.2DVertical.LongHelp="Vertical\nMakes the selected element vertical.";

// Unfix Element 
DYSCommandHeader.2DUnfix.Title="Unfix";
DYSCommandHeader.2DUnfix.Help="Unfixes the element location";
DYSCommandHeader.2DUnfix.ShortHelp="Unfix element";
DYSCommandHeader.2DUnfix.LongHelp="Unfix\nUnfixes the element location.";

// 2D Constraint 
DYSCommandHeader.2DConstraint.Title="Constraint";
DYSCommandHeader.2DConstraint.Help="Creates geometrical and dimensional constraints";
DYSCommandHeader.2DConstraint.ShortHelp="Constraint";
DYSCommandHeader.2DConstraint.LongHelp="Constraint\nCreates a geometrical or \ndimensional constraint.";

// Corner 
DYSCommandHeader.2DCorner.Title="Corner";
DYSCommandHeader.2DCorner.Help="Creates a corner";
DYSCommandHeader.2DCorner.ShortHelp="Corner";
DYSCommandHeader.2DCorner.LongHelp="Corner\nCreates a corner. You can specify whether elements should be trimmed or not.";

// Chamfer
DYSCommandHeader.2DChamfer.Title="Chamfer";
DYSCommandHeader.2DChamfer.Help="Creates a chamfer, with elements either trimmed or not";
DYSCommandHeader.2DChamfer.ShortHelp="Chamfer";
DYSCommandHeader.2DChamfer.LongHelp="Chamfer\nCreates a chamfer, that is a beveled corner. \nYou can specify whether elements should be trimmed or not.";

// Relimitation
DYSCommandHeader.2DRelimitation.Title="Trim";
DYSCommandHeader.2DRelimitation.Help="Trims element(s)";
DYSCommandHeader.2DRelimitation.ShortHelp="Trim";
DYSCommandHeader.2DRelimitation.LongHelp="Trim\nTrims element(s). The position of the cursor\n determines how elements are to be trimmed.";

// Break Curves
DYSCommandHeader.2DBreak.Title="Break";
DYSCommandHeader.2DBreak.Help="Breaks elements";
DYSCommandHeader.2DBreak.ShortHelp="Break";
DYSCommandHeader.2DBreak.LongHelp="Break\nBreaks an element.";

// 2D Mirror
DYSCommandHeader.2DSymmetry.Title="Mirror";
DYSCommandHeader.2DSymmetry.Help="Creates symmetrical elements using lines or axes";
DYSCommandHeader.2DSymmetry.ShortHelp="Mirror";
DYSCommandHeader.2DSymmetry.LongHelp="Mirror\nCreates symmetrical elements using lines or axes.";

// 2D Symmetry
DYSCommandHeader.2DPureSymmetry.Title="Symmetry";
DYSCommandHeader.2DPureSymmetry.Help="Creates symmetrical elements (without duplication) using lines or axes";
DYSCommandHeader.2DPureSymmetry.ShortHelp="Symmetry";
DYSCommandHeader.2DPureSymmetry.LongHelp="Symmetry\nCreates symmetrical elements (without duplication) using lines or axes.";

// Exit Sketcher
DYSCommandHeader.ExitSketcher.Title="Exit Sketcher";
DYSCommandHeader.ExitSketcher.Help="Closes the Sketcher workbench";
DYSCommandHeader.ExitSketcher.ShortHelp="Exit";
DYSCommandHeader.ExitSketcher.LongHelp="Exit\nCloses the Sketcher workbench. \nYou can then create features.";

// Sketcher Settings
DYSCommandHeader.SketcherSettings.Title="Settings";
DYSCommandHeader.SketcherSettings.Help="Sets up Sketcher settings";
DYSCommandHeader.SketcherSettings.ShortHelp="Settings";
DYSCommandHeader.SketcherSettings.LongHelp="Settings\nSets up Sketcher settings";

// DYSNormalToView
DYSCommandHeader.NormalViewHeader.Title="View normal to sketch";
DYSCommandHeader.NormalViewHeader.Help="Sets the view normal to the sketch";
DYSCommandHeader.NormalViewHeader.ShortHelp="View Normal to Sketch";
DYSCommandHeader.NormalViewHeader.LongHelp="View Normal to Sketch\nSets the view normal to the sketch.";

// Equation
DYSCommandHeader.CalculatorHeader.Title="Formula";
DYSCommandHeader.CalculatorHeader.Help="Creates a formula";
DYSCommandHeader.CalculatorHeader.ShortHelp="Formula";
DYSCommandHeader.CalculatorHeader.LongHelp="Formula\nCreates a formula.";

// Update
DYSCommandHeader.UpdateSketchHeader.Title="Update";
DYSCommandHeader.UpdateSketchHeader.Help="Updates the part";
DYSCommandHeader.UpdateSketchHeader.ShortHelp="Update (Ctrl+U)";
DYSCommandHeader.UpdateSketchHeader.LongHelp="Update\n Updates the part. Updates are automatically \nperformed in the Sketcher.";

// DisplayGrid
DYSCommandHeader.DisplayGrid.Title="Display Grid";
DYSCommandHeader.DisplayGrid.Help="Alternatively displays or hides the Sketcher grid";
DYSCommandHeader.DisplayGrid.ShortHelp="Sketcher Grid";
DYSCommandHeader.DisplayGrid.LongHelp="Display Grid\nDisplays a grid to guide you as you create your sketch.";

// SnapGrid
DYSCommandHeader.SnapGrid.Title="Snap to Point";
DYSCommandHeader.SnapGrid.Help="Snaps to a point on the grid";
DYSCommandHeader.SnapGrid.ShortHelp="Snap to Point";
DYSCommandHeader.SnapGrid.LongHelp="Snaps the points you create\nto the nearest intersection\npoints of the grid.";

// CreateConstraint
DYSCommandHeader.CreateCstCplt.Title="Creates detected and internal constraints";
DYSCommandHeader.CreateCstCplt.Help="Creates the detected constraints and the internal constraints while you are sketching";
DYSCommandHeader.CreateCstCplt.ShortHelp="Geometrical Constraints";
DYSCommandHeader.CreateCstCplt.LongHelp="Creates detected and internal constraints\nCreates the detected constraints and the internal constraints\nwhile you are sketching.";

// ValidateConstraint
DYSCommandHeader.ValidateConstraint.Title="Creates dimensional constraints";
DYSCommandHeader.ValidateConstraint.Help="Creates the constraint corresponding to the keyed in parameter of the element while you are sketching";
DYSCommandHeader.ValidateConstraint.ShortHelp="Dimensional Constraints";
DYSCommandHeader.ValidateConstraint.LongHelp="Creates dimensional constraints\nCreates the constraint corresponding to the keyed in parameter\nof the element while you are sketching.";

// CATSwitchHeaderClipping
DYSCommandHeader.SwitchClipping.Title="Cutting Plane";
DYSCommandHeader.SwitchClipping.Help="Cuts part by sketch plane";
DYSCommandHeader.SwitchClipping.ShortHelp="Cut Part by Sketch Plane";
DYSCommandHeader.SwitchClipping.LongHelp="Cut Part by Sketch Plane\nCuts the part by the sketch plane.";

// CATSwitchHeaderInSelect
DYSCommandHeader.SwitchEltType.Title="Construction/Standard Element";
DYSCommandHeader.SwitchEltType.Help="Alternatively converts Sketcher elements into 'construction' or 'standard' elements";
DYSCommandHeader.SwitchEltType.ShortHelp="Construction/Standard Element";
DYSCommandHeader.SwitchEltType.LongHelp="Construction/Standard Element\nConverts Sketcher elements into 'construction' or 'standard' elements.";

// 2D Auto-Constraint 
DYSCommandHeader.2DAutoCst.Title="Auto Constraint";
DYSCommandHeader.2DAutoCst.Help="Automatically creates geometrical and dimensional constraints";
DYSCommandHeader.2DAutoCst.ShortHelp="Auto Constraint";
DYSCommandHeader.2DAutoCst.LongHelp="Auto Constraint\nAutomatically creates geometrical or dimensional constraints.";

// Animate Constraint 
DYSCommandHeader.2DAnimateCst.Title="Animate Constraint";
DYSCommandHeader.2DAnimateCst.Help="Animates dimensional constraints";
DYSCommandHeader.2DAnimateCst.ShortHelp="Animate Constraint";
DYSCommandHeader.2DAnimateCst.LongHelp="Animate Constraint\nAnimates dimensional constraints to show how the constrained system reacts.";
 
// Oblong creation  
DYSCommandHeader.2DTrouOblong.Title="Elongated Hole";
DYSCommandHeader.2DTrouOblong.Help="Creates an elongated hole";
DYSCommandHeader.2DTrouOblong.ShortHelp="Elongated Hole ";
DYSCommandHeader.2DTrouOblong.LongHelp="Elongated hole\nCreates an elongated hole.";

// OblongArc creation   
DYSCommandHeader.2DTrouOblongArc.Title="Cylindrical Elongated Hole";
DYSCommandHeader.2DTrouOblongArc.Help="Creates a cylindrical elongated hole";
DYSCommandHeader.2DTrouOblongArc.ShortHelp="Cylindrical Elongated Hole";
DYSCommandHeader.2DTrouOblongArc.LongHelp="Cylindrical elongated hole \nCreates a cylindrical elongated hole.";

// Keyhole profile creation   
DYSCommandHeader.2DKeyHole.Title="Keyhole Profile";
DYSCommandHeader.2DKeyHole.Help="Creates a keyhole profile";
DYSCommandHeader.2DKeyHole.ShortHelp="Keyhole Profile";
DYSCommandHeader.2DKeyHole.LongHelp="Keyhole profile\nCreates a keyhole profile.";

// Hexagon profile creation   
DYSCommandHeader.2DHexagon.Title="Hexagon";
DYSCommandHeader.2DHexagon.Help="Creates a hexagon by defining the radius of a circumscribed circle";
DYSCommandHeader.2DHexagon.ShortHelp="Hexagon";
DYSCommandHeader.2DHexagon.LongHelp="Hexagon \nCreates a hexagon by defining the radius of a circumscribed circle.";

// Points spaces (equidistant) creation   
DYSCommandHeader.2DPointsSpaces.Title="Equidistant Points";
DYSCommandHeader.2DPointsSpaces.Help="Creates equidistant points on a support";
DYSCommandHeader.2DPointsSpaces.ShortHelp="Equidistant Points";
DYSCommandHeader.2DPointsSpaces.LongHelp="Equidistant Points\nCreates equidistant points on a line or curve,\nfrom a given origin, at a given interval\nfor a specified number of new points.";

// 2D Translate
DYSCommandHeader.2DTranslate.Title="Translate";
DYSCommandHeader.2DTranslate.Help="Translates elements";
DYSCommandHeader.2DTranslate.ShortHelp="Translate";
DYSCommandHeader.2DTranslate.LongHelp="Translate\nTranslates elements.";

// 2D Rotate
DYSCommandHeader.2DRotate.Title="Rotate";
DYSCommandHeader.2DRotate.Help="Rotates elements";
DYSCommandHeader.2DRotate.ShortHelp="Rotate";
DYSCommandHeader.2DRotate.LongHelp="Rotate\nRotates elements.";

// 2D Scale
DYSCommandHeader.2DScale.Title="Scale";
DYSCommandHeader.2DScale.Help="Scales elements";
DYSCommandHeader.2DScale.ShortHelp="Scale";
DYSCommandHeader.2DScale.LongHelp="Scale\nScales elements.";

// 2D ParabolaFocus
DYSCommandHeader.2DParabolaFocus.Title="Parabola by Focus";
DYSCommandHeader.2DParabolaFocus.Help="Creates a parabola by focus";
DYSCommandHeader.2DParabolaFocus.ShortHelp="Parabola by Focus";
DYSCommandHeader.2DParabolaFocus.LongHelp="Parabola\nCreates a parabola by focus.";

// 2D HyperbolaFocus
DYSCommandHeader.2DHyperbolaFocus.Title="Hyperbola by Focus";
DYSCommandHeader.2DHyperbolaFocus.Help="Creates a hyperbola by focus";
DYSCommandHeader.2DHyperbolaFocus.ShortHelp="Hyperbola by Focus";
DYSCommandHeader.2DHyperbolaFocus.LongHelp="Hyperbola\nCreates a hyperbola by focus.";

// 2D Auto-Search
DYSCommandHeader.2DAutoSearch.Title="Auto Search";
DYSCommandHeader.2DAutoSearch.Help="Automatically selects 2D elements";
DYSCommandHeader.2DAutoSearch.ShortHelp="Auto Search";
//DYSCommandHeader.2DAutoSearch.LongHelp="Auto Search\nAutomatically selects 2D elements.";

// MeasureBetween == 
DYSCommandHeader.MeasureBetween.Title="Measure Between...";
DYSCommandHeader.MeasureBetween.Help="Measures between two elements";
DYSCommandHeader.MeasureBetween.LongHelp="Measure Between\nMeasures between two elements.";
DYSCommandHeader.MeasureBetween.ShortHelp="Measure Between";

// MeasureItem == 
DYSCommandHeader.MeasureItem.Title="Measure...";
DYSCommandHeader.MeasureItem.Help="Measures an element";
DYSCommandHeader.MeasureItem.LongHelp="Measure\nMeasures an element.";
DYSCommandHeader.MeasureItem.ShortHelp="Measure";

// Bi-Tangent Line creation by selecting two elements
DYSCommandHeader.2DLine2Tangent.Title="Bi-Tangent Line";
DYSCommandHeader.2DLine2Tangent.Help="Creates a bi-tangent line by selecting two elements";
DYSCommandHeader.2DLine2Tangent.ShortHelp="Bi-Tangent Line";
DYSCommandHeader.2DLine2Tangent.LongHelp="Bi-Tangent Line\nCreates a bi-tangent line \nby selecting two elements.";

// Tri-Tangent Circle creation by selecting three elements
DYSCommandHeader.2DCircle3Tangent.Title="Tri-Tangent Circle";
DYSCommandHeader.2DCircle3Tangent.Help="Creates a tri-tangent circle by selecting three elements";
DYSCommandHeader.2DCircle3Tangent.ShortHelp="Tri-Tangent Circle";
DYSCommandHeader.2DCircle3Tangent.LongHelp="Tri-Tangent Circle\nCreates a tri-tangent circle \nby selecting three elements.";

// 2D Contact Constraint 
DYSCommandHeader.2DContactConstraint.Title="Contact Constraint";
DYSCommandHeader.2DContactConstraint.Help="Creates contact constraints";
DYSCommandHeader.2DContactConstraint.ShortHelp="Contact Constraint";
DYSCommandHeader.2DContactConstraint.LongHelp="Contact Constraints\nCreates contact constraints such as concentricity, coincidence and tangency.";

// 2D Analyse 
DYSCommandHeader.2DAnalyse.Title="Sketch Analysis";
DYSCommandHeader.2DAnalyse.Help="Operates a Sketch Analysis";
DYSCommandHeader.2DAnalyse.ShortHelp="Sketch Analysis";
DYSCommandHeader.2DAnalyse.LongHelp="Sketch Analysis\nAnalyses all geometries in the current sketch.";

// 2D Light Analyse 
DYSCommandHeader.2DLightAnalyse.Title="Sketch Solving Status";
DYSCommandHeader.2DLightAnalyse.Help="Displays the sketch solving status.";
DYSCommandHeader.2DLightAnalyse.ShortHelp="Sketch Solving Status";
DYSCommandHeader.2DLightAnalyse.LongHelp="Sketch Solving Status\nDisplays the sketch solving status.";

// Activate a UseEdge inactivated
DYSCommandHeader.2DActivate.Title="Activate";
DYSCommandHeader.2DActivate.Help="Activates projections and intersections deactivated by update errors.";
DYSCommandHeader.2DActivate.ShortHelp="Activates projections and intersections";
DYSCommandHeader.2DActivate.LongHelp="Activate\nActivates projections and intersections\ndeactivated by update errors.";

// 2D Conic
DYSCommandHeader.2DConic.Title="Conic";
DYSCommandHeader.2DConic.Help="Creates a Conic";
DYSCommandHeader.2DConic.ShortHelp="Creates a Conic";
DYSCommandHeader.2DConic.LongHelp="Conic\nCreates a Conic by five points or with one or two tangents.";

// 2D Conic Curve
DYSCommandHeader.2DConicCurve.Title="Conic";
DYSCommandHeader.2DConicCurve.Help="Creates a Conic curve by clicking or selecting points or curves";
DYSCommandHeader.2DConicCurve.ShortHelp="Conic";
DYSCommandHeader.2DConicCurve.LongHelp="Conic\nCreates a parametric Conic curve by two, four, and five points and two tangents.";

// 2D Offset Contour
DYSCommandHeader.2DOffsetContour.Title="Offset";
DYSCommandHeader.2DOffsetContour.Help="Creates elements using an offset";
DYSCommandHeader.2DOffsetContour.ShortHelp="Offset";
DYSCommandHeader.2DOffsetContour.LongHelp="Offset\nCreates elements using an offset.";

// --------------------------------------------------
// -- commandes CXR6 dans le sketcher --
// --------------------------------------------------
// Point creation by intersection
DYSCommandHeader.2DPointIntersect.Title="Intersection Point";
DYSCommandHeader.2DPointIntersect.Help="Creates points by intersecting elements";
DYSCommandHeader.2DPointIntersect.ShortHelp="Intersection Point";
DYSCommandHeader.2DPointIntersect.LongHelp="Point\nCreates points onto the intersections of selected elements.";

// Point creation by Projection
DYSCommandHeader.2DPointProject.Title="Projection Point";
DYSCommandHeader.2DPointProject.Help="Creates points by projection";
DYSCommandHeader.2DPointProject.ShortHelp="Projection Point";
DYSCommandHeader.2DPointProject.LongHelp="Point\nCreates points by projecting points onto an element.";

// Infinite line (H/V) creation by selecting one or two points
DYSCommandHeader.2DLineHV.Title="Infinite Line";
DYSCommandHeader.2DLineHV.Help="Creates an infinite line which is horizontal, vertical or which goes through two points";
DYSCommandHeader.2DLineHV.ShortHelp="Infinite Line";
DYSCommandHeader.2DLineHV.LongHelp="Infinite Line\nCreates an infinite line which is horizontal,\nvertical or which goes through two points.";

// QuickTrim
DYSCommandHeader.2DQuickTrim.Title="Quick Trim";
DYSCommandHeader.2DQuickTrim.Help="Quickly trims an element";
DYSCommandHeader.2DQuickTrim.ShortHelp="Quick Trim";
DYSCommandHeader.2DQuickTrim.LongHelp="Quick Trim\nQuickly trims an element. The position of the cursor\n determines how an element is to be trimmed.";

// Close
DYSCommandHeader.2DClose.Title="Close arc";
DYSCommandHeader.2DClose.Help="Closes the circle or ellipse arc(s), and relimited spline(s)";
DYSCommandHeader.2DClose.ShortHelp="Close arc";
DYSCommandHeader.2DClose.LongHelp="Close arc\nCloses the circle or ellipse arc(s), and relimited spline(s).";

// Complement Circle or Ellipse arc
DYSCommandHeader.2DComplement.Title="Complement";
DYSCommandHeader.2DComplement.Help="Complements the circle or ellipse arc";
DYSCommandHeader.2DComplement.ShortHelp="Complement";
DYSCommandHeader.2DComplement.LongHelp="Complement\nComplements the circle or ellipse arc.";

// Infinite bissecting line creation by selecting two lines
DYSCommandHeader.2DBisectLine.Title="Bisecting Line";
DYSCommandHeader.2DBisectLine.Help="Creates an infinite bisecting line by selecting two lines";
DYSCommandHeader.2DBisectLine.ShortHelp="Bisecting Line";
DYSCommandHeader.2DBisectLine.LongHelp="Bisecting Line\nCreates an infinite bisecting line \nby selecting two existing lines.";

// Line Normal To Curve
DYSCommandHeader.2DLineNormalToCurve.Title="Line Normal To Curve";
DYSCommandHeader.2DLineNormalToCurve.Help="Creates a line normal to a curve";
DYSCommandHeader.2DLineNormalToCurve.ShortHelp="Line Normal To Curve";
DYSCommandHeader.2DLineNormalToCurve.LongHelp="Line Normal To Curve\nCreates a line which is normal to a curve \nby creating a point and selecting an existing curve.";

// Connect
DYSCommandHeader.2DConnect.Title="Connect";
DYSCommandHeader.2DConnect.Help="Creates a connecting curve";
DYSCommandHeader.2DConnect.ShortHelp="Connect";
DYSCommandHeader.2DConnect.LongHelp="Connect\nCreates an arc connecting two curves.";

// UseEdge by Silhouette
DYSCommandHeader.2DUse3DBySilhouette.Title="Project 3D Silhouette Edges";
DYSCommandHeader.2DUse3DBySilhouette.Help="Projects silhouette edges of 3D elements with the sketch plane";
DYSCommandHeader.2DUse3DBySilhouette.ShortHelp="Project 3D Silhouette Edges";
DYSCommandHeader.2DUse3DBySilhouette.LongHelp="Project 3D Silhouette Edges\nProjects silhouette edges of 3D elements with the sketch plane.\nThe silhouette edges projections appear in yellow.";

// Explode Polyline
DYSCommandHeader.2DExplode.Title="Explode";
DYSCommandHeader.2DExplode.Help="Explodes the selected polyline";
DYSCommandHeader.2DExplode.ShortHelp="Explode polyline";
DYSCommandHeader.2DExplode.LongHelp="Explode the selected polyline\nby transforming it into a succession of lines.";

// Commande d'Edition Line   
DYSCommandHeader.2DEditLine.Title="Geometry Definition...";
DYSCommandHeader.2DEditLine.Help="Edits geometry of the selected element";

// Commande d'Edition Point   
DYSCommandHeader.2DEditPoint.Title="Geometry Definition...";
DYSCommandHeader.2DEditPoint.Help="Edits geometry of the selected element";

// Commande d'Edition Cercle  
DYSCommandHeader.2DEditCircle.Title="Geometry Definition...";
DYSCommandHeader.2DEditCircle.Help="Edits geometry of the selected element";

// Commande d'Edition Ellipse   
DYSCommandHeader.2DEditEllipse.Title="Geometry Definition...";
DYSCommandHeader.2DEditEllipse.Help="Edits geometry of the selected element";

// 2D Curvature Analysis
DYSCommandHeader.2DCurvatureAnalysis.Title="Curvature Analysis";
DYSCommandHeader.2DCurvatureAnalysis.Help="Performs or edits the curvature analysis on the current sketch";
DYSCommandHeader.2DCurvatureAnalysis.ShortHelp="Curvature Analysis";
DYSCommandHeader.2DCurvatureAnalysis.LongHelp="Curvature Analysis\nPerforms or edits the curvature analysis on the current sketch.";

// 2D Output feature
DYSCommandHeader.2DOutput.Title="Output feature";
DYSCommandHeader.2DOutput.Help="Creates an output feature.";
DYSCommandHeader.2DOutput.ShortHelp="Output feature";
DYSCommandHeader.2DOutput.LongHelp="Output feature\nCreates an ouput feature by selecting a 2D geometry.";

// 2D Fix Together
DYSCommandHeader.2DFixTogether.Title="Fix Together";
DYSCommandHeader.2DFixTogether.Help="Attaches elements together to create a rigid set.";
DYSCommandHeader.2DFixTogether.ShortHelp="Fix Together";
DYSCommandHeader.2DFixTogether.LongHelp="Attaches elements together to create a rigid set.";

DYSCommandHeader.SelGeoms2DFixTogether.Title="Select geometrical elements";
DYSCommandHeader.SelGeoms2DFixTogether.Help="Selects the geometrical elements belonging to Fix Together.";
DYSCommandHeader.SelGeoms2DFixTogether.ShortHelp="Select geometrical elements";
DYSCommandHeader.SelGeoms2DFixTogether.LongHelp="Selects the geometrical elements belonging to Fix Together.";

// 2D OutputProfile feature
DYSCommandHeader.2DOutputProfile.Title="Profile feature";
DYSCommandHeader.2DOutputProfile.Help="Creates a profile feature.";
DYSCommandHeader.2DOutputProfile.ShortHelp="Profile feature";
DYSCommandHeader.2DOutputProfile.LongHelp="Profile feature\nCreates a profile feature by selecting 2D geometries.";

// Commande d'Edition output profile  
DYSCommandHeader.2DEditOutputProfile.Title="Profile feature Definition...";
DYSCommandHeader.2DEditOutputProfile.Help="Edits Profile feature matched to the selected geometry.";

//////////////visu toolbar ///////////////////////////////////////////
// Visu Grid
DYSCommandHeader.VisuGrid.Title="Grid";
DYSCommandHeader.VisuGrid.Help="Alternatively displays or hides the Sketcher grid";
DYSCommandHeader.VisuGrid.ShortHelp="Grid";
DYSCommandHeader.VisuGrid.LongHelp="Display Grid\nDisplays a grid to guide you as you create your sketch.";

// Visu Diagnostics
DYSCommandHeader.VisuDiag.Title="Diagnostics";
DYSCommandHeader.VisuDiag.Help="Alternatively displays or hides the diagnostics of solver";
DYSCommandHeader.VisuDiag.ShortHelp="Diagnostics";
DYSCommandHeader.VisuDiag.LongHelp="Display Diagnostics\nDisplays with a color on each element of sketcher the diagnostic of solve.";

// Visu Dimensional constraints
DYSCommandHeader.VisuDimCst.Title="Dimensional Constraints";
DYSCommandHeader.VisuDimCst.Help="Alternatively displays or hides the dimensional constraints";
DYSCommandHeader.VisuDimCst.ShortHelp="Dimensional Constraints";
DYSCommandHeader.VisuDimCst.LongHelp="Display Dimensional Constraints\nDisplays the dimensional constraints of sketcher.";

// Visu Geometrical constraints
DYSCommandHeader.VisuGeomCst.Title="Geometrical Constraints";
DYSCommandHeader.VisuGeomCst.Help="Alternatively displays or hides the geometrical constraints";
DYSCommandHeader.VisuGeomCst.ShortHelp="Geometrical Constraints";
DYSCommandHeader.VisuGeomCst.LongHelp="Display Geometrical Constraints\nDisplays the geometrical constraints of sketcher.";

// Visu No 3D Background

DYSCommandHeader.UsualVisu.Title="Usual";
DYSCommandHeader.UsualVisu.Help="Displays the 3D elements in background";
DYSCommandHeader.UsualVisu.ShortHelp="Usual";
DYSCommandHeader.UsualVisu.LongHelp="Displays the 3D elements in background of sketcher.";

DYSCommandHeader.No3DBackground.Title="No 3D Background";
DYSCommandHeader.No3DBackground.Help="Doesn't display the 3D elements in background";
DYSCommandHeader.No3DBackground.ShortHelp="No 3D Background";
DYSCommandHeader.No3DBackground.LongHelp="Doesn't display the 3D elements in background of sketcher.";

DYSCommandHeader.LowLightNoPick.Title="Low light";
DYSCommandHeader.LowLightNoPick.Help="Displays in low light the 3D elements in background ";
DYSCommandHeader.LowLightNoPick.ShortHelp="Low light";
DYSCommandHeader.LowLightNoPick.LongHelp="Displays in low light the 3D elements in background of sketcher.";

// Constraint Multi-Edition
DYSCommandHeader.2DConstraintMultiEdition.Title="Edit Multi-Constraint";
DYSCommandHeader.2DConstraintMultiEdition.Help="Modify a set of constraints ";
DYSCommandHeader.2DConstraintMultiEdition.ShortHelp="Edit Multi-Constraint";
DYSCommandHeader.2DConstraintMultiEdition.LongHelp="Edits constraints values and evaluates the constrained geometries at the end.";

// ---------------------------------------------------------------------------------------
// -- Temporaire BMW Section Management - Partage ressources Section toolbar impossible --
// ---------------------------------------------------------------------------------------

// == InsertSection ==
DYSCommandHeader.CATSdwInsertSectionHdr.Title                   = "Insert Section";
DYSCommandHeader.CATSdwInsertSectionHdr.Help                    = "Inserts a Section in the Part";
DYSCommandHeader.CATSdwInsertSectionHdr.ShortHelp               = "Insert Section";
DYSCommandHeader.CATSdwInsertSectionHdr.LongHelp                = 
"Insert Section
Inserts a Section in the Part.";

// == Insert2DViewSection ==
DYSCommandHeader.CATSdwInsert2DViewSectionHdr.Title             = "Insert 2D View Section";
DYSCommandHeader.CATSdwInsert2DViewSectionHdr.Help              = "Inserts a 2D View Section in the Part";
DYSCommandHeader.CATSdwInsert2DViewSectionHdr.ShortHelp         = "Insert 2D View Section";
DYSCommandHeader.CATSdwInsert2DViewSectionHdr.LongHelp          = 
"Insert 2D View Section
Inserts a 2D View Section in the Part.";

// == Selective loading ==
DYSCommandHeader.CATSdwSelectiveLoadingFromSketcherHdr.Title                   = "Selective loading";
DYSCommandHeader.CATSdwSelectiveLoadingFromSketcherHdr.Help                    = "Adds components to the section edition";
DYSCommandHeader.CATSdwSelectiveLoadingFromSketcherHdr.ShortHelp               = "Selective loading";
DYSCommandHeader.CATSdwSelectiveLoadingFromSketcherHdr.LongHelp                = 
"Selective loading
Adds components to the section edition.";

// == DefineInWorkSection ==
DYSCommandHeader.CATSdwDefineInWorkSectionHdr.Title             = "Define In Work Section";
DYSCommandHeader.CATSdwDefineInWorkSectionHdr.Help              = "Defines a Section as In Work Object";
DYSCommandHeader.CATSdwDefineInWorkSectionHdr.ShortHelp         = "Define a Section as In Work Object";
DYSCommandHeader.CATSdwDefineInWorkSectionHdr.LongHelp          = "Defines a Section as In Work Object";

// == SectionTemporaryHide ==
DYSCommandHeader.CATSdwSTHTemporaryHideHdr.Title                = "Show only Selected Elements";
DYSCommandHeader.CATSdwSTHTemporaryHideHdr.Help                 = "Temporary Shows only Selected Elements";
DYSCommandHeader.CATSdwSTHTemporaryHideHdr.ShortHelp            = "Show only Selected Elements";
DYSCommandHeader.CATSdwSTHTemporaryHideHdr.LongHelp             = "Temporary Filters View only on Selected Elements until Restore is called";

// == SectionTemporary Low Light No Pick ==
DYSCommandHeader.CATSdwSTHTemporaryLLNPHdr.Title                = "Highlights only Selected Elements";
DYSCommandHeader.CATSdwSTHTemporaryLLNPHdr.Help                 = "Temporary Highlights only Selected Elements";
DYSCommandHeader.CATSdwSTHTemporaryLLNPHdr.ShortHelp            = "Highlights only Selected Elements";
DYSCommandHeader.CATSdwSTHTemporaryLLNPHdr.LongHelp             = "Temporary Filters View on Selected Elements until Restore is called";

// == SectionTHRestore ==
DYSCommandHeader.CATSdwSTHRestoreHdr.Title                      = "Restore";
DYSCommandHeader.CATSdwSTHRestoreHdr.Help                       = "Restores the display after a Temporary Hide";
DYSCommandHeader.CATSdwSTHRestoreHdr.ShortHelp                  = "Restore the display";
DYSCommandHeader.CATSdwSTHRestoreHdr.LongHelp                   = "Restores the display after a Temporary Hide";

// == SectionSearch ==
DYSCommandHeader.CATSdwSectionSearchHdr.Title                   = "Section Search";
DYSCommandHeader.CATSdwSectionSearchHdr.Help                    = "Searches elements through sections and attributes.";
DYSCommandHeader.CATSdwSectionSearchHdr.ShortHelp               = "Section Search";
DYSCommandHeader.CATSdwSectionSearchHdr.LongHelp                = "Searches elements through sections and attributes.";

// == UpdateSectionContainer ==
DYSCommandHeader.CATSdwUpdateSectionContHdr.Title                   = "Update Section Containers";
DYSCommandHeader.CATSdwUpdateSectionContHdr.Help                    = "Update all the section containers.";
DYSCommandHeader.CATSdwUpdateSectionContHdr.ShortHelp               = "Update Section Containers";
DYSCommandHeader.CATSdwUpdateSectionContHdr.LongHelp                = "Searches section containers and updates them.";

// Temporaire BMW Section Management (cf. GSMUI CATGuiCheckHeader CATSdwSectionComponentsFilter )
DYSCommandHeader.2DSectionComponentsFilter.Title="Filter the Section components";
DYSCommandHeader.2DSectionComponentsFilter.Help="Filters the Section's components in the spec tree.";
DYSCommandHeader.2DSectionComponentsFilter.ShortHelp="Filter the Section's components";
DYSCommandHeader.2DSectionComponentsFilter.LongHelp="Filters the Section's components in the spec tree.";


// Eval Asynchrone
DYSCommandHeader.EvalManual.Title="Manual Evaluation";
DYSCommandHeader.EvalManual.Help="Manual Evaluation";
DYSCommandHeader.EvalManual.ShortHelp="Manual Evaluation";
DYSCommandHeader.EvalManual.LongHelp="Manual Evaluation";

DYSCommandHeader.Evaluation.Title="Evaluation";
DYSCommandHeader.Evaluation.Help="Evaluation";
DYSCommandHeader.Evaluation.ShortHelp="Evaluation";
DYSCommandHeader.Evaluation.LongHelp="Evaluation";

DYSCommandHeader.2DArc1Tgt.Title="Tangent Arc";
DYSCommandHeader.2DArc1Tgt.Help="Creates a Tangent Arc";
DYSCommandHeader.2DArc1Tgt.ShortHelp="Tangent Arc";
DYSCommandHeader.2DArc1Tgt.LongHelp="Arc\nCreates a tangent arc by specifying the radius value.";


