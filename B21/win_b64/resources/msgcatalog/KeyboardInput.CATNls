//
// ------------------------------------------------------------
// |
// |  NLS Message Catalog
// |  Framework: CATIAApplicationFrame
// |  Module : Search.m
// |
// ------------------------------------------------------------
//

// ------------------------------------------------------------
// | Special characters for Keyboard Input                  
// ------------------------------------------------------------
//
//  character to surround special characters
Quote                  = "'";


// ------------------------------------------------------------
// | Special names for Keyboard Input                  
// ------------------------------------------------------------
// For the following translations, the names of the commands, as well as the name for 
// the shortcuts MUST BE distinctive from each other. 
//
// In case of a clash, choose the name of the shortcut the shortest possible to be 
// differentiable
// Priority rule: The shortcut for Command has the highest priority level:
//   command -> c
//   color   -> col
// Priority rule: The shortcut for Search is independant from others:
//   search -> s
//   set    -> s
//
// Example: If 2 commands' names are plane and planification
//          choose plane and plani for the 2 associate shortcuts

//  no default prefix
None                  = "none";
//  last entered prefix
Last                  = "last entered";

//  name to launch a command
Command               = "command";
//  shortcut for this name
CommandShortcut       = "c";

//  name to launch a search through a favorite query
Favorite              = "favorite";
//  shortcut for this name
FavoriteShortcut      = "f";

//  string to characterize the name of an object 
Name                  = "Name";
//  shortcut for this string
NameShortcut          = "n";

//  string to characterize the name of an object as shown in the specification tree (graph)
NameInGraph           = "Name In Graph";
//  shortcut for this string
NameInGraphShortcut   = "g";

//  string to characterize the type of an object 
Type                  = "type";
//  shortcut for this string
TypeShortcut         = "t";

//  string to characterize the selection set of an object 
Set              = "Set";
//  shortcut for this string
SetShortcut      = "s";

//  string to characterize the color of an object 
Color              = "Color";
//  shortcut for this string
ColorShortcut      = "col";
//
ProblemInColorQuery = "The value </P1> is incorrect for the Color attribute.";

//  string to characterize the layer of an object 
Layer              = "Layer";
//  shortcut for this string
LayerShortcut      = "l";

//  string to characterize the dashed type of an object (line)
Dashed              = "Dashed";
//  shortcut for this string
DashedShortcut      = "d";
//
ProblemInDashedQuery = "The value </P1> is incorrect for the Dashed attribute.";

//  string to characterize the thickness of an object (line)
Weight              = "Weight";
//  shortcut for this string
WeightShortcut      = "w";
//
ProblemInWeightQuery = "The value </P1> is incorrect for the Weight attribute.";

//  string to characterize the symbol type of an object (point)
Symbol              = "Symbol";
//  shortcut for this string
SymbolShortcut      = "symb";
//
ProblemInWeightQuery = "The value </P1> is incorrect for the Weight attribute.";

// string to characterize the visibility of an object
Visibility             = "Visibility";
//  shortcut for this string
VisibilityShortcut     = "vis";

// Note for translation:
// The following couple of values is related to the visibility attribute of an object (from a data point of view).
// An object which has the "Visible" attribute may be visible but will not if one of its "parents" object is not visible.
// In other terms, Visible means "visualizable" and Hidden means "not visualizable",
// but users can have recorded theses values in favorite queries so one cannot change them.
Visible                = "Visible";
Hidden                 = "Hidden";

// Note for translation:
// The following couple of values is related to the visibility of an object (from the display point of view).
// An object is told "Shown" if it is shown on the screen: the object as well as each of its parents have the "Visible" attribute.
// An object is told "Invisible" if it is not shown on the screen: the object or any of its parents have the "Hidden" attribute.
Shown                  = "Shown";
Invisible              = "Invisible";
//
ProblemInVisibilityQuery = "The value </P1> is incorrect for the Visibility attribute.";


// ------------------------------------------------------------
// | Special names for the definition of the context,
// | for a Search carried out from the Keyboard Input                  
// ------------------------------------------------------------
// Rules: They are the same as previously, but the shortcuts can be a little longer
// ------   (ie, bot for to bottom)

//  string to characterize a Search context being everywhere 
Everywhere              = "Everywhere";
//  shortcut for this Search context - Everywhere
EverywhereShortcut      = "all";

//  string to characterize a Search context in the element 
InElement               = "In /P1";
DefaultInElement        = "In the element";
//  shortcut for this Search context - In the element
InElementShortcut       = "in";

//  string to characterize a Search context from the element to the bottom
FromElement             = "From /P1 to bottom";
DefaultFromElement      = "From the element to bottom";
//  shortcut for this Search context - From Element
FromElementShortcut     = "from";

//  string to characterize a Search context being from the last scope 
FromLastScope           = "From last scope";
//  shortcut for this Search context - From Last Scope
FromLastScopeShortcut   = "keep";

//  string to characterize a Search context being from the selection 
FromSelection           = "From current selection";
//  shortcut for this Search context - From Selection
FromSelectionShortcut   = "sel";

//  string to characterize a Search context from the screen 
VisibleOnScreen         = "Visible on screen";
//  shortcut for this Search context - Visible on screen
VisibleOnScreenShortcut = "scr";

//  string to characterize a Search context in the elements already found
InList             = "From search results";


// ------------------------------------------------------------
// | Special names for context options,
// | for a Search carried out from the Keyboard Input                  
// ------------------------------------------------------------

//  string to characterize the "Include Topology" context option 
TopologyShortcut      = "topo";
//  string to characterize the "Published elements only" context option 
PublicationsShortcut  = "pub";
//  string to characterize the "Deep Search" context option 
DeepSearchShortcut    = "deep";


// --------------------------------------------------------------------
// | Names of boolean for a Search carried out from the Keyboard Input                  
// --------------------------------------------------------------------
True  = "TRUE";
False = "FALSE";

//
// ------------------------------------------------------------
// |  Error Messages for  Power Input and Search command
// ------------------------------------------------------------
//
UnknownCommand     = "Unknown command: ";
//
UnavailableCommand = "Unavailable command: ";
//
UnknownWorkbench   = "Unknown workbench: ";
//
UnknownType        = "Unknown type: ";
//
UnknownAttribute   = "Unknown attribute: ";
//
UnknownColor       = "Unknown color: ";
//
WrongColorNumber   = "Wrong color number: ";
//
WrongLayerNumber   = "Wrong layer number: ";
//
SyntaxError        = "Syntax Error";
//
OddNumberOf        = "Odd number of: ";
//
MissingClosingParenthesis = "There is one or several closing parenthesis missing.";
//
MissingOpeningParenthesis = "There is one or several closing parenthesis missing.";
//
BeforeOpeningParenthesis = "After a (, there can only be:\n\t\ta (, or \n\t\tan operator.";
//
AfterOpeningParenthesis = "After a (, there can not be:\n\t\tany ), nor \n\t\tany operator.";
//
BeforeClosingParenthesis = "After a ), there cannot be any (. \nBefore a ), there cannot be any operator.";
//
AfterClosingParenthesis = "After a ), there can only be:\n\t\ta ), or \n\t\ta non operator, or \n\t\ta separator."; 
//
OperatorsPosition = "Operators can not be at the beginning or at the end of a string.";
//
DoubleOperator = "Two operators can not be side by side.";
//
MissingOperator = "This kind of query must contain an operator.";
//
RefPRT = "The reference element must be in a Mechanical Part.";
//
RefPBD = "The reference element must be in a Part body or an Hybrid body.";
//
RefGST = "The reference element must be in a Geometrical Set.";
//
RefOGS = "The reference element must be in an Ordered Geometrical Set.";

//
// Error Panel Title
PowerInputMessage  = "Power input message";
//
NoAttributeOnType = "The type </P1> does not have any specific attribute.";
//
NoSuchAttributeOnType = "The </P1> attribute does not exist on </P2> type objects.";
//
ErrorIn = "The following string is incorrect: </P1>";
//
IntegerAttribute = 
"The attribute is of integer type. Remove any unit or
decimal specification in the </P1> string.";
//
RealAttribute = 
"The attribute is of real type. Remove any unit 
specification in the </P1> string.";
//
BooleanAttribute = 
"The attribute is of boolean type. 
The only allowed values are: /P1, /P2, /P3, /P4.";
//
DimensionedAttribute = 
"The attribute is of dimensioned type. 
A unit must be specified.";
//
WrongToleranceRange = 
"The tolerance range is inaccurate. 
The first value must be strictly lower than the second one.";
//
WrongToleranceOperator = 
"When searching with a tolerance, 
the only authorized operators are = and !=.";
//
CharacterString = "characters string";
BooleanType     = "boolean";
EnumerationType = "enumeration";
WrongOperatorForAttribute = 
"The </P1> attribute is of /P2 type, \nfor which the only valid operators are = and !=.";
//
UserAttributeWarning = 
"Unless the </P1> attribute is a user defined attribute, 
the query is incorrect.";
//
NoListOfPossibleValuesForEnumeration = "Impossible to retrieve the list of possible values \nfor the </P1> enumeration-type attribute.";
InvalidValueForEnumeration = "The </P1> value entered for enumeration-type \nattribute </P2> is invalid.";


// ------------------------------------------------------------
// | Special names for Tools/Options,
// ------------------------------------------------------------

//  example : "c: as command:"
As                    = "as";
