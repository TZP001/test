DialogBoxTitle="Break";

CutBagTitle.Message="Elements List";
CuttingBagTitle.Message="Limitation List";

CutElement.Message="Elements";
CuttingElement.Message="Limitation";

KeepAll.Message="Keep all";
KeepAllButThis.Message="Keep all but this";
RemoveAllButThis.Message="Remove all but this";

FSBreakReportDialogName.Title="Break Report";
NoElement.Message=  "- No computation done -";

OuterFrame.BreakTypeFrame.Title="Break Type";
OuterFrame.BreakTypeFrame.ShortHelp="Set the break type";
OuterFrame.BreakTypeFrame.LongHelp="Set the break type";

OuterFrame.BreakTypeFrame.BreakTypeLbl.Title="Break Type : ";
OuterFrame.BreakTypeFrame.BreakCurveRadio.Title="Break Curves";
OuterFrame.BreakTypeFrame.BreakCurveRadio.ShortHelp="Break Curves";
OuterFrame.BreakTypeFrame.BreakCurveRadio.LongHelp="Break one or several curves by one or several points,curves or planes.";
OuterFrame.BreakTypeFrame.BreakSurfaceRadio.Title="Break Surfaces";
OuterFrame.BreakTypeFrame.BreakSurfaceRadio.ShortHelp="Break Surfaces";
OuterFrame.BreakTypeFrame.BreakSurfaceRadio.LongHelp="Break one or several surfaces by one or several curves,planes or surfaces";

OuterFrame.CutCuttingFrame.Title="Selection";
OuterFrame.CutCuttingFrame.ShortHelp="Select the Elements/Limitation elements";
OuterFrame.CutCuttingFrame.LongHelp="Select the Elements/Limitation elements";

OuterFrame.CutCuttingFrame.LblCut.Title =     "Elements : ";
OuterFrame.CutCuttingFrame.LblCut.ShortHelp ="Select Elements";
OuterFrame.CutCuttingFrame.LblCut.LongHelp ="Select elements to cut.";
OuterFrame.CutCuttingFrame.LblCutting.Title = "Limitation : ";
OuterFrame.CutCuttingFrame.LblCutting.ShortHelp ="Select Limitation";
OuterFrame.CutCuttingFrame.LblCutting.LongHelp ="Select limitation to cut the elements.";

OuterFrame.CutCuttingFrame.BreakFragment.Title="Fragment";
OuterFrame.CutCuttingFrame.BreakFragment.ShortHelp="Fragment";
OuterFrame.CutCuttingFrame.BreakFragment.LongHelp="Fragments (breaks) the curves/surfaces by its segment boundaries in UV direction.";

OuterFrame.CutCuttingFrame.BreakIntoEqNo.Title="Break into equal number";
OuterFrame.CutCuttingFrame.BreakIntoEqNo.ShortHelp="Break into equal number";
OuterFrame.CutCuttingFrame.BreakIntoEqNo.LongHelp="Breaks break a curve by an equal number, regardless of segmentation.";

OuterFrame.CutCuttingFrame.BreakIntoEqNo.ShortHelp="Number of equal parts";
OuterFrame.CutCuttingFrame.BreakIntoEqNo.LongHelp="Number of equal parts in which the curve will be broken.";

OuterFrame.CutCuttingFrame.BreakBoth.Title="Break Both";
OuterFrame.CutCuttingFrame.BreakBoth.ShortHelp="Break Both";
OuterFrame.CutCuttingFrame.BreakBoth.LongHelp="Break both elements and limitation elements.";

OuterFrame.CutCuttingFrame.DisassembleResult.Title="Disassemble Result";
OuterFrame.CutCuttingFrame.DisassembleResult.ShortHelp="Disassemble Result";
OuterFrame.CutCuttingFrame.DisassembleResult.LongHelp="Disassembles the resultant multi-cell/domain bodies into mono-cell bodies.";

OuterFrame.CutCuttingFrame.InvertSel.Title="Invert Selection";
OuterFrame.CutCuttingFrame.InvertSel.ShortHelp="Invert Selection";
OuterFrame.CutCuttingFrame.InvertSel.LongHelp= "Inverts (moves) the selection from current state to other state (Elements to Limitations or vice versa)
considering allowed selection in the other state.";

OuterFrame.CutCuttingFrame.StateSelector1.ShortHelp="Select Elements";
OuterFrame.CutCuttingFrame.StateSelector1.LongHelp="Select elements to cut.";
OuterFrame.CutCuttingFrame.StateSelector2.ShortHelp="Select Limitations";
OuterFrame.CutCuttingFrame.StateSelector2.LongHelp="Select limitations to cut the elements.";

OuterFrame.OptionsFrame.RelimitationFrame.Title="Trim Type";
OuterFrame.OptionsFrame.RelimitationFrame.ShortHelp="Set the Relimitation option";
OuterFrame.OptionsFrame.RelimitationFrame.LongHelp="Set the Relimitation option";

OuterFrame.OptionsFrame.RelimitationFrame.KeepMeshCur.Title="Keep Mesh";
//OuterFrame.OptionsFrame.RelimitationFrame.KeepMeshCur.ShortHelp="Keep Mesh";
OuterFrame.OptionsFrame.RelimitationFrame.KeepMeshCur.LongHelp="Keep the control points mesh as of original element";
//OuterFrame.OptionsFrame.RelimitationFrame.ShortenMeshCur.ShortHelp="Shorten Mesh";
OuterFrame.OptionsFrame.RelimitationFrame.ShortenMeshCur.Title="Shorten Mesh";
OuterFrame.OptionsFrame.RelimitationFrame.ShortenMeshCur.LongHelp="Shorten the control points mesh as input by U/V order";

OuterFrame.OptionsFrame.RelimitationFrame.OrderFrame.Title="Order";
OuterFrame.OptionsFrame.RelimitationFrame.OrderFrame.ShortHelp="Set the order";
OuterFrame.OptionsFrame.RelimitationFrame.OrderFrame.LongHelp="Sets the U/V orders of the break result.";

OuterFrame.OptionsFrame.RelimitationFrame.OrderFrame.KeepOrder.Title="Keep Order";
OuterFrame.OptionsFrame.RelimitationFrame.OrderFrame.KeepOrder.ShortHelp="Keep Order";
OuterFrame.OptionsFrame.RelimitationFrame.OrderFrame.KeepOrder.LongHelp="Keeps the order of the result elements same as that of the original element.";


OuterFrame.OptionsFrame.RelimitationFrame.OrderFrame.LblU.Title = "  U : ";
OuterFrame.OptionsFrame.RelimitationFrame.OrderFrame.LblV.Title = "  V : ";
OuterFrame.OptionsFrame.RelimitationFrame.OrderFrame.UOrder.ShortHelp="U Order";
OuterFrame.OptionsFrame.RelimitationFrame.OrderFrame.UOrder.LongHelp="U Order for shorten mesh option";
OuterFrame.OptionsFrame.RelimitationFrame.OrderFrame.VOrder.ShortHelp="V Order";
OuterFrame.OptionsFrame.RelimitationFrame.OrderFrame.VOrder.LongHelp="V Order for shorten mesh option";

OuterFrame.OptionsFrame.RelimitationFrame.LblU.Title = "  U : ";
OuterFrame.OptionsFrame.RelimitationFrame.LblV.Title = "  V : ";
OuterFrame.OptionsFrame.RelimitationFrame.UOrder.ShortHelp="U Order";
OuterFrame.OptionsFrame.RelimitationFrame.UOrder.LongHelp="U Order for shorten mesh option";
OuterFrame.OptionsFrame.RelimitationFrame.VOrder.ShortHelp="V Order";
OuterFrame.OptionsFrame.RelimitationFrame.VOrder.LongHelp="V Order for shorten mesh option";

OuterFrame.OptionsFrame.ProjectionFrame.Title="Projection";
OuterFrame.OptionsFrame.ProjectionFrame.ShortHelp="Set the type of projection";
OuterFrame.OptionsFrame.ProjectionFrame.LongHelp="Set the type of projection :
- Along normal.
- Along the compass.
- Along the viewing direction";
OuterFrame.OptionsFrame.ProjectionFrame.ProjectionCompassRadio.Title="Along Compass";
OuterFrame.OptionsFrame.ProjectionFrame.ProjectionCompassRadio.ShortHelp="Along Compass";
OuterFrame.OptionsFrame.ProjectionFrame.ProjectionCompassRadio.LongHelp="Project along compass direction";
OuterFrame.OptionsFrame.ProjectionFrame.ProjectionNormalRadio.Title="Along Normal";
OuterFrame.OptionsFrame.ProjectionFrame.ProjectionNormalRadio.ShortHelp="Along Normal";
OuterFrame.OptionsFrame.ProjectionFrame.ProjectionNormalRadio.LongHelp="Project along normal direction";
OuterFrame.OptionsFrame.ProjectionFrame.ProjectionViewingDirRadio.Title="Along Viewing Direction";
OuterFrame.OptionsFrame.ProjectionFrame.ProjectionViewingDirRadio.ShortHelp="Along Viewing Direction";
OuterFrame.OptionsFrame.ProjectionFrame.ProjectionViewingDirRadio.LongHelp="Project along viewing direction";


OuterFrame.OptionsFrame.ExtrapolationFrame.Title="Extrapolation";
OuterFrame.OptionsFrame.ExtrapolationFrame.ShortHelp="Sets the type of extrapolation";
OuterFrame.OptionsFrame.ExtrapolationFrame.LongHelp="Sets the type of extrapolation required - Tagential or Curvature";

OuterFrame.OptionsFrame.ExtrapolationFrame.TangentialExtrapolateRadio.Title="Tangential Extrapolation";
OuterFrame.OptionsFrame.ExtrapolationFrame.TangentialExtrapolateRadio.ShortHelp="Tangential Extrapolation";
OuterFrame.OptionsFrame.ExtrapolationFrame.TangentialExtrapolateRadio.LongHelp="Extrapolation along tangential direction";
OuterFrame.OptionsFrame.ExtrapolationFrame.CurvatureExtrapolateRadio.Title="Curvature Extrapolation";
OuterFrame.OptionsFrame.ExtrapolationFrame.CurvatureExtrapolateRadio.ShortHelp="Curvature Extrapolation";
OuterFrame.OptionsFrame.ExtrapolationFrame.CurvatureExtrapolateRadio.LongHelp="Extrapolation along curvature direction";
// R19 LA IsoU and IsoV options
OuterFrame.OptionsFrame.ExtrapolationFrame.IsoUExtrapolate.Title="IsoU Extrapolation";
OuterFrame.OptionsFrame.ExtrapolationFrame.IsoUExtrapolate.ShortHelp="IsoU Extrapolation";
OuterFrame.OptionsFrame.ExtrapolationFrame.IsoUExtrapolate.LongHelp="Extrapolation along isoparametric U direction";
OuterFrame.OptionsFrame.ExtrapolationFrame.IsoVExtrapolate.Title="IsoV Extrapolation";
OuterFrame.OptionsFrame.ExtrapolationFrame.IsoVExtrapolate.ShortHelp="IsoV Extrapolation";
OuterFrame.OptionsFrame.ExtrapolationFrame.IsoVExtrapolate.LongHelp="Extrapolation along isoparametric V direction";

OuterFrame.OptionsFrame.ReportFrame.Title="Report";
OuterFrame.OptionsFrame.ReportFrame.ShortHelp="Report of break operation";
OuterFrame.OptionsFrame.ReportFrame.LongHelp="Report of break operation";

OuterFrame.OptionsFrame.DeviationFrame.Title = "Deviation";
OuterFrame.OptionsFrame.DeviationFrame.DeviationMode.ShortHelp = " Deviation mode";
OuterFrame.OptionsFrame.DeviationFrame.DeviationMode.LongHelp = " Deviation show / no show mode.";
OuterFrame.OptionsFrame.DeviationFrame.LblDev.Title = " Max Deviation: ";
OuterFrame.OptionsFrame.DeviationFrame.LblDevVal1.Title = " 0.0";

OuterFrame.OptionsFrame.DeviationFrame.LblEdgeDev.Title = " Edge Deviation: ";
OuterFrame.OptionsFrame.DeviationFrame.LblEdgeDevVal1.Title = " 0.0";

OuterFrame.ReportFrame.LblReport.Title = " Report : ";

OuterFrame.ReportFrame.ReportRadio.Title="Report";
OuterFrame.ReportFrame.ReportRadio.ShortHelp="Report of break operation";
OuterFrame.ReportFrame.ReportRadio.LongHelp="Displays the report of the break operation";

CutSelShortHelp.Message ="Select elements.";
CutSelLongHelp.Message ="Select elements to cut.";
CuttingSelShortHelp.Message ="Select limitations.";
CuttingSelLongHelp.Message ="Select limitations to cut the elements.";

SurfaceTrim.Message="Surface Trim";
FaceTrim.Message="Face Trim";
EdgeTrim.Message="Edge Trim";
CurveTrim.Message="Curve Trim";

