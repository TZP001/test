ErrorInApplyAccess="Apply : /P1 can not be interpreted.";
FindError="Error in the method Find.";

FindError1="Error in the method Find: first argument (/P1) is not an existing type";
FindError2="Error in the method Find: second argument (/P1) is not a syntaxically correct expression";
ExtractError1="Error in the method Extract: first argument (/P1) is not an existing type";
ExtractError2="Error in the method Extract: second argument (/P1) is not an existing type";
ExtractError3="Error in the method Extract: third argument can not be empty. It must contain a rule that evaluates y variable from x variable";
ErrorInExtract="Extract : /P1 can not be interpreted.";
ErrorInSort="Sort : /P1 can not be interpreted.";

SortError1="Error in the method Sort: second argument (/P1) is not an existing type";
SortError2="Error in the method Sort: third argument (/P1) is not an existing type";
SortError3="Error in the method Sort: authorized values for first argument (/P1) are < and >";

SyntaxError="Syntax error raised at execution stage : ";
ARMBadString="The string \"/P1\" given as identifier in the method /P2 is not correct:\nthe first part has to be the name of a catalog located in knowledge resources, and the second one the name of the catalog description";
ARMNotFound="The string \"/P1\" given as identifier in the method /P2 is not correct:\neither the catalog /P3 does not exist or the catalog description /P4 does not exist";
SolveFailed="The method Update failed on object /P1";
SolveFailedNotImpl="The method Update is not implemented on object /P1";

ListAttributesError1="Error in the method ListAttributes: first argument (/P1) is not an existing type";
AddExtensionError1="Error in the AddExtension method: first argument (/P1) is not an existing type";
AddExtensionError2="Error in the AddExtension method: first argument (/P1) is not a type that can be instantiated";
AddExtensionError3="Error in the AddExtension method: object /P2 of type /P3 can not be extended with a type /P1";

IntegerOverflowError="Integer overflow error.";
ListEmpty="Unable to perform operations on the list: The list is empty.";
ListItemNULL="Item in the list with index /P1 is null.";
UnableToGetItemIndexOutOfRange="Unable to get item in the list. Index /P1 is out of range (should be comprised between 1 and /P2).";
UnableToAddItemToNewList="Unable to add item with index /P1 to the new list. Object invalid: Make sure the item you try to add is an existing item.";
UnableToCreateList="Unable to create the list.";
UnableToGetItemIndexOutOfRange="Unable to get item in the list. Index /P1 is out of range (should be comprised between 1 and /P2).";

MethodOnNullObject="The method /P1 is invoked on a NULL variable /P2.";
ArgumentNULL="The argument number /P1 of function /P2 is NULL. This is not a valid call.";

ReadAttributeOnNullObject = "Attempt to read the attribut /P1 on an empty variable";
WriteAttributeOnNullObject = "Attempt to write the attribut /P1 on an empty variable";

DeleteImpossible="Impossible to delete object /P1.";
UseMethodForbiddenInContext="Using function or method /P1 is invalid in this context.";
LicCheckERR_0001="License /P1 not granted.";



