ActivationError = "Cannot activate or deactivate extension";
AddExtError = "Cannot add extension";
AssertionError = "Assertion failed";
AttributeAddError = "Cannot add attribute";
AttributeIsNotAListError = "Attribute is not a list";
BlockMetaAttributeError = "Meta attribute supports only #offset facet";
BooleanValueExpectedError = "A boolean value is expected";
CannotBuildMetaDataError = "Cannot build meta data";
CannotFoundContainerError = "Cannot locate container";
CannotGetFeatureError = "Cannot get feature";
CannotGetKeyError = "Cannot find target object or key";
CannotGetValueError = "Cannot get value (type mismatch)";
CannotInstanciateEarlyFeatureError = "Cannot instanciate feature";
CannotLocateAttributeError = "Cannot locate attribute";
CannotSetExternalValueError = "Cannot set external value";
CannotSetFeatureListError = "Cannot set feature list";
CannotSetValueError = "Cannot set value (type mismatch)";
CannotSetFacetError = "Cannot set a facet (check if this facet is allowed in this context)";
CannotSetXmlTagError = "Cannot set XML tag on instances";
CannotSetBSU = "Cannot set backup startup";
CatalogManagerWarning = "Using catalog manager to same document";
CatalogManagerError = "Cannot initialize catalog manager";
CompilingContainerMsg = "Compiling document";
ContainerInitError = "Cannot initialize container";
ContainerNotFoundError = "Container not found";
DenyAttributeCreation = "Attribute creation is denied";
DenyBlockCreation = "Trying to create data block thru expression evalution is forbidden";
DenyContainerCreation = "Container creation is forbidden";
DenyDocumentCreation = "Trying to create document thru expression evalution is forbidden";
DenyFeatureCreation = "Feature creation is denied";
DenyIndex = "Index should not be defined";
DenySetValue = "Setting a value is denied";
DenyXmlTagCreation = "XML tag creation denied";
DocumentDoesNotExistError = "Document does not exist";
DuplicateNameError = "Duplicate name";
EvaluationError = "Cannot evaluate expression";
EvaluationError2 = "Cannot evaluate scope";
ExpectingLateFeature = "Expecting a late feature";
ExpectingStartUp = "Expecting a startup feature";
FacetMismatchError = "Facet mismatch";
FacetValueKindError = "Kind does not match";
FailedToSetMetaDatasWarning = "Failed to set meta datas";
FeatureCreationError = "Cannot create feature";
FeatureNotFoundError = "Cannot find feature";
FixingAttributeKindMsg = "Fixing the attribute kind";
FixingContainerUuidMsg = "Fixing the container uuid";
IncompatibleFacetError = "Impossible to use incompatible facet";
InstanceNamingWarning = "Instance name does not match assuming that #tag is correct";
InstanceNotFoundError = "Cannot locate instance";
InstanceTagError = "Instance not found #tag is incorrect";
InvalidCatalogName = "The catalog name is invalid";
InvalidFacetName = "The facet name is invalid";
InvalidIndex = "The provided index is invalid";
InvalidOperation = "Invalid operation";
InvalidTagError = "Ordinal does not match and #tag is in use";
KeyNotFoundError = "Key not found";
KindDoesNotMatchError = "Kind does not match";
ListIsExpectedError = "Not a list";
ListsSizeDoesNotMatchError = "Lists do not have the same size";
MapError = "Feature not available for map filling";
MetaDataAllreadyDefinedError = "Meta data is allready defined";
MethodNotFoundError = "Method not found";
NeedReferenceError = "A reference must be specified";
NotValidFacetOrValueError = "Not a valid facet or value";
NotYetImplementError = "Not yet implemented";
ObjectKindError = "Object is not a kind of is ref";
OpenFileError = "Cannot open file";
PrivateToPublicError = "Setting #private to #public may corrupt models";
ReferenceNotFoundError = "Cannot find reference";
RequireOffsetError = "Offset is not specified";
ReservedKeyworkError = "The keyword is reserved for future usage";
SharpTypeError = "Sharp type does not match";
StrangeFeatureExtensionWarning = "FeatExt instanciation is very strange";
UncaughtException = "Uncaught exception during evalution";
UnexpectedContainerKind = "Unexpected kind of container";
UnexpectedError = "Unexpected error";
UnspecifiedContainerError = "Unspecified container";
UnsupportedFacetError = "Unsupported facet";
UnzipError = "osm unzip failed";
UpgradeFunctionError = "Cannot define an upgrade function for this block ";
ValueKindError = "Value is not of the expected type";
ValueNeError = "Value is not equal";
WrongMetaType = "Wrong meta type";
WrongSuperType = "Wrong super type";
WrongNumberOfArgumentError = "Wrong number of arguments";
ZipError = "osm zip failed";
ZipInfo = "osm zipping";
OutOfBound = "Index is out of bound";
InternalError = "Interpretor internal error";
ByteCodeNotImplemented = "Instruction not implemented";
IncorrectClientId = "Incorrect client id";
osmfeat.CannotCreateCatalog = "Cannot create catalog file";
osmfeat.CannotUpgradeCatalog = "Cannot upgrade catalog file '/P1' due to former error";
osmfeat.AccessDenied = "Access denied to the following ressource";
osmfeat.EffectivityNotSpecified = "Effectivity does not have been set cannot generate an osm file to check {{catalog}} catalog";
osmfeat.CannotRepairCatalog = "Cannot repair catalog file";
osmfeat.CannotCreateMetaContainer= "Cannot create the meta data container (compound cont does not exist)";
osmfeat.CannotCreateMetaContainer2= "Cannot create the meta data container";
osmfeat.CannotSaveUpgradedCatalog="Cannot save upgraded catalog";
osmfeat.GraphicPathWarning = "Created catalog is not the first in CATGraphicPath";
osmfeat.CatalogGenerationFailure = "Catalog generation failed";
osmfeat.GraphicPathWarning2 = "Catalog path is not the first in CATGraphicPath, use it as target directory";
osmfeat.PathShouldNotBeSpecified = "A catalog path '/P1' should not be specified when loading a catalog";
osmfeat.CannotLocateInGraphicPath = "Cannot locate catalog '/P1' in CATGraphicPath";
osmfeat.CannotSaveCreatedCatalog = "Cannot save created catalog";
osmfeat.CannotOpenCatalog = "Cannot open catalog";
osmfeat.CannotGetMetaContainer = "Cannot get the meta data container";
osmfeat.SourceGenerationFailed = "Osm source generation failed";
osmfeat.CannotCreateBlock = "Cannot create block";
osmfeat.CannotSetClientId = "Cannot set client id";
osmfeat.GeneratingSourceFile = "Generating osm source file '/P1'";
osmfeat.UnspecifiedActionError = "An action is specified";
osmfeat.ExpectingArgument = "An argument is required";
osmfeat.JobIsDoneMsg = "Jobs is done"; 
osmfeat.UnknownOptionError = "the option '/P1' is Unknown";
osmfeat.TooManyArgumentError = "Too many arguments are provided expecting 2 filename";
osmfeat.IntermediatStepError = "Intermediate step have failed force continue";
osmfeat.GeneralError = "Forcing return code to failure because an intermediate step have failed.";
osmfeat.ClientIdRequired = "A client id is required";
osmfeat.IncorrectClientId = "The client id is incorrect (check -client-id option)";
osmfeat.CannotOpenRootContainer = "Cannot Open Root Container";
osmfeat.enablenewext = "you can add robust extension on the features of the catalog '/P1'";
osmfeat.UnspecifiedComment = "The upgrade comment is missing";
osmfeat.NoValuatedFacet = "The parameter 'ExtensionFeature./P1' must be valued in the file '/P2.CATRsc'";
osmfeat.NoLookupFacet = "Cannot lookup facet definition '/P1'";
osmfeat.NoKey = "This key '/P1' doesn't exist";
osmfeat.InvalidKind = "invalid kind for this key '/P1'";
osmfeat.NoKeyValue = "A value must be defined for this key '/P1'";
osmfeat.usage = "usage: osmfeat option files...\n",
        "where:\n",
        "Generate osm file according to feat file\n",
        "\t-generate-osm xxx.feat xxx.osm\n",
        "\t-g xxx.feat xxx.osm\n",
        "\t-no-history dump without history (usefull for unit testing)\n",
        "Upgrade a catalog file by adding xxx.osm\n",
        "\t-upgrade-catalog xxx.feat xxx.osm\n",
        "\t-u xxx.feat xxx.osm\n",
        "Create a catalog file from xxx.osm\n",
        "\t-new-catalog xxx.CATfct xxx.osm create a new catalog using a template\n",
        "\t\t-template create_template use another template\n",
        "\t-create-catalog xxx.osm xxx.feat\n",
        "\t-c xxx.osm xxx.feat\n",
        "Verify that a data block.osm works\n",
        "\t-check-data-block block\n",
        "To update or create .CATfct file\n",
        "\t-client-id id set your client id to set catalog ownership\n",
        "\t-comment cmtstring add cmtstring to history\n",
        "\t-author set an another author of modification into history\n",
        "Compatibility option:\n",
        "\t-used-file file generate a file containing list of input file\n",
        "\t-target-file file generate  a file containing list of generated file\n"  ;

CATFctEditorAssistant.usage = "usage: CATFctEditorAssistant -client-id id -generate-osm files...\n",
        "usage: CATFctEditorAssistant -client-id id [ -comment cmtstring ] -upgrade-catalog files...\n",
        "usage: CATFctEditorAssistant -client-id id [ -comment cmtstring ] -new-catalog [-template creation_template] files...\n",
        "where:\n",
        "generate osm file according to catalog file\n",
        "\t-client-id id set your client id to set catalog ownership\n",
        "\t-comment cmtstring add cmtstring to history\n",
        "\t-generate-osm xxx.CATfct xxx.osm\n",
        "upgrading a catalog file by adding xxx.osm\n",
        "\t-upgrade-catalog xxx.CATfct xxx.osm\n",
        "create a catalog file and is xxx.osm\n",
        "\t-new-catalog xxx.CATfct xxx.osm\n",
        "\t\t-template create_template use another template\n",
        "xxx.osm are located as is (if path is not specified the xxx file is located relativelly)\n",
        "xxx.CATfct are located in CATGraphicPath when read (when the path is specified it indicates the save directory)\n";
        
CannotBuildMetaDataError = "Cannot build external link meta data";
MisuseOfAssignementOperator  = "Miss use of assignement operator on list use append operator (<<)";

UndefinedMetaData = "Meta data used but not defined";
UnusedMetaData = "Meta data defined but not used";
CorruptedMetaData = "Corrupted meta data";

TranstypeAttributeWarning = "Transtyping an attribute is a dangerous operation";
InvalidNewLiteralWarning = "Invalid new literal declaration";

TranstypeFeatureWarning = "Transtyping a feature is a dangerous operation";
