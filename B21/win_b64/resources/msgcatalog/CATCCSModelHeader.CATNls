//---------------------------------------------------
// Ressource File for CATCCSModelHeader Class
// En_US
//---------------------------------------------------

// == Core&Cavity Design+
// ========================================================================================
// =================================================
// Commandes Open Body
// =================================================
// == GSMBody Insert == 
CATCCSModelHeader.CCSCreateBody.Title            = "Geometrical set";
CATCCSModelHeader.CCSCreateBody.Help             = "Creates a geometrical set";
CATCCSModelHeader.CCSCreateBody.ShortHelp        = "Geometrical set";
CATCCSModelHeader.CCSCreateBody.LongHelp         = "Creates a geometrical set.";
// == GSMBody Change ==
CATCCSModelHeader.CCSChangeBody.Title            = "Change Body...";
CATCCSModelHeader.CCSChangeBody.Help             = "Changes a feature of geometrical set";
CATCCSModelHeader.CCSChangeBody.ShortHelp        = "Change Body";
CATCCSModelHeader.CCSChangeBody.LongHelp         = "Changes a feature of geometrical set.";
// == GSMBody Remove ==
CATCCSModelHeader.CCSRemoveBody.Title            = "Remove a geometrical set";
CATCCSModelHeader.CCSRemoveBody.Help             = "Removes geometrical set and keeps its constituents";
CATCCSModelHeader.CCSRemoveBody.ShortHelp        = "Remove geometrical set";
CATCCSModelHeader.CCSRemoveBody.LongHelp         = "Removes geometrical set and keeps its constituents.";
// == GSMBody AutoSort ==
CATCCSModelHeader.CCSAutoSortBody.Title          = "AutoSort geometrical set";
CATCCSModelHeader.CCSAutoSortBody.Help           = "Sorts automatically the geometrical set";
CATCCSModelHeader.CCSAutoSortBody.ShortHelp      = "AutoSort geometrical set";
CATCCSModelHeader.CCSAutoSortBody.LongHelp       = "Sorts automatically the geometrical set.";

// =================================================
// ToolBar Import Molded Part
// =================================================
// == Import == 
CATCCSModelHeader.CCSImportMdlHeader.Title       = "Import...";
CATCCSModelHeader.CCSImportMdlHeader.Help        = "Imports a model";
CATCCSModelHeader.CCSImportMdlHeader.ShortHelp   = "Import Model";
CATCCSModelHeader.CCSImportMdlHeader.LongHelp    = 
"Import
Imports a model to mold.";
// == Compare == 
CATCCSModelHeader.CCSCompareMdlHeader.Title       = "Comparison...";
CATCCSModelHeader.CCSCompareMdlHeader.Help        = "Compare molded parts";
CATCCSModelHeader.CCSCompareMdlHeader.ShortHelp   = "Compare";
CATCCSModelHeader.CCSCompareMdlHeader.LongHelp    = 
"Comparison
Compares two molded parts";
// =================================================
// Bounding Box 
// =================================================
CATCCSModelHeader.CCSBoundingBox.Title       = "Bounding Box...";
CATCCSModelHeader.CCSBoundingBox.Help        = "Compute Bounding Box";
CATCCSModelHeader.CCSBoundingBox.ShortHelp   = "Bounding Box";
CATCCSModelHeader.CCSBoundingBox.LongHelp    = 
"Bounding Box
Computes a bounding box";
// =================================================
// Insert Component creation 
// =================================================
CATCCSModelHeader.CCSBlock.Title	 = "Generative Form Block...";
CATCCSModelHeader.CCSBlock.Help		 = "Generates a Form Block";
CATCCSModelHeader.CCSBlock.ShortHelp = "Generative Form Block";
CATCCSModelHeader.CCSBlock.LongHelp  = 
"Generative Form Block
Generates a Form Block";
// =================================================
// Model Properties
// =================================================
CATCCSModelHeader.CCSModelProperties.Title       = "Model Properties";
CATCCSModelHeader.CCSModelProperties.Help        = "Show model properties";
CATCCSModelHeader.CCSModelProperties.ShortHelp   = "Model Properties";
CATCCSModelHeader.CCSModelProperties.LongHelp    = 
"Model Properties
Show model properties and generate HTML report";

// =================================================
// Sew Surface
// =================================================
CATCCSModelHeader.CCSSewSurface.Title       = "Sew Surface...";
CATCCSModelHeader.CCSSewSurface.Help        = "Sew Surface";
CATCCSModelHeader.CCSSewSurface.ShortHelp   = "Sew Surface";
CATCCSModelHeader.CCSSewSurface.LongHelp    = 
"Sew Surface
Split selected faces and create a sew surface.";

// =================================================
// ToolBar Pulling Direction
// =================================================
// == Draft Analysis == 
CATCCSModelHeader.CCSDraftAnalysis.Title		= "Pulling Direction...";
CATCCSModelHeader.CCSDraftAnalysis.Help		= "Defines the pulling direction";
CATCCSModelHeader.CCSDraftAnalysis.ShortHelp	= "Pulling Direction";
CATCCSModelHeader.CCSDraftAnalysis.LongHelp	= 
"Pulling Direction
Defines the draft pulling direction.
Maps a color texture on surfaces according to the delta angle value between the normal vector
and the draft direction.";

CATCCSModelHeader.CCSDraftAnalysisT.Title		= "Slider Lifter...";
CATCCSModelHeader.CCSDraftAnalysisT.Help		= "Defines the slider or lifter direction on selected surfaces";
CATCCSModelHeader.CCSDraftAnalysisT.ShortHelp	= "Slider Lifter Direction";
CATCCSModelHeader.CCSDraftAnalysisT.LongHelp	= 
"Slider Lifter
Defines the draft slider (lifter) direction.
Maps a color texture on surfaces according to the delta angle value between the normal vector
and the draft direction at each surface point.";

CATCCSModelHeader.CCSDraftAnalysisPrincipaleEdition.Title		= "Edit Main Pulling Direction";
CATCCSModelHeader.CCSDraftAnalysisPrincipaleEdition.Help		= "Analyzes the pulling direction";
CATCCSModelHeader.CCSDraftAnalysisPrincipaleEdition.ShortHelp	= "Analyze the pulling direction";
CATCCSModelHeader.CCSDraftAnalysisPrincipaleEdition.LongHelp	= 
"Edit Main Pulling Direction
Analyzes the draft pulling direction.
Maps a color texture on surfaces according to the delta angle value between the normal vector
and the draft direction.";

CATCCSModelHeader.CCSDraftAnalysisSecondaireEdition.Title		= "Edit Slider Direction";
CATCCSModelHeader.CCSDraftAnalysisSecondaireEdition.Help		= "Analyzes the slider or lifter direction";
CATCCSModelHeader.CCSDraftAnalysisSecondaireEdition.ShortHelp	= "Analyze the slider (lifter) direction";
CATCCSModelHeader.CCSDraftAnalysisSecondaireEdition.LongHelp	= 
"Edit Slider Direction
Analyzes the draft slider (lifter) direction.
Maps a color texture on surfaces according to the delta angle value between the normal vector
and the draft direction at each surface point.";

CATCCSModelHeader.CCSDraftAnalysisSetCurrent.Title		= "Set as current axis system";
CATCCSModelHeader.CCSDraftAnalysisSetCurrent.Help		= "Set as current axis system";
CATCCSModelHeader.CCSDraftAnalysisSetCurrent.ShortHelp	= "Set as current axis system";
CATCCSModelHeader.CCSDraftAnalysisSetCurrent.LongHelp	= 
"Sets as current axis system";

CATCCSModelHeader.CCSDraftAnalysisUpdate.Title		= "Update Main Pulling Direction";
CATCCSModelHeader.CCSDraftAnalysisUpdate.Help		= "Updates the pulling direction";
CATCCSModelHeader.CCSDraftAnalysisUpdate.ShortHelp	= "Updates the pulling direction";
CATCCSModelHeader.CCSDraftAnalysisUpdate.LongHelp	= 
"Update Main Pulling Direction
Updates the mold areas.";

// == Transfer Element ==
CATCCSModelHeader.CCSTransferHeader.Title		= "Transfer...";
CATCCSModelHeader.CCSTransferHeader.Help		= "Transfers an element";
CATCCSModelHeader.CCSTransferHeader.ShortHelp	= "Transfer an element";
CATCCSModelHeader.CCSTransferHeader.LongHelp	= 
"Transfer
Transfers an element from one extract area to another.";

// =================================================
// ToolBar Unmolding areas
// =================================================
// == Extract Solide == 
CATCCSModelHeader.CATHybridPartExtractSolide.Title         = "Extract...";
CATCCSModelHeader.CATHybridPartExtractSolide.Help          = "Extracts a face or a surface edge";
CATCCSModelHeader.CATHybridPartExtractSolide.ShortHelp     = "Extract a face or a surface edge";
CATCCSModelHeader.CATHybridPartExtractSolide.LongHelp      = 
"Extract
Extracts a face or a surface edge.";
// == Split Mold area == 
CATCCSModelHeader.CCSSplitMold.Title			 = "Split Mold Area...";
CATCCSModelHeader.CCSSplitMold.Help              = "Cuts and relimits an element using a cutting element";
CATCCSModelHeader.CCSSplitMold.ShortHelp         = "Split Mold Area";
CATCCSModelHeader.CCSSplitMold.LongHelp          = 
"Split Mold Area
Cuts and relimits a mold area element using a cutting element.";
// == Aggregate Mold area == 
CATCCSModelHeader.CCSAggregate.Title             = "Aggregate Mold Area...";
CATCCSModelHeader.CCSAggregate.Help              = "Aggregates surfaces";
CATCCSModelHeader.CCSAggregate.ShortHelp         = "Aggregate Mold Area";
CATCCSModelHeader.CCSAggregate.LongHelp          = 
"Aggregate Mold Area
Aggregates surfaces of mold area.";
// == Explode view == 
CATCCSModelHeader.CCSExplode.Title               = "Explode View...";
CATCCSModelHeader.CCSExplode.Help                = "Explodes View ";
CATCCSModelHeader.CCSExplode.ShortHelp           = "Explode View";
CATCCSModelHeader.CCSExplode.LongHelp            = 
"Explode View
Displays exploded view of mold area.";
// == Oriented Faces  == 
CATCCSModelHeader.CCSOrientedFaces.Title         = "Face Orientation ...";
CATCCSModelHeader.CCSOrientedFaces.Help          = "Displays the face orientation";
CATCCSModelHeader.CCSOrientedFaces.ShortHelp     = "Face Orientation";
CATCCSModelHeader.CCSOrientedFaces.LongHelp      = 
"Face Orientation
Displays the face orientation.";
// == Faces Orientation == 
CATCCSModelHeader.CCSFacesOrientation.Title      = "Face Orientation ...";
CATCCSModelHeader.CCSFacesOrientation.Help       = "Displays the face orientation";
CATCCSModelHeader.CCSFacesOrientation.ShortHelp  = "Face Orientation";
CATCCSModelHeader.CCSFacesOrientation.LongHelp   = 
"Face Orientation
Displays the face orientation.";
// == Split == 
CATCCSModelHeader.CATHybridPartSplit.Title                 = "Split...";
CATCCSModelHeader.CATHybridPartSplit.Help                  = "Cuts and relimits an element using a cutting element";
CATCCSModelHeader.CATHybridPartSplit.ShortHelp             = "Split";
CATCCSModelHeader.CATHybridPartSplit.LongHelp              = 
"Split
Cuts and relimits an element using a cutting element.";
// == Trim == 
CATCCSModelHeader.CATHybridPartTrim.Title                  = "Trim...";
CATCCSModelHeader.CATHybridPartTrim.Help                   = "Cuts and assembles two elements";
CATCCSModelHeader.CATHybridPartTrim.ShortHelp              = "Trim";
CATCCSModelHeader.CATHybridPartTrim.LongHelp               = 
"Trim
Cuts and assembles two elements.";
// == Boundary ==
CATCCSModelHeader.CATHybridPartBoundary.Title              = "Boundary...";
CATCCSModelHeader.CATHybridPartBoundary.Help               = "Creates a boundary from a surface";
CATCCSModelHeader.CATHybridPartBoundary.ShortHelp          = "Boundary";
CATCCSModelHeader.CATHybridPartBoundary.LongHelp           = 
"Boundary
Creates a boundary from
the edge of a surface";
// == ReflectLine == 
CATCCSModelHeader.CATHybridPartReflectLine.Title           = "Reflect Line...";
CATCCSModelHeader.CATHybridPartReflectLine.Help            = "Creates a reflect line";
CATCCSModelHeader.CATHybridPartReflectLine.ShortHelp       = "ReflectLine";
CATCCSModelHeader.CATHybridPartReflectLine.LongHelp        = 
"Reflect Line
Creates the reflect line on a support along a direction
with an angle.";
// == CurveSmooth == 
CATCCSModelHeader.CCSCurveSmooth.Title					   = "Curve Smooth...";
CATCCSModelHeader.CCSCurveSmooth.Help					   = "Smoothes a curve";
CATCCSModelHeader.CCSCurveSmooth.ShortHelp				   = "Curve Smooth";
CATCCSModelHeader.CCSCurveSmooth.LongHelp				   =
"Curve Smooth
Smoothes tangency and curvature discontinuities of a curve under given thresholds.";
// =================================================
// ToolBar Fillet operations
// =================================================
// == ShapeFillet == 
CATCCSModelHeader.CATHpwFilletHdr.Title      = "Shape Fillet...";
CATCCSModelHeader.CATHpwFilletHdr.Help       = "Creates a fillet between two surfaces";
CATCCSModelHeader.CATHpwFilletHdr.ShortHelp  = "Shape Fillet";
CATCCSModelHeader.CATHpwFilletHdr.LongHelp   = 
"Shape Fillet
Creates a fillet between two surfaces.";
// == EdgeFillet == 
CATCCSModelHeader.CATHpwFilletEdgeHdr.Title		= "Edge Fillet...";
CATCCSModelHeader.CATHpwFilletEdgeHdr.Help		= "Creates a fillet using an edge.";
CATCCSModelHeader.CATHpwFilletEdgeHdr.ShortHelp	= "Edge Fillet";
CATCCSModelHeader.CATHpwFilletEdgeHdr.LongHelp	=
"Edge Fillet
Creates a fillet on a surface's edge.";
// == ChordalFillet == 
CATCCSModelHeader.CATHpwFilletChordalHdr.Title		= "Chordal Fillet...";
CATCCSModelHeader.CATHpwFilletChordalHdr.Help		= "Creates a chordal fillet using an edge.";
CATCCSModelHeader.CATHpwFilletChordalHdr.ShortHelp	= "Chordal Fillet";
CATCCSModelHeader.CATHpwFilletChordalHdr.LongHelp	=
"Chordal Fillet
Creates a chordal fillet on a surface's edge.";
// == FilletVariable =
CATCCSModelHeader.CATHpwFilletVarHdr.Title        = "Variable Fillet...";
CATCCSModelHeader.CATHpwFilletVarHdr.Help         = "Creates a variable radius fillet";
CATCCSModelHeader.CATHpwFilletVarHdr.ShortHelp    = "Variable Radius Fillet";
CATCCSModelHeader.CATHpwFilletVarHdr.LongHelp     = 
"Variable Radius Fillet
Creates a fillet whose radius varies at each selected point.";
// == Fillet Face == 
CATCCSModelHeader.CATHpwFilletFaceHdr.Title       = "Face-Face Fillet...";
CATCCSModelHeader.CATHpwFilletFaceHdr.Help        = "Creates a face-face fillet by selecting two faces";
CATCCSModelHeader.CATHpwFilletFaceHdr.ShortHelp   = "Face-Face Fillet";
CATCCSModelHeader.CATHpwFilletFaceHdr.LongHelp    = 
"Face-Face Fillet
Creates a fillet between two non-intersecting faces.";
// == Fillet Tritangent == 
CATCCSModelHeader.CATHpwTriFilletHdr.Title        = "Tritangent Fillet...";
CATCCSModelHeader.CATHpwTriFilletHdr.Help         = "Creates a fillet by removing the face you specify";
CATCCSModelHeader.CATHpwTriFilletHdr.ShortHelp    = "Tritangent Fillet";
CATCCSModelHeader.CATHpwTriFilletHdr.LongHelp     = 
"Tritangent Fillet
Creates a tritangent fillet from three
faces you specify, by removing one.";
// == radiusFillet ==
CATCCSModelHeader.CCSRadiusFillet.Title			  = "Search Fillets...";
CATCCSModelHeader.CCSRadiusFillet.Help            = "Analyzes surfaces to find fillets";
CATCCSModelHeader.CCSRadiusFillet.ShortHelp       = "Search Fillets";
CATCCSModelHeader.CCSRadiusFillet.LongHelp        = 
"Search Fillets
Analyzes surfaces to find fillets.";
// == radiusFillet ==
CATCCSModelHeader.CCSRadius.Title				  = "Fillet Radius Reduction...";
CATCCSModelHeader.CCSRadius.Help				  = "Modifies the curvature radius of surface";
CATCCSModelHeader.CCSRadius.ShortHelp			  = "Fillet Radius Reduction";
CATCCSModelHeader.CCSRadius.LongHelp			  = 
"Fillet Radius Reduction
Creates a new fillet surface with a given radius.";

// =================================================
// ToolBar Parting Surface operations
// =================================================
// == Parting surface == 
CATCCSModelHeader.CCSPartingSurface.Title       = "Parting Surface...";
CATCCSModelHeader.CCSPartingSurface.Help        = "Parting Surface";
CATCCSModelHeader.CCSPartingSurface.ShortHelp   = "Parting Surface";
CATCCSModelHeader.CCSPartingSurface.LongHelp    = 
"Parting Surface
Computes parting surface of mold area.";

// == Parting surface Extrude== 
CATCCSModelHeader.CCSPartingSrfExtr.Title       = "Assistant Extrude...";
CATCCSModelHeader.CCSPartingSrfExtr.Help        = "Assistant Extrude";
CATCCSModelHeader.CCSPartingSrfExtr.ShortHelp   = "Assistant Extrude";
CATCCSModelHeader.CCSPartingSrfExtr.LongHelp    = 
"Assistant Extrude
Computes parting surface by extruding a profile.";

// == Parting surface Loft== 
CATCCSModelHeader.CCSPartingSrfLoft.Title       = "Assistant Loft...";
CATCCSModelHeader.CCSPartingSrfLoft.Help        = "Assistant Loft";
CATCCSModelHeader.CCSPartingSrfLoft.ShortHelp   = "Assistant Loft";
CATCCSModelHeader.CCSPartingSrfLoft.LongHelp    = 
"Assistant Loft
Computes parting surface with loft.";

// == Simplify surface == 
CATCCSModelHeader.CCSSurfaceSimplify.Title       = "Light Surface...";
CATCCSModelHeader.CCSSurfaceSimplify.Help        = "Light Surface ";
CATCCSModelHeader.CCSSurfaceSimplify.ShortHelp   = "Light Surface ";
CATCCSModelHeader.CCSSurfaceSimplify.LongHelp    = 
"Light Surface
Computes a light surface of a given surface";


// == Extrude== 
CATCCSModelHeader.CATHybridPartExtrude.Title			= "Extrude...";
CATCCSModelHeader.CATHybridPartExtrude.Help				= "Creates an extruded surface";
CATCCSModelHeader.CATHybridPartExtrude.ShortHelp		= "Extrude";
CATCCSModelHeader.CATHybridPartExtrude.LongHelp			= 
"Extrude
Creates a surface by extruding a profile.";

// == Fill == 
CATCCSModelHeader.CATHybridPartFill.Title				= "Fill...";
CATCCSModelHeader.CATHybridPartFill.Help				= "Creates a filled surface inside a closed boundary";
CATCCSModelHeader.CATHybridPartFill.ShortHelp			= "Fill";
CATCCSModelHeader.CATHybridPartFill.LongHelp			= 
"Fill
Creates a fill surface inside a closed boundary.";

// == Sweep == 
CATCCSModelHeader.CATHybridPartSweep.Title				= "Sweep...";
CATCCSModelHeader.CATHybridPartSweep.Help				= "Creates a swept surface";
CATCCSModelHeader.CATHybridPartSweep.ShortHelp			= "Sweep";
CATCCSModelHeader.CATHybridPartSweep.LongHelp			= 
"Swept Surface
Creates a surface by sweeping a profile along a curve.";

// == Loft ==
CATCCSModelHeader.CATHybridPartLoft.Title               = "Multi-sections Surface...";
CATCCSModelHeader.CATHybridPartLoft.Help                = "Creates a lofted surface";
CATCCSModelHeader.CATHybridPartLoft.ShortHelp           = "Multi-sections Surface";
CATCCSModelHeader.CATHybridPartLoft.LongHelp            = 
"Multi-sections Surface
Creates a multi-sections surface based on section curves,
and possibly guide curves, along a center curve.";
// == Extrapolate == 
CATCCSModelHeader.CATHybridPartExtrapol.Title				= "Extrapolate...";
CATCCSModelHeader.CATHybridPartExtrapol.Help				= "Creates a surface or curve by extrapolation";
CATCCSModelHeader.CATHybridPartExtrapol.ShortHelp			= "Extrapolate";
CATCCSModelHeader.CATHybridPartExtrapol.LongHelp			= 
"Extrapolate
Creates a surface by extrapolation of one of its boundaries,
or a curve at one of its endpoints.";
// == Blend == 
CATCCSModelHeader.CATHybridPartBlend.Title                 = "Blend...";
CATCCSModelHeader.CATHybridPartBlend.Help                  = "Creates a blend surface";
CATCCSModelHeader.CATHybridPartBlend.ShortHelp             = "Blend";
CATCCSModelHeader.CATHybridPartBlend.LongHelp              = 
"Blend
Creates a blended surface between two sufaces.";
// == Offset== 
CATCCSModelHeader.CATShapeDesignOffset.Title                = "Offset...";
CATCCSModelHeader.CATShapeDesignOffset.Help                 = "Creates a surface that is offset from a reference surface";
CATCCSModelHeader.CATShapeDesignOffset.ShortHelp            = "Offset";
CATCCSModelHeader.CATShapeDesignOffset.LongHelp             = 
"Offset
Creates a surface that is offset from a reference surface.";

// =================================================
// ToolBar Wireframe
// =================================================
// == Point == 
CATCCSModelHeader.CATHybridPartPoint.Title                 = "Point...";
CATCCSModelHeader.CATHybridPartPoint.Help                  = "Creates one or more points";
CATCCSModelHeader.CATHybridPartPoint.ShortHelp             = "Create point";
CATCCSModelHeader.CATHybridPartPoint.LongHelp              = 
"Point
Creates one or more points." ;
// == Extremum ==
CATCCSModelHeader.CATShapeDesignExtremum.Title              = "Extremum...";
CATCCSModelHeader.CATShapeDesignExtremum.Help               = "Gives the extremum point of an element";
CATCCSModelHeader.CATShapeDesignExtremum.ShortHelp          = "Extremum";
CATCCSModelHeader.CATShapeDesignExtremum.LongHelp           = 
"Extremum
Creates the extremum point of an element
in a given direction.";

// == Line == 
CATCCSModelHeader.CATHybridPartLine.Title                  = "Line...";
CATCCSModelHeader.CATHybridPartLine.Help                   = "Creates a line";
CATCCSModelHeader.CATHybridPartLine.ShortHelp              = "Create a line";
CATCCSModelHeader.CATHybridPartLine.LongHelp               = 
"Line
Creates a line." ;

// == Spline== 
CATCCSModelHeader.CATHybridPartCurve.Title				   = "Spline...";
CATCCSModelHeader.CATHybridPartCurve.Help                  = "Creates a spline curve";
CATCCSModelHeader.CATHybridPartCurve.ShortHelp             = "Spline";
CATCCSModelHeader.CATHybridPartCurve.LongHelp              = 
"Spline
Creates a spline curve, possibly on a support element
and with tangency conditions.";

//  ==  Spine  ==  
CATCCSModelHeader.CATShapeDesignSpine.Title				   = "Spine...";
CATCCSModelHeader.CATShapeDesignSpine.Help				   = "Creates a spine";
CATCCSModelHeader.CATShapeDesignSpine.ShortHelp			   = "Spine";
CATCCSModelHeader.CATShapeDesignSpine.LongHelp             = 
"Spine
Creates a spine.";


// == Plane == 
CATCCSModelHeader.CATHybridPartPlane.Title                 = "Plane...";
CATCCSModelHeader.CATHybridPartPlane.Help                  = "Creates a plane";
CATCCSModelHeader.CATHybridPartPlane.ShortHelp             = "Create a plane";
CATCCSModelHeader.CATHybridPartPlane.LongHelp              = 
"Plane
Creates a plane." ;
// == Project == 
CATCCSModelHeader.CATHybridPartProject.Title               = "Projection...";
CATCCSModelHeader.CATHybridPartProject.Help                = "Projects a point or curve onto a support element";
CATCCSModelHeader.CATHybridPartProject.ShortHelp           = "Projection";
CATCCSModelHeader.CATHybridPartProject.LongHelp            = 
"Projection
Projects a point or curve onto a support element.";
// == Intersect == 
CATCCSModelHeader.CATHybridPartIntersect.Title             = "Intersection...";
CATCCSModelHeader.CATHybridPartIntersect.Help              = "Creates geometry by intersecting two geometric elements";
CATCCSModelHeader.CATHybridPartIntersect.ShortHelp         = "Intersection";
CATCCSModelHeader.CATHybridPartIntersect.LongHelp          = 
"Intersection
Creates geometry by intersecting 
two geometric elements.";
// == Parallel== 
CATCCSModelHeader.CATHybridPartParallel.Title			   = "Parallel Curve...";
CATCCSModelHeader.CATHybridPartParallel.Help			   = "Creates a curve that is offset from a reference curve";
CATCCSModelHeader.CATHybridPartParallel.ShortHelp		   = "Create a parallel curve";
CATCCSModelHeader.CATHybridPartParallel.LongHelp		   = 
"Parallel Curve
Creates a curve offset from a referenced curve,
on a support surface.";
// == 3D Curve Offset== 
CATCCSModelHeader.CATShapeDesign3DCurveOffset.Title              = "3D Curve Offset...";
CATCCSModelHeader.CATShapeDesign3DCurveOffset.Help               = "Creates a 3D curve offset";
CATCCSModelHeader.CATShapeDesign3DCurveOffset.ShortHelp          = "3D Curve Offset";
CATCCSModelHeader.CATShapeDesign3DCurveOffset.LongHelp           = 
"3D Curve Offset
Creates a curve offset from a referenced curve, a direction
and corner parameters.";
// == Connect Curve == 
CATCCSModelHeader.CATHybridPartConnect.Title               = "Connect Curve...";
CATCCSModelHeader.CATHybridPartConnect.Help                = "Creates a connecting curve between two curves";
CATCCSModelHeader.CATHybridPartConnect.ShortHelp           = "Connect Curve";
CATCCSModelHeader.CATHybridPartConnect.LongHelp            = 
"Connect Curve
Creates a connecting curve between two curves
taking continuity constraints into account.";
// == Corner ==
CATCCSModelHeader.CATShapeDesignCorner.Title                = "Corner...";
CATCCSModelHeader.CATShapeDesignCorner.Help                 = "Creates a corner between two curves";
CATCCSModelHeader.CATShapeDesignCorner.ShortHelp            = "Corner";
CATCCSModelHeader.CATShapeDesignCorner.LongHelp             = 
"Corner
Creates a corner between two curves
or between a point and a curve.";

// == Curve on surface ==
CATCCSModelHeader.CurveOnSurfaceHead.Title				   = "Curve on Surface";
CATCCSModelHeader.CurveOnSurfaceHead.ShortHelp			   = "Curve on Surface";
CATCCSModelHeader.CurveOnSurfaceHead.Help				   = "Creates a curve on a surface";
CATCCSModelHeader.CurveOnSurfaceHead.LongHelp			   = 
"Curve on Surface
Creates a curve on a surface
or along any isoparametric
curve on the surface.
Click anywhere over the surface
to create intermediary points.";

// =================================================
// ToolBar Concatenation
// =================================================
// == Assemble == 
CATCCSModelHeader.CATHybridPartAssemble.Title              = "Join...";
CATCCSModelHeader.CATHybridPartAssemble.Help               = "Joins curves or surfaces";
CATCCSModelHeader.CATHybridPartAssemble.ShortHelp          = "Join curves or surfaces";
CATCCSModelHeader.CATHybridPartAssemble.LongHelp           = 
"Join
Joins curves or surfaces.";
// == Untrim ==
CATCCSModelHeader.CATHybridPartUntrim.Title                = "Untrim...";
CATCCSModelHeader.CATHybridPartUntrim.Help                 = "Untrims previously trimmed surfaces and curves";
CATCCSModelHeader.CATHybridPartUntrim.ShortHelp            = "Untrim Surface or Curve";
CATCCSModelHeader.CATHybridPartUntrim.LongHelp             = 
"Untrim Surface or Curve
Untrims previously trimmed
surfaces and curves.";
// =================================================
// ToolBar Transformation
// =================================================
// == Translate == 
CATCCSModelHeader.CATHybridPartTranslate.Title             = "Translate...";
CATCCSModelHeader.CATHybridPartTranslate.Help              = "Translates an element along a direction";
CATCCSModelHeader.CATHybridPartTranslate.ShortHelp         = "Translate";
CATCCSModelHeader.CATHybridPartTranslate.LongHelp          = 
"Translate
Translates an element along a direction." ;
// == Rotate == 
CATCCSModelHeader.CATHybridPartRotate.Title                = "Rotate...";
CATCCSModelHeader.CATHybridPartRotate.Help                 = "Rotates an element about an axis";
CATCCSModelHeader.CATHybridPartRotate.ShortHelp            = "Rotate";
CATCCSModelHeader.CATHybridPartRotate.LongHelp             = 
"Rotate
Rotates an element about an axis." ;
// == Symmetry == 
CATCCSModelHeader.CATHybridPartSymmetry.Title              = "Symmetry...";
CATCCSModelHeader.CATHybridPartSymmetry.Help               = "Transforms an element by symmetry";
CATCCSModelHeader.CATHybridPartSymmetry.ShortHelp          = "Symmetry";
CATCCSModelHeader.CATHybridPartSymmetry.LongHelp           = 
"Symmetry
Creates a symmetrical element
in relation to a reference element." ;
// == Scaling ==
CATCCSModelHeader.CATHybridPartScaling.Title     = "Scaling..." ;
CATCCSModelHeader.CATHybridPartScaling.Help      = "Transforms an element by scaling" ;
CATCCSModelHeader.CATHybridPartScaling.ShortHelp = "Scaling" ;
CATCCSModelHeader.CATHybridPartScaling.LongHelp  =
"Scaling
Transforms an element by scaling." ;
// == Affinity ==
CATCCSModelHeader.CATHybridPartAffinity.Title     = "Affinity..." ;
CATCCSModelHeader.CATHybridPartAffinity.Help      = "Transforms an element by affinity" ;
CATCCSModelHeader.CATHybridPartAffinity.ShortHelp = "Affinity" ;
CATCCSModelHeader.CATHybridPartAffinity.LongHelp  =
"Affinity
Transforms an element by affinity." ;
// == Axis To Axis ==
CATCCSModelHeader.CATHpwAxisToAxisHdr.Title     = "Axis To Axis..." ;
CATCCSModelHeader.CATHpwAxisToAxisHdr.Help      = "Transforms an element from an axis system to another" ;
CATCCSModelHeader.CATHpwAxisToAxisHdr.ShortHelp = "Axis To Axis" ;
CATCCSModelHeader.CATHpwAxisToAxisHdr.LongHelp  =
"Axis To Axis
Transforms an element from an axis system to another" ;

// =================================================
// ToolBar Power Copy
// =================================================
// == PowerCopy and catalog ==
// == Templates Creation ==
CATCCSModelHeader.PrtCreatePowerCopy.Title            = "PowerCopy Creation...";
CATCCSModelHeader.PrtCreatePowerCopy.Help             = "Creates a PowerCopy";
CATCCSModelHeader.PrtCreatePowerCopy.ShortHelp        = "PowerCopy Creation";
CATCCSModelHeader.PrtCreatePowerCopy.LongHelp         = "Creates a PowerCopy";
// == Templates Insantiation ==
CATCCSModelHeader.PrtInstanciatePowerCopy.Title            = "PowerCopy Instantiation...";
CATCCSModelHeader.PrtInstanciatePowerCopy.Help             = "Instantiate a defined PowerCopy stored in a part";
CATCCSModelHeader.PrtInstanciatePowerCopy.ShortHelp        = "PowerCopy Instantiation";
CATCCSModelHeader.PrtInstanciatePowerCopy.LongHelp         = "Instantiate a defined PowerCopy stored in a part";
// == Udf Feature Save ==
CATCCSModelHeader.PrtSaveInCatalog.Title                 = "PowerCopy Save in Catalog...";
CATCCSModelHeader.PrtSaveInCatalog.Help                  = "Save PowerCopy in a catalog";
CATCCSModelHeader.PrtSaveInCatalog.ShortHelp             = "PowerCopy Save in Catalog";
CATCCSModelHeader.PrtSaveInCatalog.LongHelp              = "Save PowerCopy in a catalog";
// == Udf Feature Save ==
CATCCSModelHeader.PrtOpenCatalog.Title                 = "Catalog Browser";
CATCCSModelHeader.PrtOpenCatalog.Help                  = "Open the Catalog Browser";
CATCCSModelHeader.PrtOpenCatalog.ShortHelp             = "Open the Catalog Browser";
CATCCSModelHeader.PrtOpenCatalog.LongHelp              = "Open the Catalog Browser";
// =================================================
// Analyze
// =================================================
// == Sharp Faces == 
CATCCSModelHeader.CCSSharpFaces.Title		= "Sharp Faces...";
CATCCSModelHeader.CCSSharpFaces.Help		= "Analyzes the Sharp Faces";
CATCCSModelHeader.CCSSharpFaces.ShortHelp	= "Sharp Faces";
// CATCCSModelHeader.CCSSharpFaces.LongHelp	= 
// "Sharp Faces
// Analyzes the sharp faces of shapes.";
// == SmoothEdgesMode == 
CATCCSModelHeader.CCSSmoothEdgesMode.Title		= "Smooth Edges...";
CATCCSModelHeader.CCSSmoothEdgesMode.Help		= "Displays the smooth edges";
CATCCSModelHeader.CCSSmoothEdgesMode.ShortHelp	= "Display the smooth edges";
CATCCSModelHeader.CCSSmoothEdgesMode.LongHelp	= "Displays the smooth edges.";
// == BorderEdgesMode == 
CATCCSModelHeader.CCSBorderEdgesMode.Title		= "Surface Boundaries...";
CATCCSModelHeader.CCSBorderEdgesMode.Help		= "Displays the surface boundaries";
CATCCSModelHeader.CCSBorderEdgesMode.ShortHelp	= "Display the surface boundaries";
CATCCSModelHeader.CCSBorderEdgesMode.LongHelp	= "Displays the surface boundaries.";
// == Sectioning ==
CATCCSModelHeader.CCSSpaceSection.Title			= "Sectioning...";
CATCCSModelHeader.CCSSpaceSection.Help			= "Manages product sections and cuts";
CATCCSModelHeader.CCSSpaceSection.ShortHelp		= "Sectioning";
CATCCSModelHeader.CCSSpaceSection.LongHelp		= "Manages product sections and cuts";
// == Analyse Gaussienne ==
CATCCSModelHeader.CCSGaussCurvature.Title        = "Surfacic Curvature Analysis";
CATCCSModelHeader.CCSGaussCurvature.Help         = "Analyzes the Gaussian curvature on shape";
CATCCSModelHeader.CCSGaussCurvature.ShortHelp    = "Surfacic Curvature Analysis";
CATCCSModelHeader.CCSGaussCurvature.LongHelp     = 
"Gaussian Curvature
Maps a color texture on a surface
according to the curvature in each point.";
// == CurveConnectChecker == 
CATCCSModelHeader.CurveConnectChecker.Title		 = "Connect Checker Analysis...";
CATCCSModelHeader.CurveConnectChecker.Help		 = "Connect Checker Analysis";
CATCCSModelHeader.CurveConnectChecker.ShortHelp	 = "Performs a connection analysis";
CATCCSModelHeader.CurveConnectChecker.LongHelp	 = 
"Connect Checker Analysis
checks connections between surfaces/curves
and measures G0, G1, G2 and G3 deviations.";

// =================================================
// ToolBar Morphing
// =================================================
// == Preparation == 
CATCCSModelHeader.CCSDSMPreparation.Title       = "Displacement Optimization...";
CATCCSModelHeader.CCSDSMPreparation.Help        = "Displacement Optimization";
CATCCSModelHeader.CCSDSMPreparation.ShortHelp   = "Displacement Optimization";
CATCCSModelHeader.CCSDSMPreparation.LongHelp    = 
"Displacement Optimization
Optimizes the displacement vectors when the deformation is defined by a deviation analysis.";

CATCCSModelHeader.CCSShapeMorphing.Title       = "Digitized Morphing...";
CATCCSModelHeader.CCSShapeMorphing.Help        = "Digitized Morphing";
CATCCSModelHeader.CCSShapeMorphing.ShortHelp   = "Digitized Morphing";
CATCCSModelHeader.CCSShapeMorphing.LongHelp    = 
"Digitized Morphing
Computes Digitized Morphing.";

// == Update Digitized Morphing == 
CATCCSModelHeader.CCSCheckDSMFiles.Title       = "Update Digitized Morphing...";
CATCCSModelHeader.CCSCheckDSMFiles.Help        = "Update Digitized Morphing";
CATCCSModelHeader.CCSCheckDSMFiles.ShortHelp   = "Update Digitized Morphing";
CATCCSModelHeader.CCSCheckDSMFiles.LongHelp    = 
"Updates Digitized Morphing.";

// == DSM Cloud Filter == 
CATCCSModelHeader.DSMCloudFilter.Title       = "Vectors Field Filter...";
CATCCSModelHeader.DSMCloudFilter.Help        = "Vectors Field Filter";
CATCCSModelHeader.DSMCloudFilter.ShortHelp   = "Vectors Field Filter";
CATCCSModelHeader.DSMCloudFilter.LongHelp    = 
"Vectors Field Filter
Applies criteria to filter the field of vectors.";

// == Draft Analyse ==
CATCCSModelHeader.CCSAnalysis.Title         = "Pulling Direction Analysis...";
CATCCSModelHeader.CCSAnalysis.Help          = "Analyses the pulling direction on selected surfaces";
CATCCSModelHeader.CCSAnalysis.ShortHelp     = "Pulling Direction Analysis";
CATCCSModelHeader.CCSAnalysis.LongHelp      = 
"Pulling Direction Analysis
Maps a color texture on surfaces according to
the delta angle value between the normal vector
and the pulling direction on each surface point.";

// == Chaining Edges ==
CATCCSModelHeader.CCSChainingEdges.Title         = "Chaining Edges...";
CATCCSModelHeader.CCSChainingEdges.Help          = "Selects edges by automatic chaining";
CATCCSModelHeader.CCSChainingEdges.ShortHelp     = "Chaining Edges";
CATCCSModelHeader.CCSChainingEdges.LongHelp      = 
"Chaining Edges
Selects edges.";

// == Parting line editor ==
CATCCSModelHeader.CCSPartingLine.Title         = "Parting Line...";
CATCCSModelHeader.CCSPartingLine.Help          = "Editor of parting line";
CATCCSModelHeader.CCSPartingLine.ShortHelp     = "Parting line";
CATCCSModelHeader.CCSPartingLine.LongHelp      = 
"Parting Line 
Useful tools to create the parting line of a model.";

// == Parting line color ==
CATCCSModelHeader.CCSPLineColor.Title         = "Parting Line by Color...";
CATCCSModelHeader.CCSPLineColor.Help          = "Color areas parting line";
CATCCSModelHeader.CCSPLineColor.ShortHelp     = "Parting Line by Color";
CATCCSModelHeader.CCSPLineColor.LongHelp      = 
"Parting Line by Color
Useful tools to create the parting line of a model.";

// == Fill Faces ==
CATCCSModelHeader.CCSFillHoles.Title         = "Fill Surface...";
CATCCSModelHeader.CCSFillHoles.Help          = "Fill Surface";
CATCCSModelHeader.CCSFillHoles.ShortHelp     = "Fill Surface";
CATCCSModelHeader.CCSFillHoles.LongHelp      = 
"Fill Surface
Useful tools to fill the holes of a surface.";

// == Plug Faces ==
CATCCSModelHeader.CCSSliderHoles.Title         = "Plug Faces...";
CATCCSModelHeader.CCSSliderHoles.Help          = "Plug Faces";
CATCCSModelHeader.CCSSliderHoles.ShortHelp     = "Plug Faces";
CATCCSModelHeader.CCSSliderHoles.LongHelp      = 
"Plug Faces
Useful tools to plug the holes of faces.";

// == Invert== 
CATCCSModelHeader.CCSInvert.Title                   = "Invert Orientation...";
CATCCSModelHeader.CCSInvert.Help                    = "Inverts an element's orientation";
CATCCSModelHeader.CCSInvert.ShortHelp               = "Invert Orientation";
CATCCSModelHeader.CCSInvert.LongHelp                = 
"Invert Orientation
Inverts an element's orientation.";

// == Nearest == 
CATCCSModelHeader.CCSNear.Title                     = "Near...";
CATCCSModelHeader.CCSNear.Help                      = "Extracts the nearest element";
CATCCSModelHeader.CCSNear.ShortHelp                 = "Near";
CATCCSModelHeader.CCSNear.LongHelp                  =
"Near
Creates, from the multi-element, 
the element nearest to the reference element.";
// ========================================================================================
//			      		Commandes relatives au mode Work on Support
// ========================================================================================
CATCCSModelHeader.CATShapeDesignSetCurrentWS.Title            = "Set As Current";
CATCCSModelHeader.CATShapeDesignSetCurrentWS.Help             = "Sets the working support as current";
CATCCSModelHeader.CATShapeDesignSetCurrentWS.ShortHelp        = "Sets the working support as current";
CATCCSModelHeader.CATShapeDesignSetCurrentWS.LongHelp         = 
"Set As Current
Sets the working support as current.";
//
CATCCSModelHeader.CATShapeDesignSetNotCurrentWS.Title         = "Set As Not Current";
CATCCSModelHeader.CATShapeDesignSetNotCurrentWS.Help          = "Sets the working support as not current";
CATCCSModelHeader.CATShapeDesignSetNotCurrentWS.ShortHelp     = "Sets the working support as not current";
CATCCSModelHeader.CATShapeDesignSetNotCurrentWS.LongHelp      = 
"Set As Not Current
Sets the working support as not current.";
// == OnSupport== 
CATCCSModelHeader.CATShapeDesignShowGrid.Title                = "Work on Support";
CATCCSModelHeader.CATShapeDesignShowGrid.Help                 = "Allows working on support";
CATCCSModelHeader.CATShapeDesignShowGrid.ShortHelp            = "Work on Support";
CATCCSModelHeader.CATShapeDesignShowGrid.LongHelp             = 
"Work on Support
Allows working on a support plane or surface.";
// == OnSupport Activity ==
CATCCSModelHeader.CATShapeDesignChangeActivityWS.Title        = "Working Supports Activity";
CATCCSModelHeader.CATShapeDesignChangeActivityWS.Help         = "Allows activating/deactivating working supports";
CATCCSModelHeader.CATShapeDesignChangeActivityWS.ShortHelp    = "Working Supports Activity";
CATCCSModelHeader.CATShapeDesignChangeActivityWS.LongHelp     = 
"Working Supports Activity
Allows deactivating current working support when nothing is selected,
or activating/deactivating selected working support";
// ========================================================================================
//  ==  Wall  Thickness  Analysis    ==    
// ========================================================================================
CATCCSModelHeader.CCSWallThicknessAnalysisHeader.Title          =  "Wall  Thickness  Analysis";  
CATCCSModelHeader.CCSWallThicknessAnalysisHeader.Help            =  "Analysis  of  the  current  part  thicknesses";  
CATCCSModelHeader.CCSWallThicknessAnalysisHeader.LongHelp    =  "Analysis  of  the  current  part  thicknesses.  \nProvides  capability  to  display  symbolic  geometry  \nand  numerical  characteristics.";  
CATCCSModelHeader.CCSWallThicknessAnalysisHeader.ShortHelp  =  "Wall  Thickness  Analysis";  

// =================================================
// Face Wizard
// =================================================
CATCCSModelHeader.CCSColorFace.Title		= "CCSColorFace";
CATCCSModelHeader.CCSColorFace.Help		   = "CCSColorFace";
CATCCSModelHeader.CCSColorFace.ShortHelp  = "CCSColorFace";

CATCCSModelHeader.CCSFaceWizard.Title		= "Face Color Editor...";
CATCCSModelHeader.CCSFaceWizard.Help		= "Changes the color of faces";
CATCCSModelHeader.CCSFaceWizard.ShortHelp	= "Face Color Editor";
CATCCSModelHeader.CCSFaceWizard.LongHelp	= 
"Face Color Editor
Changes the color of the selected faces";

// =================================================
// Middle point
// =================================================
CATCCSModelHeader.CCSMiddlePoint.Title		 = "Middle Point...";
CATCCSModelHeader.CCSMiddlePoint.Help		 = "Creates the middle point of a curve";
CATCCSModelHeader.CCSMiddlePoint.ShortHelp = "Middle Point";
CATCCSModelHeader.CCSMiddlePoint.LongHelp	 = 
"Middle Point
Creates the middle point of an open and limited curve";


// ========================================================================================
// == Core&Cavity Design-














