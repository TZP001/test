//------------------------------------------------------
// Resource file for topological operator errors 
// En_EN
//------------------------------------------------------
// CKN ??/??/?? Creation
// NLD 05/12/01 TopOpInSweepInternalError_ERR_7504,
//              TopOpInAllTopo_ERR_7505,
//              TopOpInAllGeo_ERR_7506
// AOV 15/03/02 TopOpInLineGeodesicPtPt+TopOpInSimilarCurve
// ALV 04/04/02 TopOpInPointOnVertex_ERR_6312
// ALV 10/04/02 Ajout des erreurs 6821-6849- Plane
//              TopOpInRotationAxisNotParallel_ERR_6821 
// ALV 09/01/03 TopOpInLineTooSmallLength_ERR_6005
//              TopOpInCircleRadiusTooShort_ERR_6778
// CCK 24/10/03 TopOpInSweepTooSharp_ERR_7030
// NLD 24/10/03 TopOpInSweepSmallEdge_ERR_7031
// NLD 24/10/03 TopOpInSweepNoKeptArea_ERR_7032
// JSX 07/11/03 TopOpInExtrapolLostOfDir_ERR_7033
// RNO 18/02/04 TopOpIntCleanCrvOutputG0BiggerInputG0_ERR_6506
// NLD 18/02/04 TopOpInSweepInternalProfileInReport_ERR_7034
// NLD 02/03/04 TopOpInSweepInvalidCenterCurveWarning_ERR_7035
// NLD 02/03/05 Modification Advice ERR_7003 
// FDS 16/03/04 TopOpInCloseOperator_ERR_6851.
// FDS 07/04/04 TopOpInShellFromClosedWireOperator_ERR_6880.
// NLD 13/05/04 Modification Advice TopOpInMaxGapDetection_ERR_5012
//              et TopOpInTangencyMaxGapDetection_ERR_5013
//              Suppression des \n superflus dans messages
//              7011,7023, 7024, 7025, 7028, 7030, 7031
//              Ajout TopOpInSweepCheckGapWarning_ERR_7036
// OAU 14/05/04 Add warning     TopOpInDistanceMaxWarning_ERR_5019
//                              TopOpInDistanceMaxWarning_ERR_5020
//                              TopOpInDistanceMaxWarning_ERR_5021
//                              TopOpInUnFoldedAero_ERR_6902
//                              TopOpInUnFoldedAero_ERR_6903
// OAU 14/05/04 Add             TopOpInUnFoldedAero_ERR_6904
//                              TopOpInUnFoldedAero_ERR_6905
// AJM 19/05/04 Added           TopOpIntBodyCheckInvalidCurvatureCurve_MSG
//                              TopOpIntBodyCheckInvalidCurvatureSurface_MSG
//                              TopOpIntBodyCheckSelfIntersectionShell_MSG
// NLD 11/06/04 TopOpInSweepCheckExternalTangencyWarning_ERR_7037
// OAU 03/06/04 Added           TopOpInUnFoldedAero_ERR_6906
//                              TopOpInUnFoldedAero_ERR_6907
// NLD 30/06/04 TopOpInSweepImpossibleCleanWarning_ERR_7038
//              TopOpInSweepProfileNearC0Vertex_ERR_7039
// NLD 22/07/04 TopOpInGeoCheck_ERR_7507
// NLD 28/07/04 TopOpInNotLyingOn_ERR_7040
//              TopOpInPtNotLyingOnWire_ERR_7041
//              TopOpInPtNotLyingOnShell_ERR_7042
// ALV 11/08/04 Ajout d'erreur pour la création de plan.
//              TopOpInBasicBodyPlanar_ERR_6824...
//             .TopOpInBasicBodyPlanar_ERR_6826
// ALV 16/08/04 TopOpInTrimmedCorner_ERR_6322
// NLD 20/09/04 TopOpInSweepNonC2NotAvailable_ERR_7043
// OAU 28/09/04 Added           TopOpInUnFoldedAero_ERR_6908
// NLD 08/10/07 TopOpInHybOpNullWireComputed_ERR_7562
//              TopOpInHybOpNullEdgeInComputedWire_ERR_7563
//              TopOpInSweepNullHomogenizedWire_ERR_7044
//              TopOpInSweepNullEdgeInHomogenizedWire_ERR_7045
// NLD 28/10/04 TopOpInSweepSmallEdgeFromInitialGuide_ERR_7046
//              TopOpInSweepSmallEdgeFromInitialProfile_ERR_7047
//              TopOpInSweepSmallEdgeFromFinalGuide_ERR_7048
//              TopOpInSweepSmallEdgeFromFinalProfile_ERR_7049
// NLD 04/11/04 TopOpInSweepProfileOrderWarning_ERR_7050
// ALV 07/12/04 TopOpInTritangentCorner_ERR_6323
// JSX 21 12 04 TopOpInHybOpTooLowCGMLevelForOption_ERR_7564
// ALV 05/01/05 TopOpInCornerInternalError_ERR_6324
//              TopOpInCornerParallelError_ERR_6325
// NLD 24/12/04 TopOpInBlendTwist_ERR_7084
// NLD 12/01/05 TopOpInLoftNoIntersection_ERR_7052 duplication de GeoOpInLoftNoIntersection_ERR_3008
// NLD 31/01/05 TopOpInSweepC0Point_ERR_7053 duplication de GeoOpInSweepC0Point_ERR_3028
// NLD 31/01/05 TopOpInSweepC0MeridianCurve_ERR_7054 duplication de GeoOpInSweepC0MeridianCurve_ERR_3029
// NLD 02/02/05 TopGeoOpInSweepEdgeCurveCreation_ERR_7055 duplication de GeoOpInSweepEdgeCurveCreation_ERR_3031
// NLD 24/02/05 TopOpInSweepTopologicalWrap_ERR_7056
// OAU 14/02/05 ajout TopOpInUnFoldedAero_ERR_6909
// FDS 16/03/05 TopOpIntRefFaceNeeded_ERR_8000 , TopOpIntInitialEdgeNotOnBorder_ERR_8001 , 
//              TopOpInCloseOperator_ERR_6852
// NLD 30/03/05 TopOpInSweepDraftDirNotNormalToNonG1SpinePlane_ERR_7057
// JSX 16/05/05 TopOpInExtrapolationNegativeLength_Err7085
// NLD 01/06/05 TopOpInSweepCheckDeviationFromProfile_ERR_7058
//              TopOpInSweepCheckDeviationFromGuide_ERR_7059
// NLD 02/06/05 TopOpInSweepEdgeLyingOnSharpEdge_ERR_7060
//              TopOpInSweepGuidesHomogenization_ERR_7061
//              TopOpInSweepProfilesHomogenization_ERR_7062
// NLD 19/07/05 TopOpInBlendCurvatureContinuityAskedOnInternalEdge_ERR_7086
//              TopOpInExtrapolationNegativeLength_Err7085 devient TopOpInExtrapolationNegativeLength_ERR_7085
// BQJ 15/11/05 Added           TopOpIntBodyCheckTopologicalEdgeLength_MSG
// FDS 20/01/06 TopOpIn3DCorner_ERR_6326
// FDS 26/01/06 TopOpInSweepEmptyResult_ERR_7064
// OAU 17/02/06 ajout TopOpInUnFoldedAero_ERR_6910
// OAU 03/05/06 Added TopOpInUnFoldedAero_ERR_6911
// OAU 03/05/06 Added TopOpInUnFoldedAero_ERR_6912
// FDS 11/07/06 Generalisation du message TopOpInLineNormalTwoPoints_ERR_6006
// DPS 10/07/06 Added TopOpInRoughOffset_ERR_6975, TopOpInRoughOffset_ERR_6976
// NLD 05/10/06 TopOpInSweepEdgeNotInMFPlane_ERR_7065
// NLD 19/10/06 TopOpInSweepImplicitProfileEvaluation_ERR_7066
// DPS 08/11/06 Added TopOpInRoughOffset_ERR_6977, ..._6978, ..._6979, ..._6980
// BQJ 06/11/06 Added TopOpInDraftBothSideG1_ERR_6182
// BQJ 04/12/06 Added TopOpInMaximumBothSideDraft_ERR_6183
// NLD 15/01/07 TopOpInSweepGeometricalWrap_ERR_7067
// NLD 20/02/07 TopOpInSweepFillWithoutTangency_ERR_7068
// FSQ 21/03/07 TopOpInDistanceCalcWarningSucceeded_ERR_5023
// FSQ 21/03/07 TopOpInDistanceCalcWarningFailed_ERR_5024
// FSQ 21/03/07 TopOpInDistanceCalcWarningReconvergedOutOfShell_ERR_5025
// FSQ 21/03/07 TopOpInDistanceCalcWarningOnlyProjectedSol_ERR_5026
// JSX 03/04/07 TopOpSweepInRuledDevelopMultiEdge_ERR_7087
// FDS 03/04/07 TopOpIntInvalidTolerance_ERR_8002
// GPV 04/06/07 TopOpInTrimmedCorner_ERR_6322 : modif du message (trim incompatible avec mode complet ou complementaire)
// IZE 20/09/07 TopOpInAutoFilletNonManifold_ERR_8061
// JSX 07/02/08 TopOpInSurfaceUnfoldRuledNonCstTgtPlaneOnRule_ERR_7669
// IZE 29/05/08 TopOpInParallelReorderingPb_WNG_6327
// JSX 18/06/08 TopOpInBlendAvoidTwist_ERR_7088
// MPX 05/03/09 TopOpInWTANonManifold_ERR_8251, TopOpInWTAVolumeContainsFreeEdge_ERR_8252
// NLD 18/01/10 TopOpInSweepImpossibleLawExtrapolation_ERR_7069
// NLD 05/03/10 TopOpInSweepRelimitedGuide_WNG_7070
// JSX 08/03/10 TopOpInWireDevelop reservation  // 8351-8370
// NLD 10/03/10 TopOpInSweepIgnoredSpec_WNG_7071
// NLD 28/10/10 TopOpInSweepInvalidProfilePosition_ERR_7072
//------------------------------------------------------
//
//----------------------------------Null input
//
TopOpInNull =
     "Topological operators: the pointer to an input data is null. 
 Define this data or check that the pointer has not been desallocated.";
//
TopOpInNullProfileBody =
     "Topological operators: the profile body pointer is null.";
//
TopOpInInvalidProfileBody =
     "Topological operators: invalid profile body.";
//
TopOpInNonConnexCenterBody =
     "Topological operators: error in Sweep Generation. The center-curve is not a connex body.";
//
TopOpInNullCenterBody =
     "Topological operators: the center body pointer is null.";
//
TopOpInInvalidOperator=
     "Topological operators: the input operator is null or invalid.";
//
//----------------------------------Non manifold configuration
//
TopOpInNonManifold =
     "Topological operators: illegal attempt to process a non-manifold configuration.";
//
//----------------------------------Invalid dimension
//
TopOpInInvalidDimension=
     "Topological operators: the body dimension is invalid. 
Use a body of dimension /p1 for this operation.";
//
TopOpInInvalidBodySize=
        "Topological operators: the input body has several domains or is empty. 
         Choose a body with one domain for this operation.";
//
TopOpInInvalidCenterDimension =
     "Topological operators: 
the center body must be a manifold wire.";
//
TopOpInInvalidShellOperand =
    "Topological operators: points and wires can not be used for a shell or a thickness operation.";
//
//----------------------------------geometry and topology
//
//
TopOpInInvalidGeometry=
    "Topological operators: impossible relimitation on the main part.
     - Change the specifications.";
//
TopOpInNoIntersection=
    "Topological operators: impossible relimitation on the main part.
     - No intersection with relimiting body in this direction";
//
// NLD 28/07/04 
//### utiliser de preference ###
//              TopOpInNotLyingOn_ERR_7040
//              TopOpInPtNotLyingOnWire_ERR_7041
//              TopOpInPtNotLyingOnShell_ERR_7042
//
TopOpInNotLyingOn=
    "Topological operators: an input wire does not lie on the shell support.
     - Project it on the support, and use this projection.";
//
TopOpInPtNotLyingOnWire=
    "Topological operators: an input point does not lie on the wire support.
     - Project it on the support, and use this projection.";
//
TopOpInPtNotLyingOnShell=
    "Topological operators: an input point does not lie on the shell support.
     - Project it on the support, and use this projection.";
//
TopOpInTooSmallLength=
    "Topological operators: the input line is too short. 
 A topological edge cannot be created on it.
 - Use a line which length is greater than the geometric factory resolution.";
//
TopOpInTooCloseLimits=
    "Topological operators: the limits given on the input line define a too short segment.
A topological edge cannot be created on it.
- Use limits defining a curvilinear length greater than the geometric factory resolution.";
//
//
//----------------------------------geometry quality 
//
//  p1 is the topological object type
//  p2 is the level of the object continuity
//  P3 is the operator name
//  P4 is the minimum requested continuity
//
TopOpInDiscontinuousGeometry=
    "Topological Operators: the /p1 is only G/p2 continuous: 
the /p3 operator needs G/p4 continuous /p1 at least.
- Use a more regular geometric object"; 
//
//----------------------------------Divers
//
TopOpInNonConnectedBody=
     "Illegal attempt to process a body that is not piecewise connected.";
//
TopOpInTooLargeGapBody=
     "Topological operators: a too large gap is detected in the geometry of the input body. 
  The topological operation cannot be run on this body.";
//
TopOpInNonFrozenBody=
     "Topological operators: a problem is detected in the topological definition of the input body. 
  Assure that your input body has already been checked.";
//
TopOpInOffsetValue=
     "Topological operators: the offset value used in the shell or thickness operation is bigger than the surface curvature. 
Decrease this value.";
//------------------------------------------------------
// Resource file for internal topological operator errors 
// En_EN
//
TopOpIntDisconnect =
       "Disconnect operator: internal error.";
//
TopOpIntShell =
       "Shell operator: internal error.";
//
TopOpIntNotImplemented =
       "Topological operators: this function is not implemented yet.";
//
TopOpIntBadTopology =
       "Topological operators: an internal error leads to a bad topological configuration.";
//
TopOpIntBadGeometry =
       "Topological operators: an internal error leads to a bad geometrical configuration.";
//
TopOpIntMath =
       "Topological operators: error /p1 in the mathematical package.";
//
// same message as TopOpInAllTopo_ERR_7505
TopOpIntAllTopo =
        "Topological operators: internal error /P1. ";
//
// same message as TopOpInAllGeo_ERR_7506
TopOpIntAllGeo =
        "Topological operators: internal error /P1 using the geometrical package.";
//
TopOpIntAllocation =
        "Topological operators: allocation failed.";
//
TopOpIntInvalidInput =
        "Topological operators: an input argument is invalid.";
//
TopOpIntInvalidType =
        "Topological operators: the type of an input element is invalid.";
//
TopOpIntEmptyResult =
        "Topological operators: the result of your operation is empty.";
//
//
//------------------------------------------- error shell
TopOpInShellEmptyResultDueToOpenings =
        "Shell operator: all the body's faces have been selected as faces to remove.
Result will be empty. This may be due to automatic tangency propagation.";
//
TopOpIntShellSurfaceExtrapolation =
        "Shell operator: surface extrapolation failed.
Change the thickness value.";
//
TopOpIntShellCurveExtrapolation =
        "Shell operator: curve extrapolation failed.
Change the thickness value.";
//
TopOpIntShellCurrentVersion =
        "Shell or Thickness operator: the result cannot be assembled.
Decrease the thickness values.";
//
TopOpIntShellSelfIntersectingGraphForDisco2D =
        "Shell or Thickness operator: a too small edge is detected.";
//
TopOpIntShellSideFace =
        "Shell or Thickness operator: a side face cannot be computed.
- This may be due to the shape of the boundary of the face to shell.";
//
//------------------------------------------- error ribbon
TopOpInRibbonNullRadius =
	"Fillet operator: a null radius constraint is not allowed
inside the selected edges.
 - Remove this null radius constraint
or put a strictly positive one.";
//
TopOpInRibbonMultipleSelection =
"Fillet operator: an edge has been selected twice, leading to an ambiguous interpretation of your selection. \n
- Select the edges such that each edge is taken only once. ";
//
TopOpInRibbonVariableSelection =
"Variable fillet operator: the selection defines several fillet operations, 
due to some discontinuities of the edges. 
This cannot be treated by the variable fillet operator. \n
- Perform the different fillet operations separately. ";
//
TopOpIntRibbonOrder =
"Fillet operator: the selection defines several fillet operations that cannot be ordered. \n
- Perform the different fillet operations separately. ";
//
TopOpIntRibbonInternalError =
        "Internal error.";
//
TopOpIntTwistedRibbon =
        "Twisted ribbon. 
One of the parameters is too large. 
  - Fillet: decrease the radius. 
  - Chamfer: decrease the length of the chamfer or modify the angle.
  - Draft: decrase the angle.";
//
TopOpIntInterruptedRibbon =
        "Interrupted ribbon. 
A connection problem occurs between two faces of the ribbon.
  - Fillet: decrease the radius. 
  - Chamfer: decrease the length of the chamfer or modify the angle.
  - Draft: modify the angle. 
  - Modify the geometry on which the ribbon is computed.";
//
TopOpIntRibbonRelimitation =
        "Impossible relimitation. 
The local topology or geometry is too complex.
  - Fillet: decrease the radius. 
  - Chamfer: decrease the length of the chamfer  or modify the angle.
  - Draft: modify the angle.";
//
TopOpIntRibbonLocalReorder =
        "Fillet or Chamfer operator: impossible to create a corner.
  - Reorder the fillet or chamfer operations from the lowest values
of the parameters to the highest values.";
//
TopOpIntRibbonInitialization =
        "Cannot initialize the operation.
  - Change the values of the parameters.
  - Change the operands of the operation.";
//
TopOpIntRibbonBadNumberOfFaces=
"Error in the ribbon operation: 
bad number of faces.";
//
TopOpIntRibbonBadNumberOfEdges=
"Error in the ribbon operation:
bad number of edges.";
//
TopOpIntRibbonBadNumberOfRadii=
"Error in the ribbon operation: 
bad number of radii.";
//
TopOpIntRibbonNoExtrapolation =
"Error in the ribbon operation: 
an extrapolation information is missing.";
//
TopOpIntRibbonNoGeometry =
"Error in the ribbon operation: 
no geometry, check your inputs.";
//
TopOpIntRibbonTooManySolution =
"Error in the ribbon operation: 
too many solutions.";
//
//------------------------------------------- error draft
TopOpIntDraftInternalError =
        "Internal error.  ";
//
TopOpIntTwistedDraft =
        "The generated ribbon surface is twisted. 
 - Decrease the parameter value.";
//
TopOpIntInterruptedDraft =
        "Interrupted ribbon.
A connection problem occurs between two generated faces.
  - Decrease the parameter value. 
  - Modify the geometry on which the operation is computed. ";
//
TopOpIntDraftRelimitation =
        "Impossible relimitation. 
The local topology or geometry is too complex.
  - Decrease the parameter value.";
//
TopOpIntDraftInitialization =
        "Cannot initialize the operation.
  - Change the operands (selected face(s), numerical parameters, ...) of the operation.";
//
//------------------------------------------- error sweep
TopOpIntSweepInternalError =
        "Sweep operator: internal error.";
//
TopOpInAxisProfileIntersection =
        "Revolute operator: the profile is intersecting the axis.
         Choose another profile or axis.";
//
TopOpInProfilePerpendicularToAxis=
        "Revolute operator: the profile is locally perpendicular to the direction
         between the profile and the axis.
         The revolution cannot be defined at that place.
         Choose a profile and an axis that do not give an auto - intersected revolute primitive.";
//
TopOpInProfileParallelToDirection=
        "The profile is locally parallel to the extrusion direction.
         The extrusion cannot be defined at that place.
         Choose a profile and a direction that are not parallel.";
//
TopOpInProfileOrientationChanging=
        "The profile relative orientation to the extrusion direction is changing around vertex.
         The extrusion cannot be defined at that place.
         Choose a profile and a direction that are compatible.";
//
TopOpInProfileRevoluteOrientationChanging=
        "The profile relative orientation to the local revolution direction is changing around vertex.
         The revolution cannot be defined at that place.
         Choose a profile and a direction that are compatible.";
//
TopOpInExtrudeTwistedProfile=
        "Extrusion operator: a selected contour is self intersecting.
         This configuration cannot be used in a extrusion operator.
         Choose a wire that is not self intersecting.";
//
TopOpInExtrudeOverlappingProfiles=
        "Extrusion operator: two contours have an overlapping aera.
         This configuration cannot be used in a extrusion operator.
         Change your selected contours.";
//
TopOpInExtrudeCuspProfile=
        "Extrusion operator: a contour has a cusp.
         This configuration cannot be used in a extrusion operator.
         Choose a more regular contour.";
//
TopOpInExtrudeOpenProfile=
        "Extrusion operator: a contour is open.
         This configuration cannot be used in a extrusion operator.
         Select closed contours.";
//
TopOpIntExtrudeEmptyWire=
        "Extrusion operator: a selected wire does not contain any cell.
         Choose another wire.";
//------------------------------------------- error close
TopOpInCloseNonPlanarOpening=
         "Close operator: an opening in the selected body cannot be closed
		 by a planar face. Check all body openings for planarity.";
//
TopOpIntCloseInternalError=
        "Close operator: internal error.";
//
TopOpInCloseInvalidOpening=
         "Close operator: an opening in the selected body cannot be closed
		 by one single planar face. Modify the part.";
//------------------------------------------- error boundary
TopOpInBoundaryClosedBody=
         "Boundary operator: the selected body is closed, it has no boundary.
          It is the case of a sphere as an exemple.
          Select an open body.";
TopOpInBoundaryImmersedCell=
         "Boundary operator: the selected cell does not belong to the body
          or to the boundary of the body (immersed cell). 
          Select a cell of the boundary of the body.";
//------------------------------------------- error loft
TopOpInLoftOutsideProjection=
"Loft operator: the projection of a point of a section or a guide is outside the spine limits.
  The homogenization of the guide cannot be done.
  - Extend the spine.";
//
TopOpInLoftNonPlanarSection=
"Loft operator: some intersection points between a section and all the guides 
  are not in a plane normal the the loft spine, although they must be.
  - Modify the section.";
//
// remplace par TopOpInSweepProfilesHomogenization_ERR_7062 le 02/06/05
TopOpIntLoftSectionHomogenization=
"Loft operator: impossible to homogenize the sections before the loft computation.";
//
// remplace par TopOpInSweepGuidesHomogenization_ERR_7061 le 02/06/05
TopOpIntLoftGuideHomogenization=
"Loft operator: impossible to homogenize the guides before the loft computation.";
//
//------------------------------------------- error fill
TopOpInFillNormal=
"Fill operator: supports do not have the same normal at their contact points.
  - Check the normals at the contact points, and modify the supports.";
//
//------------------------------------------- error corner and parallel
//
TopOpInCornerOutsideSupport=
"Corner or parallel operators: the resulting corner or the resulting parallel overhang the supporting shell .
  - Extend the support.";
//
TopOpInCornerDegenerated=
"Corner operator: the resulting corner degenerates into a point, and cannot be created.
  - Change the imposition point, or create it by defining it radius.";
//
TopOpIntCornerTooManySolutions=
"Corner operator: the operator finds no or several solutions.
- Select another center, 
- or Intersect directly a sphere with the support and choose an intersection.";
//
TopOpIntCornerRelimitation=
"Corner operator: impossible relimitation.";
//
TopOpInCornerNotAvailable=
"Corner operator: you cannot create a corner by defining start and end angles.
- Create it by defining a radius and relimit it directly.";
//
TopOpInParallelExtrapolation=
"Parallel operator: the extrapolated parallels do not intersect.
- there is maybe a sharp angle and an outside parallel.";
//
TopOpInParallelRelimitation=
"Parallel operator: there are too many (or not any) intersections between the extrapolations.
- Cut the input wire.";
//
TopOpInParallelLoop=
"Parallel operator: there are too many intersections between the parallels.
The resulting wire maybe defines a loop. 
- Decrease the offset value";
//
//-------------------------- 
//
TopOpIntStylingFilletTriangularBreak=
"Styling fillet operator: one surface cannot be broken.
- Extrapolate the surfaces.";
//
TopOpInInvalidSurface=
     "Topological operator: the surfaces used for this operation must be Nurbs surfaces. 
- Convert the surfaces into Nurbs surfaces.";
//
//  new-
// 5000-  Common
// 6000-6024- Line
// 6025-6049- Point
// 6050-6099- Extrapolation
// 6100-6149- fillet
// 6150-6199- draft
// 6200-6249- helix
// 6250-6299- split-trim
// 6300-6349- corner-parallel
// 6350-6399- concatenation
// 6400-6449- PConic
// 6450-6499- Lay Down
// 6500-6549- clean curve (smooth curve)
// 6550-6599- Shell/Thickness/Thick-Offset-Extrapolate Surface 
// 6600-6649- HybOperator
// 6650-6699- PolarExtremum
// 6700-6749- spiral
// 6750-6773- spline
// 6774-6799- circle
// 6800-6820- wirecontinuity
// 6821-6849- Plane
// 6850-6879- Close Operator
// 6880-6899- Shell from close wire Operator
// 6900-6949- UnFoldedAeroOperator
// 6950-6974- Operator Regul Offset
// 6975-6999- Rough Offset
// 7000-7099- sweep and loft
// 7500       internal error
// 7550-7599- Hybrid Operators
// 7600-7620- Wrap -Surface / Wrap Curve Blend
// 7630-7659- Variable Offset
// 7660-7670- Unfold
// 7671-7680- FrFShellUnfold
// 7700-7729- Variable Offset (... continuation)
// 8000-8050- EdgePropagate
// 8051-8100- Fillet (...continuation )
// 8101-8150- AutoDraft
// 8151-8200- AutoFillet
// 8201-8250- Pattern
// 8251-8300- Wall Thickness Analysis
// 8301-8350- Silhouette
//
TopOpInNotPlanar_ERR_5001.Request="Topological operator:";
TopOpInNotPlanar_ERR_5001.Diagnostic="The selected support is not a planar shell.";
TopOpInNotPlanar_ERR_5001.Advice="Select a support whose geometry is a plane.";
//
TopOpInMultiSurfaces_ERR_5002.Request="Topological operator:";
TopOpInMultiSurfaces_ERR_5002.Diagnostic="The selected support references several different geometric surfaces.";
TopOpInMultiSurfaces_ERR_5002.Advice="Select a support which references only one geometric surface.";
//
TopOpInCuspContour_ERR_5003.Request="Topological operator:";
TopOpInCuspContour_ERR_5003.Diagnostic="A selected contour has a cusp, leading to a singular solution.";
TopOpInCuspContour_ERR_5003.Advice="Select a more regular geometry.";
//
TopOpInInitialization_ERR_5004.Request="Topological operator:";
TopOpInInitialization_ERR_5004.Diagnostic="Cannot initialize the operation.";
TopOpInInitialization_ERR_5004.Advice="Change at least one of the operands.";
//
TopOpInClosedWire_ERR_5005.Request="Topological operator:";
TopOpInClosedWire_ERR_5005.Diagnostic="A closed wire cannot be used in this operation.";
TopOpInClosedWire_ERR_5005.Advice="Use an open wire.";
//
TopOpInNotLinear_ERR_5006.Request="Topological operator:";
TopOpInNotLinear_ERR_5006.Diagnostic="The selected element is not a linear wire.";
TopOpInNotLinear_ERR_5006.Advice="Select a wire whose geometry is a line.";
//
TopOpInMultiCurves_ERR_5007.Request="Topological operator:";
TopOpInMultiCurves_ERR_5007.Diagnostic="The selected wire references several geometric curves.";
TopOpInMultiCurves_ERR_5007.Advice="Select a wire that references only one geometric curve.";
//
TopOpInNonC0Law_ERR_5008.Request="Topological operator:";
TopOpInNonC0Law_ERR_5008.Diagnostic="The selected law is not continuous.";
TopOpInNonC0Law_ERR_5008.Advice="Use several continuous laws instead.";
//
TopOpInNonWireBody_ERR_5009.Request="Topological operator:";
TopOpInNonWireBody_ERR_5009.Diagnostic="The input body is not made of wires.";
TopOpInNonWireBody_ERR_5009.Advice="Use a body only containing wires.";
//
TopOpInInvalidPointOnWire_ERR_5010.Request="Topological operator:";
TopOpInInvalidPointOnWire_ERR_5010.Diagnostic="An input point is defined on a wire body.";
TopOpInInvalidPointOnWire_ERR_5010.Advice="Choose a point that is not on an input wire body.";
//
TopOpInWarning_ERR_5011.Request="Topological operator:";
TopOpInWarning_ERR_5011.Diagnostic="Warning Generic Error";
TopOpInWarning_ERR_5011.Advice="Warning";
//
// N.B Ce message est utilise pour la detection standard CGM a 0.1
// mais plus pour la detection plus fine dans le sweep a 0.001.  NLD130504
// N.B voir aussi 7036 pour sweep
TopOpInMaxGapDetection_ERR_5012.Request="Topological operator:";
TopOpInMaxGapDetection_ERR_5012.Diagnostic="Internal gap detected in resulting topology.";
TopOpInMaxGapDetection_ERR_5012.Advice="Modify the parameter value(s) or tolerant modelling parameter value(s) (if any)
or change the operand(s).";
//
TopOpInTangencyMaxGapDetection_ERR_5013.Request="Topological operator:";
TopOpInTangencyMaxGapDetection_ERR_5013.Diagnostic="Internal tangency discontinuity detected in resulting topology.";
TopOpInTangencyMaxGapDetection_ERR_5013.Advice="Modify the parameter value(s) or tolerant modelling parameter value(s) (if any)
or change the operand(s).";
//
TopOpInDistanceMinIntersectionToInfinite_ERR_5014.Request="Topological Operator of Minimal Distance:";
TopOpInDistanceMinIntersectionToInfinite_ERR_5014.Diagnostic="There is not local minimum between the two infinite elements.";
TopOpInDistanceMinIntersectionToInfinite_ERR_5014.Advice="In this case, use relimited elements.";
//
TopOpInNotWire_ERR_5015.Request="Topological operator:";
TopOpInNotWire_ERR_5015.Diagnostic="Body Is not a Wire.";
TopOpInNotWire_ERR_5015.Advice="Use Wire as input.";
//
TopOpInNotShell_ERR_5016.Request="Topological operator:";
TopOpInNotShell_ERR_5016.Diagnostic="Body Is not a Shell.";
TopOpInNotShell_ERR_5016.Advice="Use Shell as input.";
//
TopOpInNotVertex_ERR_5017.Request="Topological operator:";
TopOpInNotVertex_ERR_5017.Diagnostic="Body Is not a Vertex.";
TopOpInNotVertex_ERR_5017.Advice="Use Vertex as input.";
//
TopOpInDistanceMaxWarning_ERR_5018.Request="Topological Operator of Maximal Distance:";
TopOpInDistanceMaxWarning_ERR_5018.Diagnostic="Distance Max succeeded.";
TopOpInDistanceMaxWarning_ERR_5018.Advice="";
//
TopOpInDistanceMaxWarning_ERR_5019.Request="Topological Operator of Maximal Distance:";
TopOpInDistanceMaxWarning_ERR_5019.Diagnostic="Distance Max failed.";
TopOpInDistanceMaxWarning_ERR_5019.Advice="";
//
TopOpInDistanceMaxWarning_ERR_5020.Request="Topological Operator of Maximal Distance:";
TopOpInDistanceMaxWarning_ERR_5020.Diagnostic="Reconverged out of the shell.";
TopOpInDistanceMaxWarning_ERR_5020.Advice="";
//
TopOpInDistanceMaxWarning_ERR_5021.Request="Topological Operator of Maximal Distance:";
TopOpInDistanceMaxWarning_ERR_5021.Diagnostic="Only projected solution.";
TopOpInDistanceMaxWarning_ERR_5021.Advice="";
//
TopOpInProjection_ERR_5022.Request="Topological point on curve creation : ";
TopOpInProjection_ERR_5022.Diagnostic="Impossible situation , projection of the reference point gives several equidistant solutions.";
TopOpInProjection_ERR_5022.Advice="Modify your reference point";
//
TopOpInDistanceCalcWarningSucceeded_ERR_5023.Request="Topological Operator of Distance Calculation:";
TopOpInDistanceCalcWarningSucceeded_ERR_5023.Diagnostic="Distance Calc succeeded.";
TopOpInDistanceCalcWarningSucceeded_ERR_5023.Advice="";
//
TopOpInDistanceCalcWarningFailed_ERR_5024.Request="Topological Operator of Distance Calculation:";
TopOpInDistanceCalcWarningFailed_ERR_5024.Diagnostic="Distance Calc failed.";
TopOpInDistanceCalcWarningFailed_ERR_5024.Advice="";
//
TopOpInDistanceCalcWarningReconvergedOutOfShell_ERR_5025.Request="Topological Operator of Distance Calculation:";
TopOpInDistanceCalcWarningReconvergedOutOfShell_ERR_5025.Diagnostic="Reconverged out of the shell.";
TopOpInDistanceCalcWarningReconvergedOutOfShell_ERR_5025.Advice="";
//
TopOpInDistanceCalcWarningOnlyProjectedSol_ERR_5026.Request="Topological Operator of Distance Calculation:";
TopOpInDistanceCalcWarningOnlyProjectedSol_ERR_5026.Diagnostic="Only projected solution.";
TopOpInDistanceCalcWarningOnlyProjectedSol_ERR_5026.Advice="";
//
// 6000-6024 Line
TopOpInLineIdenticalPoints_ERR_6001.Request="Topological line operator:";
TopOpInLineIdenticalPoints_ERR_6001.Diagnostic="The operator cannot determine two distinct points
to compute the line.";
TopOpInLineIdenticalPoints_ERR_6001.Advice="This may be due to:\n
- An input point belonging to the input line;\n
- Same input points.";
//
TopOpInLineMultipleSolution_ERR_6002.Request="Topological line creation:";
TopOpInLineMultipleSolution_ERR_6002.Diagnostic="The operator finds a non discrete list of solutions: 
an input point is maybe in alignement with a linear section of the input curve.";
TopOpInLineMultipleSolution_ERR_6002.Advice="Change your input point.";
//
TopOpInLineOnSupport_ERR_6003.Request="Topological line on support creation:";
TopOpInLineOnSupport_ERR_6003.Diagnostic="The operator does not find any solution.";
TopOpInLineOnSupport_ERR_6003.Advice="A solution may exist outside the support, invert the line direction.";
//
TopOpInLineOnSupportDirection_ERR_6004.Request="Topological line on support creation:";
TopOpInLineOnSupportDirection_ERR_6004.Diagnostic="The Line Direction is not on tangent plane of support.";
TopOpInLineOnSupportDirection_ERR_6004.Advice="Choose a direction on the tangent plane of support.";
//
TopOpInLineTooSmallLength_ERR_6005.Request="Topological line operator:";
TopOpInLineTooSmallLength_ERR_6005.Diagnostic="Length of one line's element is too small, the operator cannot compute the line.
This may be due to:
  - An input vector is too short;
  - Same input points;
  - Input line's length too short.";
TopOpInLineTooSmallLength_ERR_6005.Advice="Change your input";
//
TopOpInLineNormalTwoPoints_ERR_6006.Request="Topological line creation :";
TopOpInLineNormalTwoPoints_ERR_6006.Diagnostic="There is more than one point at extremity to build the line.";
TopOpInLineNormalTwoPoints_ERR_6006.Advice="Choose only one point.";
//
TopOpInLinePtDirTooCloseLimits_ERR_6007.Request="Operator line point-direction";
TopOpInLinePtDirTooCloseLimits_ERR_6007.Diagnostic="The lengths given to build the line define too close limits.";
TopOpInLinePtDirTooCloseLimits_ERR_6007.Advice="Use lengths which define limits higher than resolution of geometric modeler.";
//
TopOpInLineGeodesicPtDir_ERR_6008.Request="Operator line point-direction";
TopOpInLineGeodesicPtDir_ERR_6008.Diagnostic="The line cannot be created.";
TopOpInLineGeodesicPtDir_ERR_6008.Advice="Check that your point is not on the border of the shell.";
//
// 6025-6049- Point
//
TopOpInPointMultipleSolution_ERR_6025.Request="Search for the points of a wire, 
which tangent is parallel to a given direction:";
TopOpInPointMultipleSolution_ERR_6025.Diagnostic=
"A part of the wire is linear and parallel to the choosen direction.
The operator cannot return a discrete list of resulting points.";
TopOpInPointMultipleSolution_ERR_6025.Advice="Change the direction.";
//
TopOpInPointCurveIsNotPlanar_ERR_6026.Request="Search for the points of a wire, 
which tangent is parallel to a given direction :";
TopOpInPointCurveIsNotPlanar_ERR_6026.Diagnostic="A part of the wire is not planar.";
TopOpInPointCurveIsNotPlanar_ERR_6026.Advice="Select a planar wire.";
//
// 6050-6074- Extrapolation of a wire lying on a shell
//
TopOpInExtrapolWireOnShellInvalidWire_ERR_6050.Request="Extrapolate a wire body:";
TopOpInExtrapolWireOnShellInvalidWire_ERR_6050.Diagnostic="Wire body is invalid.";
TopOpInExtrapolWireOnShellInvalidWire_ERR_6050.Advice="Modify wire body or the input used to generate it.";
//
TopOpInExtrapolWireOnShellSelfIntersection_ERR_6051.Request="Extrapolate a wire body:";
TopOpInExtrapolWireOnShellSelfIntersection_ERR_6051.Diagnostic="Extrapolated wire body is invalid due to self intersections.";
TopOpInExtrapolWireOnShellSelfIntersection_ERR_6051.Advice="Modify the wire body or the input used to generate it.";
//
TopOpIntExtrapolWireOnShellInternalError_ERR_6052="Extrapolate a wire body: internal error";
//
TopOpInExtrapolWireNonIsotopology_ERR_6053.Request="Extrapolate a wire body:";
TopOpInExtrapolWireNonIsotopology_ERR_6053.Diagnostic="The extrapolation reaches the closure of the underlying curve.";
TopOpInExtrapolWireNonIsotopology_ERR_6053.Advice="Define a smaller extrapolation length.";
//
TopOpInExtrapolWireCurvatureProblem_ERR_6054.Request="Extrapolate a wire body:";
TopOpInExtrapolWireCurvatureProblem_ERR_6054.Diagnostic="The wire curvature is too large, 
so that the extrapolated wire cannot reach the target plane.";
TopOpInExtrapolWireCurvatureProblem_ERR_6054.Advice="Define a smaller extrapolation length.";
//
TopOpInExtrapolWireSelfIntersection_ERR_6055.Request="Extrapolate a wire body:";
TopOpInExtrapolWireSelfIntersection_ERR_6055.Diagnostic="The extrapolation results in a self intersection.";
TopOpInExtrapolWireSelfIntersection_ERR_6055.Advice="Define a smaller extrapolation length.";
//
TopOpInExtrapolWireSelfIntersection_ERR_6056.Request="Extrapolate a wire body in curvature on support:";
TopOpInExtrapolWireSelfIntersection_ERR_6056.Diagnostic="Continuity of support is incompatible with extrapolation in curvature.";
TopOpInExtrapolWireSelfIntersection_ERR_6056.Advice="";
//
// Fillet 6075-6149
//
TopOpInSpecificFace_6099.Request="Ribbon computation:";
TopOpInSpecificFace_6099.Diagnostic="A specific face has been generated.";
TopOpInSpecificFace_6099.Advice=" Please check the curvature with Curvature Analysis.";
//
TopOpInFilletTooLargeImpact_ERR_6100.Request="Topological operator:";
TopOpInFilletTooLargeImpact_ERR_6100.Diagnostic="The operation has a too large impact on the body.\n
Some important portions of the body may disappear.";
TopOpInFilletTooLargeImpact_ERR_6100.Advice="Change the parameter value(s).";
//
TopOpInMultiRibbonInitialization_ERR_6101.Request="Multi ribbon operator:";
TopOpInMultiRibbonInitialization_ERR_6101.Diagnostic="The operation cannot be initialized for one or more ribbon(s).";
TopOpInMultiRibbonInitialization_ERR_6101.Advice="Process each ribbon in a separate operation.";
//
TopOpInMultiRibbonDefinition_ERR_6102.Request="Multi ribbon operator:";
TopOpInMultiRibbonDefinition_ERR_6102.Diagnostic="A single operation cannot process more than one ribbon.";
TopOpInMultiRibbonDefinition_ERR_6102.Advice="Process each ribbon in a separate operation.";
//
TopOpInLimitingVsInitialBody_ERR_6103.Request="Topological operator:";
TopOpInLimitingVsInitialBody_ERR_6103.Diagnostic="Limiting element is not entirely intersected by the initial body";
TopOpInLimitingVsInitialBody_ERR_6103.Advice="Resize the limiting element to fit the operation.";
//
TopOpIntTopRibSewing_ERR_6104.Request="Topological operator:";
TopOpIntTopRibSewing_ERR_6104.Diagnostic = "Sewing operation ambiguity: cannot decide whether a face must be kept or removed.";
TopOpIntTopRibSewing_ERR_6104.Advice="Check the geometry.";
//
TopOpInPartingCannotBeUsed_ERR_6105.Request="Topological operator:";
TopOpInPartingCannotBeUsed_ERR_6105.Diagnostic="Limiting or parting element cannot be used correctly.";
TopOpInPartingCannotBeUsed_ERR_6105.Advice="Check whether limiting or parting element is really necessary.\nIt may also be useful to resize or move it to fit the operation.";
//
TopOpInStopOnSlightlySharpEdge_ERR_6106.Request="Ribbon computation:";
TopOpInStopOnSlightlySharpEdge_ERR_6106.Diagnostic="Ribbon has stopped on slightly sharp edge(s).";
TopOpInStopOnSlightlySharpEdge_ERR_6106.Advice="Check the geometry.";
//
TopOpInPointedBlend_ERR_6107.Request="Ribbon computation:";
TopOpInPointedBlend_ERR_6107.Diagnostic="Ribbon cannot reach end point(s) of edge(s).";
TopOpInPointedBlend_ERR_6107.Advice="Check the geometry.";
//
TopOpInStopOnSmallFaces_6108.Request="Ribbon computation:";
TopOpInStopOnSmallFaces_6108.Diagnostic="Ribbon has stopped on small face(s).";
TopOpInStopOnSmallFaces_6108.Advice="Check the geometry.";
//
TopOpInVariableFilletIncoherentSpecs_ERR_6109.Request="Variable fillet input :";
TopOpInVariableFilletIncoherentSpecs_ERR_6109.Diagnostic="Invalid input edge.";
TopOpInVariableFilletIncoherentSpecs_ERR_6109.Advice="Variable fillet cannot propagate beyond tangency discontinuities or sharpness inversions located in the middle of the selected edge.";
//
TopOpInStopOnSmallSteps_6110.Request="Ribbon computation:";
TopOpInStopOnSmallSteps_6110.Diagnostic="Ribbon has stopped on small step(s).";
TopOpInStopOnSmallSteps_6110.Advice="Check the geometry.";
//
TopOpInKeepEdgeSpecificRelim_6111.Request="Ribbon computation:";
TopOpInKeepEdgeSpecificRelim_6111.Diagnostic="Impossible keep edge configuration for relimitation.";
TopOpInKeepEdgeSpecificRelim_6111.Advice="Check the geometry.";
//
TopOpInStopOnSnapping_6112.Request="Ribbon computation:";
TopOpInStopOnSnapping_6112.Diagnostic="Ribbon has stopped on already existing ribbon with same geometry.";
TopOpInStopOnSnapping_6112.Advice="Change order of ribbons or group them into a single operation.";
//
TopOpInStopOnStoppedOnSingularity_6113.Request="Ribbon computation:";
TopOpInStopOnStoppedOnSingularity_6113.Diagnostic="Ribbon has stopped geometric singularity.";
TopOpInStopOnStoppedOnSingularity_6113.Advice="Decrease the parameter value(s) or change order of ribbons.";
//
TopOpInHoldCurveContainsAJunctionEdge_6114.Request="Ribbon computation:";
TopOpInHoldCurveContainsAJunctionEdge_6114.Diagnostic="The Hold Curve contains a junction edge.";
TopOpInHoldCurveContainsAJunctionEdge_6114.Advice="Smooth the Hold Curve.";
//
TopOpInCouldNotBePropagatedAsExpected_6115.Request="Ribbon computation:";
TopOpInCouldNotBePropagatedAsExpected_6115.Diagnostic="Ribbon could not be propagated as expected.";
TopOpInCouldNotBePropagatedAsExpected_6115.Advice="Check quality of input geometry where ribbon stopped.";
//
TopOpInSupportRelimitationNotAsExpected_6116.Request="Ribbon trimming:";
TopOpInSupportRelimitationNotAsExpected_6116.Diagnostic="Ribbon could not be trimmed as requested.";
TopOpInSupportRelimitationNotAsExpected_6116.Advice="Select another Trim support option.";
//
TopOpInOperationNotPossibleOnMultipleShells_6117.Request="Ribbon computation:";
TopOpInOperationNotPossibleOnMultipleShells_6117.Diagnostic="This operation cannot be performed on several shells.";
TopOpInOperationNotPossibleOnMultipleShells_6117.Advice="Input only one shell.";
//
TopOpInOperationNotPossibleOnMultipleBodies_6118.Request="Ribbon computation:";
TopOpInOperationNotPossibleOnMultipleBodies_6118.Diagnostic="This operation cannot be performed on several bodies.";
TopOpInOperationNotPossibleOnMultipleBodies_6118.Advice="Input only one body.";
//
TopOpInRelimitationNoContactOnASupport_6119.Request="Relimitation:";
TopOpInRelimitationNoContactOnASupport_6119.Diagnostic="Relimitation has suppressed ribbon contact on one surface";
TopOpInRelimitationNoContactOnASupport_6119.Advice="Modify the inputs.";
//
TopOpInUnexpectedPointedBlend_6120.Request="Ribbon computation:";
TopOpInUnexpectedPointedBlend_6120.Diagnostic="Ribbon has stopped because surfaces become tangent. This tangency had not been detected first.";
TopOpInUnexpectedPointedBlend_6120.Advice="Avoid this tangency.";
// 21-29 : AutoFillet
TopOpInAutoFilletTooManyFilletsInInput_6121.Request="Automatic Fillet";
TopOpInAutoFilletTooManyFilletsInInput_6121.Diagnostic="A smooth skin includes inner sharp edges. (Smooth skins are faces which are displayed when smooth edges visualization is disabled)";
TopOpInAutoFilletTooManyFilletsInInput_6121.Advice="Remove unnecessary fillets from input body if applicable.";
//
TopOpInAutoFilletExistingSameRadiusFillet_6122.Request="Automatic Fillet";
TopOpInAutoFilletExistingSameRadiusFillet_6122.Diagnostic="Input body is already partially filleted using the same radius as the input radius.";
TopOpInAutoFilletExistingSameRadiusFillet_6122.Advice="Avoid manual fillets that can be generated anyway by subsequent automatic fillet.";
//
TopOpInAutoFilletIllegalNotToFilletFaces_6123.Request="Automatic Fillet";
TopOpInAutoFilletIllegalNotToFilletFaces_6123.Diagnostic="The adjacent functional surfaces you selected are surrounded by convex and concave edges.";
TopOpInAutoFilletIllegalNotToFilletFaces_6123.Advice="Make sure that your selection includes functional surfaces which edges are of the same type.";
//
TopOpInAutoFilletLowCurvatureGenerated_6124.Request="Automatic Fillet";
TopOpInAutoFilletLowCurvatureGenerated_6124.Diagnostic="Operator has generated surfaces with low curvature radius";
TopOpInAutoFilletLowCurvatureGenerated_6124.Advice="Check generated geometry";
//
TopOpInAutoFilletTooSmallInputRadius_6125.Request="Automatic Fillet";
TopOpInAutoFilletTooSmallInputRadius_6125.Diagnostic="Input radius is too small.";
TopOpInAutoFilletTooSmallInputRadius_6125.Advice="Change input radius";
//
TopOpInAutoFilletTooBigInputRadius_6126.Request="Automatic Fillet";
TopOpInAutoFilletTooBigInputRadius_6126.Diagnostic="Input radius is too big compared to model size";
TopOpInAutoFilletTooBigInputRadius_6126.Advice="Change input radius";
//
TopOpInAutoFilletNoFilletCouldBeCreated_6127.Request="Automatic Fillet";
TopOpInAutoFilletNoFilletCouldBeCreated_6127.Diagnostic="No fillet could be sewn on the input model.";
TopOpInAutoFilletNoFilletCouldBeCreated_6127.Advice="It may be preferable to use the manual fillet operator on this part";
//
TopOpInAutoFilletFewFilletsCouldNotBeCreated_6128.Request="Automatic Fillet";
TopOpInAutoFilletFewFilletsCouldNotBeCreated_6128.Diagnostic="Some fillets have not been created. ";
TopOpInAutoFilletFewFilletsCouldNotBeCreated_6128.Advice="Use the manual operator in order to complete the missing fillets.";
//
TopOpInAutoFilletLivingDeadEdge_6129.Request="Automatic Fillet";
TopOpInAutoFilletLivingDeadEdge_6129.Diagnostic="At least one sharp edge is locally smooth.";
TopOpInAutoFilletLivingDeadEdge_6129.Advice="Make designated edges either totally smooth or totally sharp.";
//
TopOpInVertexBlendTrackCreation_ERR_6130.Request="Vertex blend :";
TopOpInVertexBlendTrackCreation_ERR_6130.Diagnostic="Cannot create corner edges.";
TopOpInVertexBlendTrackCreation_ERR_6130.Advice="Setback values may be incorrect or missing.";
//
TopOpInVertexBlendSurfaceCreation_ERR_6131.Request="Vertex blend :";
TopOpInVertexBlendSurfaceCreation_ERR_6131.Diagnostic="Topology too complex : cannot create corner surface.";
TopOpInVertexBlendSurfaceCreation_ERR_6131.Advice="Please check vertex blend input.";
//
TopOpInVertexBlendSurfaceSewing_ERR_6132.Request="Vertex blend :";
TopOpInVertexBlendSurfaceSewing_ERR_6132.Diagnostic="Invalid setback distance.";
TopOpInVertexBlendSurfaceSewing_ERR_6132.Advice="Please check vertex blend input.";
//
TopOpInVertexBlendAllEdgesMustBeFilleted_ERR_6133.Request="Vertex blend :";
TopOpInVertexBlendAllEdgesMustBeFilleted_ERR_6133.Diagnostic="All edges of a blend vertex must be filleted.";
TopOpInVertexBlendAllEdgesMustBeFilleted_ERR_6133.Advice="Please check vertex blend input, and/or a limiting element orientation.";
//
TopOpInVertexBlendFilletsCannotCollide_ERR_6134.Request="Vertex blend :";
TopOpInVertexBlendFilletsCannotCollide_ERR_6134.Diagnostic="If blend corner option is used, then any collision between two fillets must also be specified as blend vertex.";
TopOpInVertexBlendFilletsCannotCollide_ERR_6134.Advice="Select all the edges at a corner where the collision between the two fillets occurs or please check that no limiting element is required.";
//
//TopOpInRibbon_InternalErrorForInfiniteLoop_ERR_6135 = "Internal error.";
TopOpInRibbon_InternalErrorForInfiniteLoop_ERR_6135.Request="Ribbon computation:";
TopOpInRibbon_InternalErrorForInfiniteLoop_ERR_6135.Diagnostic="Ribbon could not be propagated correctly.";
TopOpInRibbon_InternalErrorForInfiniteLoop_ERR_6135.Advice="Check quality of input geometry.";
//
TopOpInRibbonCollision_ERR_6136.Request="Ribbon computation:";
TopOpInRibbonCollision_ERR_6136.Diagnostic="Invalid collision(s) detected in the created geometry.";
TopOpInRibbonCollision_ERR_6136.Advice="Decrease the parameter value(s), change the operand(s) or add limiting element(s).";

TopOpInMultiRibbonImpossibleSelection_ERR_6137.Request="Multi ribbon operator:";
TopOpInMultiRibbonImpossibleSelection_ERR_6137.Diagnostic="Multiple operation is not possible.";
TopOpInMultiRibbonImpossibleSelection_ERR_6137.Advice="Process each ribbon in a separate operation.";

TopOpInImpossibleTrim_ERR_6138.Request="Trim support:";
TopOpInImpossibleTrim_ERR_6138.Diagnostic="Impossible trim.";
TopOpInImpossibleTrim_ERR_6138.Advice="Change fillet input.";

TopOpInTooComplexOperation_ERR_6139.Request="Topological operator :";
TopOpInTooComplexOperation_ERR_6139.Diagnostic="Operation stopped as it would be too slow since the input skin is too complex.";
TopOpInTooComplexOperation_ERR_6139.Advice="Split the input into several simpler parts and Unfold them one by one.";

TopOpInMultiRibbonImpossibleSelection_ERR_6140.Request="Multi ribbon operator:";
TopOpInMultiRibbonImpossibleSelection_ERR_6140.Diagnostic="Warning : At least one ribbon cannot be performed correctly.";
TopOpInMultiRibbonImpossibleSelection_ERR_6140.Advice="Process each ribbon in a separate operation.";

TopOpInDistanceLawNegativeValue_ERR_6141.Request="Variable Fillet:";
TopOpInDistanceLawNegativeValue_ERR_6141.Diagnostic="Law evaluates to a negative value.";
TopOpInDistanceLawNegativeValue_ERR_6141.Advice="Ensure that the law evaluates to positive values everywhere in its interval.";

TopOpInDistanceLawNotPeriodicForClosedSpine_ERR_6142.Request="Variable Fillet:";
TopOpInDistanceLawNotPeriodicForClosedSpine_ERR_6142.Diagnostic="Non-periodic law supplied for a closed spine.";
TopOpInDistanceLawNotPeriodicForClosedSpine_ERR_6142.Advice="Make the law periodic and continuous.";

TopOpInDistanceLawZeroExceptAtEnds_ERR_6143.Request="Variable Fillet:";
TopOpInDistanceLawZeroExceptAtEnds_ERR_6143.Diagnostic="Law evaluates to zero at an interior point in its interval.";
TopOpInDistanceLawZeroExceptAtEnds_ERR_6143.Advice="Please modify the law. It may have zero values at either/both extremes, but not in the interior of its interval.";

TopOpInEmptyResultBecauseOfLimiting_ERR_6144.Request="Topological operator :";
TopOpInEmptyResultBecauseOfLimiting_ERR_6144.Diagnostic="No initialisation is possible because of Limiting or Parting element.";
TopOpInEmptyResultBecauseOfLimiting_ERR_6144.Advice="Check whether limiting or parting element is really necessary or check its orientation.\nIt may also be useful to resize it to fit the operation.";


TopOpInMultiRibbonImpossibleSelection_ERR_6145.Request="Multi ribbon operator:";
TopOpInMultiRibbonImpossibleSelection_ERR_6145.Diagnostic="Warning : Invalid collision(s) detected in the created geometry.";
TopOpInMultiRibbonImpossibleSelection_ERR_6145.Advice="Process each ribbon in a separate operation.";

TopOpIntTopRibSewing_ERR_6146.Request="Topological operator:";
TopOpIntTopRibSewing_ERR_6146.Diagnostic = "The operation of sewing may either lead to multi shell result or domain to sew is empty.";
TopOpIntTopRibSewing_ERR_6146.Advice="Either use no trim option, increase spine length in case of ACA or Shape fillet.";


TopOpInFilletIntersection_ERR_6147.Request="Multi ribbon operator:";
TopOpInFilletIntersection_ERR_6147.Diagnostic="Warning : Only a group of connected edges can be performed in this operation. 
There is at least one not connected edge.";
TopOpInFilletIntersection_ERR_6147.Advice="Process the not connected edges in a separate operation.";

TopOpInFilletIntersection_ERR_6148.Request="Multi ribbon operator:";
TopOpInFilletIntersection_ERR_6148.Diagnostic="Warning : Only a group of the same convexity edges can be performed in this operation. 
There are convex and concave edges in this selection.";
TopOpInFilletIntersection_ERR_6148.Advice="Process the edges of different convexity in a separate operation.";

TopOpInRadiusLawWithExtrema_ERR_6149.Request="Variable Fillet:";
TopOpInRadiusLawWithExtrema_ERR_6149.Diagnostic="Radius law has got local extrema.";
TopOpInRadiusLawWithExtrema_ERR_6149.Advice="Please modify the law.";
//
// draft&tweaking 6150-6199
//
TopOpInDraftAddRemove_ERR_6150.Request="Draft operator:";
TopOpInDraftAddRemove_ERR_6150.Diagnostic="The draft operator cannot decide whether to add or remove
 matter from the initial part.";
TopOpInDraftAddRemove_ERR_6150.Advice="Decrease the angle value or change the pulling direction.";
//
TopOpInDraftReflect_ERR_6151.Request="Reflect line computation:";
TopOpInDraftReflect_ERR_6151.Diagnostic="The computed reflect lines are disconnected 
and separated by several lateral faces.";
TopOpInDraftReflect_ERR_6151.Advice="Modify the shape of the input body.";
//
TopOpInDraftTwistOnNeutral_ERR_6152.Request="Draft operator:";
TopOpInDraftTwistOnNeutral_ERR_6152.Diagnostic="The neutral element is too steep.";
TopOpInDraftTwistOnNeutral_ERR_6152.Advice="Decrease the parameter value(s) or change the operand(s) or change the draft form.";
//
TopOpInDraftInternalTwist_ERR_6153.Request="Ribbon computation:";
TopOpInDraftInternalTwist_ERR_6153.Diagnostic="The result contains at least one twisted surface.";
TopOpInDraftInternalTwist_ERR_6153.Advice="Decrease the parameter value(s) or change the operand(s).";
//
TopOpInDraftCollision_ERR_6154.Request="Draft operator:";
TopOpInDraftCollision_ERR_6154.Diagnostic="The computed draft is auto-intersected.";
TopOpInDraftCollision_ERR_6154.Advice="Decrease the draft angle value or change the pulling direction or modify the neutral element.";
//
TopOpInDraftCurvatureInversion_ERR_6155.Request="Reflect line computation:";
TopOpInDraftCurvatureInversion_ERR_6155.Diagnostic="There is a surface curvature inversion along the reflect line.";
TopOpInDraftCurvatureInversion_ERR_6155.Advice="Decrease the angle value or change the direction.";
//
TopOpInDraftRelimitation_ERR_6156.Request="Ribbon computation:";
TopOpInDraftRelimitation_ERR_6156.Diagnostic="Impossible relimitation. The local topology or geometry is too complex.";
TopOpInDraftRelimitation_ERR_6156.Advice="Modify the parameter value(s), change the operand(s) or add limiting element(s).";
//
TopOpInDraftCreationDraftFaces_ERR_6157.Request="Draft operator:";
TopOpInDraftCreationDraftFaces_ERR_6157.Diagnostic="Impossible draft faces assembly. There is a tangency discontinuity between two canonical neutral curves.";
TopOpInDraftCreationDraftFaces_ERR_6157.Advice="Decrease the draft angle value or change the pulling direction or impose tangency continuity on the initial geometry.";
//
TopOpInDraftCreationDraftFaces_ERR_6158.Request="Draft operator:";
TopOpInDraftCreationDraftFaces_ERR_6158.Diagnostic="Impossible draft faces assembly. There is a discontinuity between two neutral curves.";
TopOpInDraftCreationDraftFaces_ERR_6158.Advice="Decrease the draft angle value or change the pulling direction or impose continuity on the initial geometry.";
//
TopOpInDraftInternalDiscontinuity_ERR_6159.Request="Draft operator:";
TopOpInDraftInternalDiscontinuity_ERR_6159.Diagnostic="Impossible draft faces assembly. There is a discontinuity between two initial curves.";
TopOpInDraftInternalDiscontinuity_ERR_6159.Advice="Decrease the draft angle value or change the pulling direction or impose tangency continuity on the initial geometry.";
//
TopOpInPartingOrientation_ERR_6160.Request="Topological operator:";
TopOpInPartingOrientation_ERR_6160.Diagnostic="The operator cannot decide on which side of the parting element it has to apply its geometry.";
TopOpInPartingOrientation_ERR_6160.Advice="Change the operand(s).";
//
TopOpInDraftRelimitation_ERR_6161.Request="Ribbon computation:";
TopOpInDraftRelimitation_ERR_6161.Diagnostic="Impossible relimitation. The ribbon has stopped because the draft has become too steep on the driven side.";
TopOpInDraftRelimitation_ERR_6161.Advice="Modify the parameter value(s), change the operand(s) or add limiting element(s).";
//
TopOpInDraftRelimitation_ERR_6162.Request="Ribbon computation:";
TopOpInDraftRelimitation_ERR_6162.Diagnostic="Impossible relimitation. The ribbon has stopped because the draft has turned back on the driving side.";
TopOpInDraftRelimitation_ERR_6162.Advice="Modify the parameter value(s), change the operand(s) or add limiting element(s).";
//
TopOpInDraftRelimitation_ERR_6163.Request="Ribbon computation:";
TopOpInDraftRelimitation_ERR_6163.Diagnostic="Impossible relimitation. The ribbon has stopped because the computed geometry is too short.";
TopOpInDraftRelimitation_ERR_6163.Advice="Modify the parameter value(s), change the operand(s) or add limiting element(s).";
//
TopOpInMultiLimitingIntersection_ERR_6164.Request="Topological operator:";
TopOpInMultiLimitingIntersection_ERR_6164.Diagnostic="Collision detected between limiting(s) or parting elements.";
TopOpInMultiLimitingIntersection_ERR_6164.Advice="Modify the intersecting limiting(s) or parting elements.";
//
TopOpInMultiLimitingIntersection_ERR_6165.Request="Ribbon computation:";
TopOpInMultiLimitingIntersection_ERR_6165.Diagnostic="Impossible relimitation. May be due to the collision detected between limiting(s) or parting elements.";
TopOpInMultiLimitingIntersection_ERR_6165.Advice="Modify the limiting(s) or parting elements or modify the parameter value(s).";
//
TopOpInRibbonInitializationWithTangentIntersection_ERR_6166.Request="Ribbon initialization:";
TopOpInRibbonInitializationWithTangentIntersection_ERR_6166.Diagnostic="Impossible initialization. The skin may be tangent to one of the covered faces.";
TopOpInRibbonInitializationWithTangentIntersection_ERR_6166.Advice="Modify the input bodies.";
//
TopOpInRibbonInitializationWithLocalAmbiguity_ERR_6167.Request="Ribbon initialization:";
TopOpInRibbonInitializationWithLocalAmbiguity_ERR_6167.Diagnostic="Impossible initialization. There is a local ambiguity between more than three edges of the ribbon.";
TopOpInRibbonInitializationWithLocalAmbiguity_ERR_6167.Advice="Modify the input bodies.";
//
TopOpInRibbonCollisionBetweenSkinAndRelimShells_ERR_6168.Request="Ribbon computation:";
TopOpInRibbonCollisionBetweenSkinAndRelimShells_ERR_6168.Diagnostic="Impossible relimitation. May be due to the collision detected between the skin and the body.";
TopOpInRibbonCollisionBetweenSkinAndRelimShells_ERR_6168.Advice="Modify the inputs.";
//
TopOpInRibbonInitializationOnSelection_ERR_6169.Request="Ribbon initialization:";
TopOpInRibbonInitializationOnSelection_ERR_6169.Diagnostic="Impossible initialization on selected faces.";
TopOpInRibbonInitializationOnSelection_ERR_6169.Advice="Modify the selection of faces.";
//
TopOpInDraftRelimitation_ERR_6170.Request="Ribbon computation:";
TopOpInDraftRelimitation_ERR_6170.Diagnostic="Impossible relimitation. Tangent design detected.";
TopOpInDraftRelimitation_ERR_6170.Advice="Modify the parameter value(s), change the operand(s) or add limiting element(s).";
//
TopOpInDraftRelimitation_ERR_6171.Request="Ribbon computation:";
TopOpInDraftRelimitation_ERR_6171.Diagnostic="Relimitation warning. Tangent design detected.";
TopOpInDraftRelimitation_ERR_6171.Advice="Modify the parameter value(s), change the operand(s) or add limiting element(s).";
//
TopOpInDraftAddRemove_LongCylinder_ERR_6172.Request="Draft operator:";
TopOpInDraftAddRemove_LongCylinder_ERR_6172.Diagnostic="Draft surface doesn't intersect the cylinder base.";
TopOpInDraftAddRemove_LongCylinder_ERR_6172.Advice="Reduce the cylinder length/ reduce the angle between cylinder axis and pulling direction/ increase the Draft angle.";
//
TopOpInRibbonSewingFaceError_ERR_6173.Request=" Sewing:";
TopOpInRibbonSewingFaceError_ERR_6173.Diagnostic="Creation of an invalid face.";
TopOpInRibbonSewingFaceError_ERR_6173.Advice="Change the operand(s).";
//
TopOpInRibbonUnion_ERR_6174.Request="Regularization:";
TopOpInRibbonUnion_ERR_6174.Diagnostic="Error in uniting resulting volumes.";
TopOpInRibbonUnion_ERR_6174.Advice="Repeat the operation with every single volume.";
//
TopOpInDraftNoFacesProvided_ERR_6175.Request="Draft operator:";
TopOpInDraftNoFacesProvided_ERR_6175.Diagnostic="No faces to draft provided internally.";
TopOpInDraftNoFacesProvided_ERR_6175.Advice="Provide faces to draft.";
//
TopOpInDraftAutomaticLimiting_ERR_6176.Request="Draft operator:";
TopOpInDraftAutomaticLimiting_ERR_6176.Diagnostic="Cannot automatically generate limiting elements to avoid twist in draft.";
TopOpInDraftAutomaticLimiting_ERR_6176.Advice="Define limiting elements manually.";
//
TopOpInDraftAutomaticUntwist_ERR_6177.Request="Draft operator:";
TopOpInDraftAutomaticUntwist_ERR_6177.Diagnostic="Warning : Draft operator has corrected twisted draft faces.";
TopOpInDraftAutomaticUntwist_ERR_6177.Advice="The draft faces created due to untwist may not be moldable.";
//
TopOpInTrimSewFaceToReplaceInResult_ERR_6178.Request="Replace Face operator :";
TopOpInTrimSewFaceToReplaceInResult_ERR_6178.Diagnostic="The face to replace is still in the result body.";
TopOpInTrimSewFaceToReplaceInResult_ERR_6178.Advice="Change the orientation of the skin to sew.";
//
TopOpInTrimSewFaceToReplaceInResult_ERR_6179.Request="Topological operator:";
TopOpInTrimSewFaceToReplaceInResult_ERR_6179.Diagnostic="The creation of an invalid flat body is impossible.";
TopOpInTrimSewFaceToReplaceInResult_ERR_6179.Advice="Modify the parameter value(s) or change the operand(s).";
//
TopOpInDraftAutomaticUntwistFailure_ERR_6180.Request="Draft operator:";
TopOpInDraftAutomaticUntwistFailure_ERR_6180.Diagnostic="Draft operator failed to untwist some/all twists.";
TopOpInDraftAutomaticUntwistFailure_ERR_6180.Advice="Provide limiting elements to avoid Draft in twisted regions.";
//
TopOpInReflectLineOperator_ERR_6181.Request="Reflect line computation:";
TopOpInReflectLineOperator_ERR_6181.Diagnostic="Warning : Reflect line operator has encountered one or several singularity point(s)";
TopOpInReflectLineOperator_ERR_6181.Advice="Use near, extract or disassemble capability";
//
TopOpInDraftBothSideG1_ERR_6182.Request="G1 Both Side Draft:";
TopOpInDraftBothSideG1_ERR_6182.Diagnostic="Warning : Complete healing of sharp edges Are not possible with the given parting Element Tolerance";
TopOpInDraftBothSideG1_ERR_6182.Advice="Increase the Parting Element Tolerance";
//
TopOpInMaximumBothSideDraft_ERR_6183.Request="Draft Operator:";
TopOpInMaximumBothSideDraft_ERR_6183.Diagnostic="Warning : The result contains twists. The draft operation stopped at the twist zone";
TopOpInMaximumBothSideDraft_ERR_6183.Advice="To draft remaining portions use this command with appropriate faces to draft";
//
TopOpInDraftUselessLimiting_ERR_6184.Request="Draft operator:";
TopOpInDraftUselessLimiting_ERR_6184.Diagnostic="Warning : At least one limiting element has no image in result body.";
TopOpInDraftUselessLimiting_ERR_6184.Advice="One limiting element may be useless or not taken into account.";
//
TopOpInCollisionDetected_ERR_6185.Request="Topological operator:";
TopOpInCollisionDetected_ERR_6185.Diagnostic="A collision has been detected.";
TopOpInCollisionDetected_ERR_6185.Advice="Reduce the move or change the operand(s).";
//
TopOpInDraftCreationDraftFaces_ERR_6186.Request="Draft operator:";
TopOpInDraftCreationDraftFaces_ERR_6186.Diagnostic="Impossible draft faces assembly. A discontinuity encountered between at least two neutral curves.";
TopOpInDraftCreationDraftFaces_ERR_6186.Advice="Decrease the draft angle value or change the pulling direction or modify the neutral geometry.";
//
// helix 6200-6249
//
TopOpInHelixInvalidOriginOnAxis_ERR_6200.Request="Helix creation:";
TopOpInHelixInvalidOriginOnAxis_ERR_6200.Diagnostic="The origin point is on the helix axis.";
TopOpInHelixInvalidOriginOnAxis_ERR_6200.Advice="Give an origin point not laying on the helix axis.";
//
TopOpInHelixInvalidTaperAngle_ERR_6201.Request="Helix creation:";
TopOpInHelixInvalidTaperAngle_ERR_6201.Diagnostic="The taper angle is less than 0 or greater than or equal to PI/2 radians.";
TopOpInHelixInvalidTaperAngle_ERR_6201.Advice="Give a taper angle greater or equal to 0 and less than PI/2 radians.";
//
TopOpInHelixInvalidAngles_ERR_6202.Request="Helix creation:";
TopOpInHelixInvalidAngles_ERR_6202.Diagnostic="The end angle is less than or equal to the start angle.";
TopOpInHelixInvalidAngles_ERR_6202.Advice="Give an end angle greater than the start angle.";
//
TopOpInHelixInvalidGuide_ERR_6203.Request="Helix creation:";
TopOpInHelixInvalidGuide_ERR_6203.Diagnostic="The helix guide is not a line.";
TopOpInHelixInvalidGuide_ERR_6203.Advice="Give a linear guide.";
//
TopOpInHelixInvalidOrigin_ERR_6204.Request="Helix creation:";
TopOpInHelixInvalidOrigin_ERR_6204.Diagnostic="The origin body is not a vertex.";
TopOpInHelixInvalidOrigin_ERR_6204.Advice="Give a body only containing a vertex.";
//
TopOpInHelixAxisProfileNotCoplanar_ERR_6205.Request="Helix creation:";
TopOpInHelixAxisProfileNotCoplanar_ERR_6205.Diagnostic="The axis body and the radius profile are not coplanar.";
TopOpInHelixAxisProfileNotCoplanar_ERR_6205.Advice="Give two coplanar entities.";
//
TopOpInHelixAxisOriginOutOfProfile_ERR_6206.Request="Helix creation:";
TopOpInHelixAxisOriginOutOfProfile_ERR_6206.Diagnostic="The origin is not on the profile.";
TopOpInHelixAxisOriginOutOfProfile_ERR_6206.Advice="Give an origin located on the profile.";
//
// 6250-6299- split-trim
//
TopOpInSplitShellByMultiWires_ERR_6250.Request="Splitting shell by wires:";
TopOpInSplitShellByMultiWires_ERR_6250.Diagnostic="The splitting body contains multiple wires with incompatible orientations.";
TopOpInSplitShellByMultiWires_ERR_6250.Advice="Repeat the splitting operation with every single wire.";
//
// 6300-6349- corner
//
TopOpInTrimmedCorner_ERR_6300.Request="Corner operator:";
TopOpInTrimmedCorner_ERR_6300.Diagnostic="The operator finds several solution, and cannot relimit the wires.";
TopOpInTrimmedCorner_ERR_6300.Advice="Use the operator in the no-trim mode, then relimit the wires manually.";
//
TopOpInParallelClosedWire_ERR_6301.Request="Parallel operator:";
TopOpInParallelClosedWire_ERR_6301.Diagnostic="The wire is closed and the law used to compute the parallel
is not constant.";
TopOpInParallelClosedWire_ERR_6301.Advice="Choose a constant law, or split the wire in two parts
and apply the parallel on each part.";
//
TopOpInParallelNegativeValues_ERR_6302.Request="Parallel operator:";
TopOpInParallelNegativeValues_ERR_6302.Diagnostic="The input law has negative values.";
TopOpInParallelNegativeValues_ERR_6302.Advice="Split the law and the wire in as many parts as needed to have laws 
with constant sign on each parts, and apply the operator on each part.";
//
TopOpInThickWireNonConnectedBody_ERR_6303.Request="Thick wire operator:";
TopOpInThickWireNonConnectedBody_ERR_6303.Diagnostic="The input body has several wire domains
that are not connected.";
TopOpInThickWireNonConnectedBody_ERR_6303.Advice="Connect all the domains of the input body.";
//
TopOpInParallelSelfIntersectedWire_ERR_6304.Request="Parallel operator:";
TopOpInParallelSelfIntersectedWire_ERR_6304.Diagnostic="The input wire is self intersecting.";
TopOpInParallelSelfIntersectedWire_ERR_6304.Advice="Use an input wire that is not self intersecting.";
//
TopOpInParallelNoEdgeSolution_ERR_6305.Request="Parallel operator:";
TopOpInParallelNoEdgeSolution_ERR_6305.Diagnostic="The parallel can not be computed for this edge.";
TopOpInParallelNoEdgeSolution_ERR_6305.Advice="Extract the edge, cut it and try the parallel for the pieces.";
//
TopOpInParallelExtInMatter_ERR_6306.Request="Parallel operator:";
TopOpInParallelExtInMatter_ERR_6306.Diagnostic="Extremity of parallel is inside matter.";
TopOpInParallelExtInMatter_ERR_6306.Advice="Extract the extremity of initial wire.";
//
TopOpInParallelSolToBoundary_ERR_6307.Request="Parallel operator:";
TopOpInParallelSolToBoundary_ERR_6307.Diagnostic="Solution meets boundary of shell.";
TopOpInParallelSolToBoundary_ERR_6307.Advice="Cut the wire on the shown point.";
//
TopOpInParallelInvalidSol_ERR_6308.Request="Parallel operator:";
TopOpInParallelInvalidSol_ERR_6308.Diagnostic="Hole or overlapping of solution.";
TopOpInParallelInvalidSol_ERR_6308.Advice="Cut the wire around the invalidity.";
//
TopOpInParallelLawMatterInversion_ERR_6309.Request="Parallel operator With Law:";
TopOpInParallelLawMatterInversion_ERR_6309.Diagnostic="Inversion of matter.";
TopOpInParallelLawMatterInversion_ERR_6309.Advice="two extremities of a relimitation angle are out of matter.";
//
TopOpInConnectImpossibleTrim_ERR_6310.Request="Connect Curve Operator :";
TopOpInConnectImpossibleTrimn_ERR_6310.Diagnostic="Impossible trim on one Curve with these orientations.";
TopOpInConnectImpossibleTrim_ERR_6310.Advice="Invert one of the orientation or build connect curve and use trim operator.";
//
TopOpInConnectClosedTrim_ERR_6311.Request="Connect Curve Operator :";
TopOpInConnectClosedTrim_ERR_6311.Diagnostic="Impossible trim with Closed Wire";
TopOpInConnectClosedTrim_ERR_6311.Advice="Choose two points and trim the closed wire with them.";
//
TopOpInPointOnVertex_ERR_6312.Request="Corner Point On Wire-Wire Operator :";
TopOpInPointOnVertex_ERR_6312.Diagnostic="Point is on a Non-G1 vertex Of the Wire.";
TopOpInPointOnVertex_ERR_6312.Advice="Trim the wire by the point.";
//
TopOpInParallelNotComputed_ERR_6313.Request="Parallel operator:";
TopOpInParallelNotComputed_ERR_6313.Diagnostic="Geometric problem for the parallel.";
TopOpInParallelNotComputed_ERR_6313.Advice="The solution for this piece of wire can not be computed.";
//
TopOpInParallelNegativeValuesForG1_ERR_6314.Request="Parallel operator:";
TopOpInParallelNegativeValuesForG1_ERR_6314.Diagnostic="Wire is not G1 and input law has negative values .";
TopOpInParallelNegativeValuesForG1_ERR_6314.Advice="Split the law and the wire in as many parts as needed to have laws 
with constant sign on each parts, and apply the operator on each part.";
//
TopOpInCornerTgtCenterOnPt_ERR_6315.Request="Operator tangent circle";
TopOpInCornerTgtCenterOnPt_ERR_6315.Diagnostic="no solution for projection of the center on the curve";
TopOpInCornerTgtCenterOnPt_ERR_6315.Advice="The solution can not be computed";
//
TopOpInCornerTgtCenterOnPt_ERR_6316.Request="Operateur tangent circle";
TopOpInCornerTgtCenterOnPt_ERR_6316.Diagnostic="the projection of the center on the curve is not valid";
TopOpInCornerTgtCenterOnPt_ERR_6316.Advice="The solution can not be computed";
//
TopOpInConnectTrimForClosedConnect_ERR_6317.Request="Connect Curve Operator :";
TopOpInConnectTrimForClosedConnect_ERR_6317.Diagnostic="Impossible trim with Closed connect curve";
TopOpInConnectTrimForClosedConnect_ERR_6317.Advice="Choose two different points and two different wires for connect definition.";
//
TopOpInTangentInputCorner_ERR_6318.Request="Corner operator:";
TopOpInTangentInputCorner_ERR_6318.Diagnostic="Some element 1 and element 2 edge's are merged.\n
All solutions may not be done.";
TopOpInTangentInputCorner_ERR_6318.Advice="Use split to remove merged areas.";
//
TopOpInParallelIntersectDim1Corner_ERR_6319.Request="Corner operator:";
TopOpInParallelIntersectDim1Corner_ERR_6319.Diagnostic="Impossible to compute eventual center of corner between element 1 and element 2 edge's.\n
All solutions may not be done.";
TopOpInParallelIntersectDim1Corner_ERR_6319.Advice="Use split to remove doubtful areas.";
//SUH 2004:1:22
TopOpInParallelDeviationDueToGap_WNG_6320.Request="Parallel operator:";
TopOpInParallelDeviationDueToGap_WNG_6320.Diagnostic="The specified deviation may not be respected because of gaps in the initial curve.";
TopOpInParallelDeviationDueToGap_WNG_6320.Advice="If the parallel result is not the expected one, heal the support surface or smooth input curve to remove the gap.";
//
TopOpInCornerLayDownMultiDomain_ERR_6321.Request="Corner operator:";
TopOpInCornerLayDownMultiDomain_ERR_6321.Diagnostic="The lay down of an input wire is made of differents sub-element that are not connected. ";
TopOpInCornerLayDownMultiDomain_ERR_6321.Advice="Split the input wire, or project it on the support.";
//
TopOpInTrimmedCorner_ERR_6322.Request="Corner operator:";
TopOpInTrimmedCorner_ERR_6322.Diagnostic="Complete and complementary creation mode cannot use trimming options.";
TopOpInTrimmedCorner_ERR_6322.Advice="Use the operator in no-trim mode, or in direct creation mode.";
//
TopOpInTritangentCorner_ERR_6323.Request="Tritangent corner operator:";
TopOpInTritangentCorner_ERR_6323.Diagnostic="An input point is defined on a input wire body.";
TopOpInTritangentCorner_ERR_6323.Advice="Choose a point that is not on an input wire body(or split input wire body), or use Bitangent and point circle's type.";
//
TopOpInCornerInternalError_ERR_6324="Topological corner operator: internal error /p.";
//
TopOpInCornerParallelError_ERR_6325.Request="Corner operator:";
TopOpInCornerParallelError_ERR_6325.Diagnostic="A parallel of an input wire is impossible to compute.";
TopOpInCornerParallelError_ERR_6325.Advice="Clean your input wire (curvature or tangency), or simplify your support.";
//
TopOpIn3DCorner_ERR_6326.Request="3D Corner operator:";
TopOpIn3DCorner_ERR_6326.Diagnostic="Some solution can be lost because the projection of one of the input curve on the plane gives an auto intersection.";
TopOpIn3DCorner_ERR_6326.Advice="Use another plane , reduce the corner radius or split the input curve.";
//
TopOpInParallelReorderingPb_WNG_6327.Request="Parallel operator :";
TopOpInParallelReorderingPb_WNG_6327.Diagnostic="Reordering of parallel solutions failed";
TopOpInParallelReorderingPb_WNG_6327.Advice="Perform some cuts on the input curve along the shown singularities of the result";
//
TopOpInParallelNewSearchEquivExt_ERR_6348.Request="Parallel operator :";
TopOpInParallelNewSearchEquivExt_ERR_6348.Diagnostic="Parallel computation failure : vertical tangents in parallel law";
TopOpInParallelNewSearchEquivExt_ERR_6348.Advice="Adapt the input law.";
//
TopOpInParallelRelimitationPb_ERR_6349.Request="Parallel operator :";
TopOpInParallelRelimitationPb_ERR_6349.Diagnostic="Relimitation of parallels failed";
TopOpInParallelRelimitationPb_ERR_6349.Advice="Check validity of input curve.";
//

//
// 6350-6399- C2 concatenate
//
TopOpInC2ConcatenateInvalidCurve_ERR_6350.Request="C2 concatenate operator:";
TopOpInC2ConcatenateInvalidCurve_ERR_6350.Diagnostic="In the input wire body, the geometry of an edge is a curve on surface.";
TopOpInC2ConcatenateInvalidCurve_ERR_6350.Advice="Use a 3D curve for each edge of the wire.";
//
// 6400-6449- PConic
//
TopOpInConicInvalidConicDefinition_ERR_6400.Request="Conic operator:";
TopOpInConicInvalidConicDefinition_ERR_6400.Diagnostic="A conic cannot be constructed from the current inputs.";
TopOpInConicInvalidConicDefinition_ERR_6400.Advice="According to the construction mode, modify the order of the points, or modify a tangent.";
//
TopOpInConicGeometricConstructionFailed_ERR_6401.Request="Conic operator:";
TopOpInConicGeometricConstructionFailed_ERR_6401.Diagnostic="The geometric construction of the conic failed.";
TopOpInConicGeometricConstructionFailed_ERR_6401.Advice="Modify one or more points or tangents.";
//
TopOpInConicTopologicalConstructionFailed_ERR_6402.Request="Conic operator:";
TopOpInConicTopologicalConstructionFailed_ERR_6402.Diagnostic="The topological construction of the conic failed.";
TopOpInConicTopologicalConstructionFailed_ERR_6402.Advice="Modify one or more points or tangents.";
//
// 6450 - 6499 - Lay down
TopOpInLayDownNotOnSkin_ERR_6450.Request="Lay down operator:";
TopOpInLayDownNotOnSkin_ERR_6450.Diagnostic="The body to operate is not on the input skin body.";
TopOpInLayDownNotOnSkin_ERR_6450.Advice="Project the body onto the skin.";
//
// 6500-6549- clean curve (smooth curve)
//
TopOpInCleanCrvDeformationConstraintNotReached_ERR_6500.Request="Clean curve operator with deformation constraint:";
TopOpInCleanCrvDeformationConstraintNotReached_ERR_6500.Diagnostic="The maximum deformation between input and computed bodies\n
 is greater than the maximum specified deformation.";
TopOpInCleanCrvDeformationConstraintNotReached_ERR_6500.Advice="Release the continuity constraints or \n
increase the maximum specified deformation.";
//
TopOpInCleanCrvInvalidFixedElement_ERR_6501.Request="Clean curve operator with fixed elements:";
TopOpInCleanCrvInvalidFixedElement_ERR_6501.Diagnostic="A fixed element is not an edge or a vertex of the contour to clean.";
TopOpInCleanCrvInvalidFixedElement_ERR_6501.Advice="Select fixed elements among edges and vertices of the contour to clean.";
//
TopOpIntCleanCrvInternalError_ERR_6502="Clean curve operator: internal error.";
//
TopOpIntCleanCrvCurveDescendance_ERR_6503.Request="Clean curve operator:";
TopOpIntCleanCrvCurveDescendance_ERR_6503.Diagnostic="Geometrical descendance process failed.";
TopOpIntCleanCrvCurveDescendance_ERR_6503.Advice="Modify the parameters.";
//
TopOpIntCleanCrvEdgeDescendance_ERR_6504.Request="Clean curve operator:";
TopOpIntCleanCrvEdgeDescendance_ERR_6504.Diagnostic="Edge descendance process failed.";
TopOpIntCleanCrvEdgeDescendance_ERR_6504.Advice="Modify the parameters.";
//
TopOpIntCleanCrvVertexDescendance_ERR_6505.Request="Clean curve operator:";
TopOpIntCleanCrvVertexDescendance_ERR_6505.Diagnostic="Vertex descendance process failed.";
TopOpIntCleanCrvVertexDescendance_ERR_6505.Advice="Modify the parameters.";
//
TopOpIntCleanCrvOutputG0BiggerInputG0_ERR_6506="Clean curve operator:Operator Failed (Output G0 gap is bigger than input G0 gap).";
//
// 6550-6599- Shell/Thickness/Thick-Offset-Extrapolate Surface 
// Messages generiques :
TopOpInShell_ERR_6550="Shell";
TopOpInShell_ERR_6551="Thickness";
TopOpInShell_ERR_6552="Thick Surface";
TopOpInShell_ERR_6553="Offset Surface";
TopOpInShell_ERR_6554="Extrapolate Surface";
TopOpInShell_ERR_6555="Remove Face";
TopOpInShell_ERR_6556="Trim by Thick";
TopOpInShell_ERR_6557="Remove Edge";
//
TopOpInShellCurrentRestriction_ERR_6560.Request="/p1 operator:";
TopOpInShellCurrentRestriction_ERR_6560.Diagnostic="The result cannot be assembled because of a current or permanent restriction.";
TopOpInShellCurrentRestriction_ERR_6560.Advice="Change value or modify input body.";
//
// Messages specifiques :
//
TopOpInShellSelfIntersection_ERR_6561.Request="/p1 operator:";
TopOpInShellSelfIntersection_ERR_6561.Diagnostic="The resulting body is self-intersecting.";
TopOpInShellSelfIntersection_ERR_6561.Advice="Decrease value.";
//
TopOpInShellLocalDegeneration_ERR_6562.Request="/p1 operator:";
TopOpInShellLocalDegeneration_ERR_6562.Diagnostic="Current offset value leads to a local degeneration on a surface: 
body cannot be built.";
TopOpInShellLocalDegeneration_ERR_6562.Advice="Decrease offset value to avoid the degeneration 
or increase it to make the surface totally disappear.";
//
TopOpInExtrapolateSurfaceDegenerateCurve_ERR_6563.Request="Extrapolate surface operator:";
TopOpInExtrapolateSurfaceDegenerateCurve_ERR_6563.Diagnostic="Current extrapolation value leads to curve degeneration: body cannot be built.";
TopOpInExtrapolateSurfaceDegenerateCurve_ERR_6563.Advice="Decrease this value.";
//
TopOpInShellSurfaceExtrapolation_ERR_6564.Request="/p1 operator:";
TopOpInShellSurfaceExtrapolation_ERR_6564.Diagnostic="Surface extrapolation failed.";
TopOpInShellSurfaceExtrapolation_ERR_6564.Advice="Decrease value.";
//
TopOpInShellCurveExtrapolation_ERR_6565.Request="/p1 operator:";
TopOpInShellCurveExtrapolation_ERR_6565.Diagnostic="Curve extrapolation failed.";
TopOpInShellCurveExtrapolation_ERR_6565.Advice="Decrease value.";
//
TopOpInShellThickSurfaceSideFace_ERR_6566.Request="Thick Surface operator:";
TopOpInShellThickSurfaceSideFace_ERR_6566.Diagnostic="Side faces could not be computed.";
TopOpInShellThickSurfaceSideFace_ERR_6566.Advice="This may be due to the shape of the boundary of the face to offset.";
//
TopOpInShellSingularPoint_ERR_6567.Request="/p1 operator:";
TopOpInShellSingularPoint_ERR_6567.Diagnostic="Singular point can not be handled.";
TopOpInShellSingularPoint_ERR_6567.Advice="Try to use smoothing option or modify input body.";
//
TopOpInShellBadSmoothEdge_ERR_6568.Request="/p1 operator:";
TopOpInShellBadSmoothEdge_ERR_6568.Diagnostic="Offset failed for smooth edges which are weakly sharp.";
TopOpInShellBadSmoothEdge_ERR_6568.Advice="Smooth input body in the neighbourhood of these edges.";
//
TopOpInShellRazorBladeEdge_ERR_6569.Request="/p1 operator:";
TopOpInShellRazorBladeEdge_ERR_6569.Diagnostic="Face inversion makes smooth edge become sharp.";
TopOpInShellRazorBladeEdge_ERR_6569.Advice="Decrease value to avoid this inversion.";
//
TopOpInShellNoInterCrvSur_ERR_6570.Request="/p1 operator:";
TopOpInShellNoInterCrvSur_ERR_6570.Diagnostic="Vertex cannot be computed because incident
face doesn't intersect incident curve anymore.";
TopOpInShellNoInterCrvSur_ERR_6570.Advice="Decrease the value or locally modify the input body.";
//
TopOpInShellNoInterSurSur_ERR_6571.Request="/p1 operator:";
TopOpInShellNoInterSurSur_ERR_6571.Diagnostic="Vertex cannot be computed because incident
edges or faces don't intersect each other anymore.";
TopOpInShellNoInterSurSur_ERR_6571.Advice="Decrease the value or locally modify the input body.";
//
TopOpInShellLocalDegeneration_ERR_6572.Request="shell operator external offset :";
TopOpInShellLocalDegeneration_ERR_6572.Diagnostic="Current offset value leads to a local degeneration on a surface: body cannot be built.";
TopOpInShellLocalDegeneration_ERR_6572.Advice="Decrease offset value to avoid the degeneration or increase it to make the surface totally disappear.";
//
TopOpInShellRemoveFaceCannotBeDone_ERR_6573.Request="/p1 operator:";
TopOpInShellRemoveFaceCannotBeDone_ERR_6573.Diagnostic="A mandatory face to be ignored is necessary for the result.";
TopOpInShellRemoveFaceCannotBeDone_ERR_6573.Advice="Remove it from the face list to be ignored.";
//
TopOpInShellRemoveFaceFailure_ERR_6574.Request="/p1 operator:";
TopOpInShellRemoveFaceFailure_ERR_6574.Diagnostic="The final body can not be closed with selected ignored faces.";
TopOpInShellRemoveFaceFailure_ERR_6574.Advice="Unselect the ignored face.";
//
TopOpInExtrapolateSurfacePartialLyingOn_ERR_6575.Request="Extrapolate surface operator:";
TopOpInExtrapolateSurfacePartialLyingOn_ERR_6575.Diagnostic="Boundary edge is not exactly lying on
the edge support of initial skin.";
TopOpInExtrapolateSurfacePartialLyingOn_ERR_6575.Advice="Select the original edge support of initial skin.";
//
TopOpInShellNonManifoldVertex_ERR_6576.Request="/p1 operator:";
TopOpInShellNonManifoldVertex_ERR_6576.Diagnostic="Non-manifold configuration around a vertex.";
TopOpInShellNonManifoldVertex_ERR_6576.Advice="Modify locally the input body.";
//
TopOpInShellInconsistentLyingOnSides_ERR_6577.Request="/p1 operator:";
TopOpInShellInconsistentLyingOnSides_ERR_6577.Diagnostic="Trimming wires define areas which must be 
both kept and trimmed.";
TopOpInShellInconsistentLyingOnSides_ERR_6577.Advice="Modify trimming areas to make them consistent.";
//
TopOpInShellNotClosedTrimmingWire_ERR_6578.Request="/p1 operator:";
TopOpInShellNotClosedTrimmingWire_ERR_6578.Diagnostic="Trimming wire is opened on a vertex which is not
lying on a skin boundary.";
TopOpInShellNotClosedTrimmingWire_ERR_6578.Advice="Close the set of cutting edges around this vertex
to define the area to keep.";
//
TopOpInShellNonManifoldTrimmingWire_ERR_6579.Request="/p1 operator:";
TopOpInShellNonManifoldTrimmingWire_ERR_6579.Diagnostic="Too many trimming edges around a vertex.";
TopOpInShellNonManifoldTrimmingWire_ERR_6579.Advice="Remove some cutting edges 
to make the input wire manifold.";
//
TopOpInShellPropagationConflict_ERR_6580.Request="/p1 operator:";
TopOpInShellPropagationConflict_ERR_6580.Diagnostic="A face has two conflicting offset values.";
TopOpInShellPropagationConflict_ERR_6580.Advice="Modify the selected faces to supress the ambiguity.";
//
TopOpInShellInconsistentLyingOn_ERR_6581.Request="/p1 operator:";
TopOpInShellInconsistentLyingOn_ERR_6581.Diagnostic="Inconsistent supports for this vertex and its 2 adjacent edges.";
TopOpInShellInconsistentLyingOn_ERR_6581.Advice="Check the supports validity and modify lying on links.";
//
TopOpInThickPlusRegularizedFaces_ERR_6582.Request="Offset operator:";
TopOpInThickPlusRegularizedFaces_ERR_6582.Diagnostic="Some faces cannot be offset accurately:\n a local smoothing is applied on these faces.";
TopOpInThickPlusRegularizedFaces_ERR_6582.Advice="Smooth the input faces to secure the exact offset value.";
//
TopOpInShellC1NotAvailable_ERR_6583.Request="/p1 operator:";
TopOpInShellC1NotAvailable_ERR_6583.Diagnostic="Input body contains C1 surfaces \n but the input feature is too old for C1 treatment.";
TopOpInShellC1NotAvailable_ERR_6583.Advice="Upgrade the input feature or create a new one.";
//
TopOpInShellFadingEdge_ERR_6584.Request="/p1 operator:";
TopOpInShellFadingEdge_ERR_6584.Diagnostic="Offset failed for sharp edges locally smooth (fading edges).";
TopOpInShellFadingEdge_ERR_6584.Advice="Smooth input body in the neighbourhood of these edges or trim tangency area.";
//
TopOpInShellTooThinThickness_ERR_6585.Request="/p1 operator:";
TopOpInShellTooThinThickness_ERR_6585.Diagnostic="The thickness of the solid must be strictly higher than one thousandth of a CATIA unit.";
TopOpInShellTooThinThickness_ERR_6585.Advice="Increase the thickness.";
//
TopOpInShellG0Distortion_ERR_6586.Request="/p1 operator:";
TopOpInShellG0Distortion_ERR_6586.Diagnostic="Boundary distortion is greater than one CATIA unit, due to local sharpness.";
TopOpInShellG0Distortion_ERR_6586.Advice="Decrease offset value.";
//
TopOpInShellGlobalDegeneration_ERR_6587.Request="/p1 operator:";
TopOpInShellGlobalDegeneration_ERR_6587.Diagnostic="Current offset value leads to a global degeneration on a surface: 
body cannot be built.";
TopOpInShellGlobalDegeneration_ERR_6587.Advice="Decrease offset value.";
//
TopOpInShellG1ContactOnConvexSharpEdgeDiag_ERR_6588.Request="/p1 operator:";
TopOpInShellG1ContactOnConvexSharpEdgeDiag_ERR_6588.Diagnostic="One or several edges with a G1 contact are lying on sharp convex edges : 
body cannot be built.";
TopOpInShellG1ContactOnConvexSharpEdgeDiag_ERR_6588.Advice="Try The operation with a shell to thick on the concave side of the body.";
//
TopOpInShellSharpVRepLyingOnSmoothLateralEdgeDiag_ERR_6589.Request="/p1 operator:";
TopOpInShellSharpVRepLyingOnSmoothLateralEdgeDiag_ERR_6589.Diagnostic="One or several sharp vertices are lying on extremities of smooth lateral edges : 
body cannot be built.";
TopOpInShellSharpVRepLyingOnSmoothLateralEdgeDiag_ERR_6589.Advice="Decrease offset value.";
//
TopOpInShellLocalDegeneration_ERR_6590.Request="/p1 operator:";
TopOpInShellLocalDegeneration_ERR_6590.Diagnostic="Current offset value leads to a local degeneration on a surface: The face cannot be offset.";
TopOpInShellLocalDegeneration_ERR_6590.Advice="Try to use smoothing option or decrease offset value to avoid the degeneration 
or increase it to make the surface totally disappear.";
//
TopOpInShell3DDisconnectionPb_ERR_6591.Request="/p1 operator:";
TopOpInShell3DDisconnectionPb_ERR_6591.Diagnostic="3D Disconnection failed. Topology is too complex.";
TopOpInShell3DDisconnectionPb_ERR_6591.Advice="Modify the input lying on edges set.";
//
TopOpInShellCurveExtrapolationRecreateInput_ERR_6592.Request="/p1 operator:";
TopOpInShellCurveExtrapolationRecreateInput_ERR_6592.Diagnostic="Curve extrapolation failed for unclean geometry.";
TopOpInShellCurveExtrapolationRecreateInput_ERR_6592.Advice="Try to re-create input data or decrease value.";
//
TopOpInShellCurveExtrapolationHealInput_ERR_6593.Request="/p1 operator:";
TopOpInShellCurveExtrapolationHealInput_ERR_6593.Diagnostic="Curve extrapolation failed for too large gap generated.";
TopOpInShellCurveExtrapolationHealInput_ERR_6593.Advice="Try to heal the input or decrease value.";
//
TopOpInShellRemoveFaceFailureBadLimiting_ERR_6594.Request="/p1 operator:";
TopOpInShellRemoveFaceFailureBadLimiting_ERR_6594.Diagnostic="The limiting element contains more than one face.";
TopOpInShellRemoveFaceFailureBadLimiting_ERR_6594.Advice="Create a one-face limiting element.";
//
TopOpInShellOffsetFailureWhileTrimming_ERR_6595.Request="/p1 operator:";
TopOpInShellOffsetFailureWhileTrimming_ERR_6595.Diagnostic="Some domains of the input body cannot be assembled after offset.";
TopOpInShellOffsetFailureWhileTrimming_ERR_6595.Advice="Modify the input body or decrease offset value.";
//
TopOpInShellFutureNonManifoldEdge_ERR_6596.Request="/p1 operator:";
TopOpInShellFutureNonManifoldEdge_ERR_6596.Diagnostic="Offset values around the vertex are inconsistent (non-manifold edge creation is forbidden).";
TopOpInShellFutureNonManifoldEdge_ERR_6596.Advice="Modify offset values around offset around the vertex.";
//
TopOpInThickPlusRegularizedFaces_ERR_6597.Request="Offset operator:";
TopOpInThickPlusRegularizedFaces_ERR_6597.Diagnostic="Some faces cannot be offset accurately:\n a global smoothing is applied on these faces.";
TopOpInThickPlusRegularizedFaces_ERR_6597.Advice="Smooth the input faces to secure the exact offset value.";
//
TopOpInShellTwistInsideFace_ERR_6598.Request="/p1 operator:";
TopOpInShellTwistInsideFace_ERR_6598.Diagnostic="Underlying surface is twisted inside face.";
TopOpInShellTwistInsideFace_ERR_6598.Advice="Try to use smoothing option.";
//
//
// 6600-6649- HybOperator
//
TopOpInHybOpInvalidTopology_ERR_6600.Request="Join operator:";
TopOpInHybOpInvalidTopology_ERR_6600.Diagnostic="Unable to process an invalid topology.";
TopOpInHybOpInvalidTopology_ERR_6600.Advice="Modify the input body or delete this topology with the Suppress mode option.";
//
TopOpInHybOpBodyNotIntersecting_ERR_6601.Request="Split or Trim operator:";
TopOpInHybOpBodyNotIntersecting_ERR_6601.Diagnostic="The input bodies are not intersecting.";
TopOpInHybOpBodyNotIntersecting_ERR_6601.Advice="Modify the input bodies or the input used to generate them.";
//
TopOpInHybOpDomainNotIntersecting_ERR_6602.Request="Split or Trim operator:";
TopOpInHybOpDomainNotIntersecting_ERR_6602.Diagnostic="Some domains of the input bodies are not intersecting.";
TopOpInHybOpDomainNotIntersecting_ERR_6602.Advice="Modify the input bodies or the input used to generate them.";
//
TopOpInHybOpInvalidPropagate_ERR_6603.Request="Split or Trim operator:";
TopOpInHybOpInvalidPropagate_ERR_6603.Diagnostic="The splitting or trimming wire defines areas for which the operator \n cannot decide whether they must be kept or not.";
TopOpInHybOpInvalidPropagate_ERR_6603.Advice="Modify the input body or active the Extrapol mode.";
//
TopOpInHybOpInvalidExtrapolation_ERR_6604.Request="Split or Trim operator with the extrapolation mode:";
TopOpInHybOpInvalidExtrapolation_ERR_6604.Diagnostic="The topology cannot be extrapolated.";
TopOpInHybOpInvalidExtrapolation_ERR_6604.Advice="Modify the input body or the input used to generate it.";
//
TopOpInHybOpInvalidPosition_ERR_6605.Request="Split or Trim operator:";
TopOpInHybOpInvalidPosition_ERR_6605.Diagnostic="The splitting or trimming bodies defines areas for which the operator \n cannot decide whether they must be kept or not.";
TopOpInHybOpInvalidPosition_ERR_6605.Advice="Modify the input bodies or the input used to generate them.";
//
TopOpInHybOpInvalidKeepRemoveInput_ERR_6606.Request="Split or Trim operator:";
TopOpInHybOpInvalidKeepRemoveInput_ERR_6606.Diagnostic="The input cells corresponding to the Keep or Remove criteria are invalid because null or do not belong to input bodies.";
TopOpInHybOpInvalidKeepRemoveInput_ERR_6606.Advice="Modify the input cells according the Keep or Remove criteria.";
//
TopOpInHybOpInvalidKeepRemoveConflict_ERR_6607.Request="Split or Trim operator:";
TopOpInHybOpInvalidKeepRemoveConflict_ERR_6607.Diagnostic="The input cells corresponding to the Keep or Remove criteria are conflicting because they define areas for which the operator \n cannot decide whether they must be kept or not.";
TopOpInHybOpInvalidKeepRemoveConflict_ERR_6607.Advice="Modify the input cells according the Keep or Remove criteria.";
//
TopOpInHybOpInvalidKeepRemoveAmbiguous_ERR_6608.Request="Split or Trim operator:";
TopOpInHybOpInvalidKeepRemoveAmbiguous_ERR_6608.Diagnostic="The input cells corresponding to the Keep or Remove criteria are ambiguous because they belong to several areas after cutting operation.";
TopOpInHybOpInvalidKeepRemoveAmbiguous_ERR_6608.Advice="Modify the input cells according the Keep or Remove criteria.";
//
TopOpInHybOpWarningAmbiguousCells_ERR_6609.Request="Split or Trim operator:";
TopOpInHybOpWarningAmbiguousCells_ERR_6609.Diagnostic="Warning : Some cells position is ambiguous.";
TopOpInHybOpWarningAmbiguousCells_ERR_6609.Advice="Use Keep/Remove option or modify input bodies contact.";
//
TopOpInHybOpWarningConfusionCells_ERR_6610.Request="Split or Trim operator:";
TopOpInHybOpWarningConfusionCells_ERR_6610.Diagnostic="Warning : Some cells have a tangent contact and can not be positionned.";
TopOpInHybOpWarningConfusionCells_ERR_6610.Advice="Use Keep/Remove option or modify input bodies contact.";
//
TopOpInHybOpWarningTangentDesignCells_ERR_6611.Request="Split, Trim or Intersect operator:";
TopOpInHybOpWarningTangentDesignCells_ERR_6611.Diagnostic="Warning : Some cells corresponding to a Tangent Design.";
TopOpInHybOpWarningTangentDesignCells_ERR_6611.Advice="Modify if necessary the input bodies or the input used to generate them.";
//
TopOpInSmartProjectUnexpectedSolution_ERR_6612.Request="Smart Project operator:";
TopOpInSmartProjectUnexpectedSolution_ERR_6612.Diagnostic="Result is not piecewise connected";
TopOpInSmartProjectUnexpectedSolution_ERR_6612.Advice="Use Projection and select expected pieces.";
//
TopOpInJoinSharedCells_ERR_6613.Request="Join operator:";
TopOpInJoinSharedCells_ERR_6613.Diagnostic="Some edges, with a gap greater than merging distance, are shared by several input surfaces. The join of this surfaces is then automatic.";
TopOpInJoinSharedCells_ERR_6613.Advice="Set the merging distance equal to the maximun gap.";
//
TopOpInJoinSharedFaces_ERR_6614.Request="Join operator:";
TopOpInJoinSharedFaces_ERR_6614.Diagnostic="Some faces are shared by several input surfaces.";
TopOpInJoinSharedFaces_ERR_6614.Advice="Modify the input surfaces in order to have no shared faces.";
//
TopOpInJoinSharedCells_ERR_6615.Request="Join operator:";
TopOpInJoinSharedCells_ERR_6615.Diagnostic="Some vertices, with a gap greater than merging distance, are shared by several input surfaces. The join of this surfaces is then automatic.";
TopOpInJoinSharedCells_ERR_6615.Advice="Set the merging distance equal to the maximun gap.";
//
TopOpInJoinRazorBladeEdges_ERR_6616.Request="Join operator:";
TopOpInJoinRazorBladeEdges_ERR_6616.Diagnostic="Adjacent faces normals for some internal edges are opposite. It may come from faces overlap.";
TopOpInJoinRazorBladeEdges_ERR_6616.Advice="Modify adjacent faces in order to suppress these overlaps.";
//
TopOpIntHybOpErrorFace_ERR_6617.Request="Join operator:";
TopOpIntHybOpErrorFace_ERR_6617.Diagnostic="Treatment aborted on some faces.";
TopOpIntHybOpErrorFace_ERR_6617.Advice="Remove this faces from input bodies.";
//
TopOpIntJoinError_ERR_6618.Request="Join operator:";
TopOpIntJoinError_ERR_6618.Diagnostic="Join operation has failed.";
TopOpIntJoinError_ERR_6618.Advice="Modify input bodies according to associated diagnostics.";
//
TopOpIntJoinStopOnRBE_ERR_6619.Request="Join operator:";
TopOpIntJoinStopOnRBE_ERR_6619.Diagnostic="Some edges haven't been merged, although they are closer than resolution, because skin will be unorientable.";
TopOpIntJoinStopOnRBE_ERR_6619.Advice="They may come from faces overlap. Modify adjacent faces in order to suppress these overlaps.";
//
TopOpIntJoinWngOnRBE_ERR_6620.Request="Join operator:";
TopOpIntJoinWngOnRBE_ERR_6620.Diagnostic="Some edges haven't been merged, although they are closer than merging distance, because skin will be unorientable.";
TopOpIntJoinWngOnRBE_ERR_6620.Advice="They may come from faces overlap. Modify adjacent faces in order to suppress these overlaps.";
//
TopOpIntJoinUnoriSkin_ERR_6621.Request="Join operator:";
TopOpIntJoinUnoriSkin_ERR_6621.Diagnostic="After some edge merges, the skin is unorientable.";
TopOpIntJoinUnoriSkin_ERR_6621.Advice="It may come from a non manifold configuration which is not supported by Join operator.";
//
TopOpIntJoinUnoriSkin_ERR_6622.Request="Join operator:";
TopOpIntJoinUnoriSkin_ERR_6622.Diagnostic="After some edge merges, the skin is unorientable.";
TopOpIntJoinUnoriSkin_ERR_6622.Advice="Overlaped faces can create such configuration. Check shown faces.";
//
TopOpIntJoinNonManifold_ERR_6623.Request="Join operator:";
TopOpIntJoinNonManifold_ERR_6623.Diagnostic="Some non manifold configurations are detected, they are not managed by Join operator.";
TopOpIntJoinNonManifold_ERR_6623.Advice="Modify input bodies in order to suppress these non manifold configurations.";

//
// 6650-6699- PolarExtremum
//
TopOpInPolarExtremumInvalidOriginOnWire_ERR_6650.Request="Polar extremum operator:";
TopOpInPolarExtremumInvalidOriginOnWire_ERR_6650.Diagnostic="The polar origin is on wire body.";
TopOpInPolarExtremumInvalidOriginOnWire_ERR_6650.Advice="Select an origin that is not on the wire body.";
//
TopOpInPolarExtremumDirPerpendicularToPlane_ERR_6651.Request="Polar extremum operator:";
TopOpInPolarExtremumDirPerpendicularToPlane_ERR_6651.Diagnostic="Unable to compute min or max angle with a direction perpendicular to plane.";
TopOpInPolarExtremumDirPerpendicularToPlane_ERR_6651.Advice="Select a direction with is not perpendicular to plane.";
//
// 6700-6749- spiral
//
TopOpIntSpiralInternalError_ERR_6700="Spiral operator: internal error.";

TopOpInSpiralInvalidOriginNotInPlane_ERR_6701.Request="Spiral operator:";
TopOpInSpiralInvalidOriginNotInPlane_ERR_6701.Diagnostic="The spiral origin is not in the specified plane.";
TopOpInSpiralInvalidOriginNotInPlane_ERR_6701.Advice="Select a point laying in the specified plane.";
//
TopOpInSpiralTooSmallAxis_ERR_6702.Request="Spiral operator:";
TopOpInSpiralTooSmallAxis_ERR_6702.Diagnostic="The spiral axis length is too small.";
TopOpInSpiralTooSmallAxis_ERR_6702.Advice="Select a longer axis.";
//
TopOpInSpiralInvalidAxisNotInPlane_ERR_6703.Request="Spiral operator:";
TopOpInSpiralInvalidAxisNotInPlane_ERR_6703.Diagnostic="The spiral axis is not in the specified plane.";
TopOpInSpiralInvalidAxisNotInPlane_ERR_6703.Advice="Give an axis laying in the specified plane.";
//
TopOpInSpiralNullInputBody_ERR_6704="Spiral operator : an input body is null.";
//
// 6750-6773- spline
//
TopOpInSplineInvalidTangentNotInTangentPlane_ERR_6750.Request="Spline operator:";
TopOpInSplineInvalidTangentNotInTangentPlane_ERR_6750.Diagnostic="At point the tangent given is not in the tangent plane to the surface.";
TopOpInSplineInvalidTangentNotInTangentPlane_ERR_6750.Advice="Give a tangent that is in the tangent plane of the surface.";
//
TopOpInSplineInvalidInputBody_ERR_6751.Request="Spline operator:";
TopOpInSplineInvalidInputBody_ERR_6751.Diagnostic="An input point is invalid.";
TopOpInSplineInvalidInputBody_ERR_6751.Advice="Give a valid point.";
//
TopOpInSplineInvalidConfusedBodies_ERR_6752.Request="Spline operator:";
TopOpInSplineInvalidConfusedBodies_ERR_6752.Diagnostic="Two successive points are geometrically identical.";
TopOpInSplineInvalidConfusedBodies_ERR_6752.Advice="Choose successive points at position /p1 that are geometrically distinct.";
//
TopOpInSplineInvalidTangent_ERR_6753.Request="Spline operator:";
TopOpInSplineInvalidTangent_ERR_6753.Diagnostic="Tangent is NULL or less than resolution";
TopOpInSplineInvalidTangent_ERR_6753.Advice="Choose a tangent at position /p1 more than resolution";
//
// 6774-6799- circle
//
//
TopOpInCircleVertexNotOnSameSupport_ERR_6774.Request="Circle operator with two points and a radius";
TopOpInCircleVertexNotOnSameSupport_ERR_6774.Diagnostic="Both vertices are not on the same support"; 
TopOpInCircleVertexNotOnSameSupport_ERR_6774.Advice="Choose another vertex";
//
TopOpInSplineInvalidAngleReference_ERR_6775.Request="Trimmed circle operator:";
TopOpInSplineInvalidAngleReference_ERR_6775.Diagnostic="The selected point to define the reference for the start and end angles is the circle center.";
TopOpInSplineInvalidAngleReference_ERR_6775.Advice="Choose a point different from the center, so that the line between this point and the center can be defined.";
//
TopOpInCircleTooLargeAngle_ERR_6776.Request="Circle operator:";
TopOpInCircleTooLargeAngle_ERR_6776.Diagnostic="The range between start and end angle values is larger than 2*PI.";
TopOpInCircleTooLargeAngle_ERR_6776.Advice="Decrease end angle value or increase start angle value.";
//
TopOpInCircleOutOfSupport_ERR_6777.Request="Circle operator:";
TopOpInCircleOutOfSupport_ERR_6777.Diagnostic="Circle can not be built on shell.";
TopOpInCircleOutOfSupport_ERR_6777.Advice="Use an infinite plane as support.";
//
TopOpInCircleRadiusTooShort_ERR_6778.Request="Circle operator:";
TopOpInCircleRadiusTooShort_ERR_6778.Diagnostic="Radius too short.";
TopOpInCircleRadiusTooShort_ERR_6778.Advice="Change the radius or input bodies.";
//
TopOpInCirclePointNoProjectionOnCrv_ERR_6779.Request="Circle operator: Bitangent and point";
TopOpInCirclePointNoProjectionOnCrv_ERR_6779.Diagnostic="No solution for the projection of the point on Reference Curve"; 
TopOpInCirclePointNoProjectionOnCrv_ERR_6779.Advice="Modify the point";
//
// 6800-6820- wirecontinuity
//
TopOpInWireContinuityInvalidBodyWire_ERR_6800.Request="Wire continuity measure operator:";
TopOpInWireContinuityInvalidBodyWire_ERR_6800.Diagnostic="The body must be made of a single manifold wire.";
TopOpInWireContinuityInvalidBodyWire_ERR_6800.Advice="Use a body made of a single manifold wire.";
//
// 6821-6849- Plane
//
TopOpInRotationAxisNotParallel_ERR_6821.Request="Topological plane creation:";
TopOpInRotationAxisNotParallel_ERR_6821.Diagnostic="the rotation axis is not parallel to the reference.";
TopOpInRotationAxisNotParallel_ERR_6821.Advice="Use a rotation axis parallel to the reference.";
//
TopOpInBasicBodyPlanar_ERR_6822.Request="Plane Creation from three points:";
TopOpInBasicBodyPlanar_ERR_6822.Diagnostic="Two of the three points are the same.";
TopOpInBasicBodyPlanar_ERR_6822.Advice="Select three differents points";
//
TopOpInBasicBodyPlanar_ERR_6823.Request="Plane Creation from a point and a line:";
TopOpInBasicBodyPlanar_ERR_6823.Diagnostic="The point selected is on the line";
TopOpInBasicBodyPlanar_ERR_6823.Advice="Choose another point";
//
TopOpInBasicBodyPlanar_ERR_6824.Request="Plane Creation through line angle with a plane:";
TopOpInBasicBodyPlanar_ERR_6824.Diagnostic="The inputs are not correct";
TopOpInBasicBodyPlanar_ERR_6824.Advice="Change your inputs";
//
TopOpInBasicBodyPlanar_ERR_6825.Request="Plane Creation throught line angle with a plane:";
TopOpInBasicBodyPlanar_ERR_6825.Diagnostic="No solution. The angle must be between (angle between initial line and initial plane) \n
and (180 degree - angle between initial line and initial plane)";
TopOpInBasicBodyPlanar_ERR_6825.Advice="Change angle value";
//
TopOpInBasicBodyPlanar_ERR_6826.Request="Plane Creation throught line angle with a plane:";
TopOpInBasicBodyPlanar_ERR_6826.Diagnostic="Error during plane result body computation";
TopOpInBasicBodyPlanar_ERR_6826.Advice="Change angle value";
//
TopOpInBasicBodyPlanar_ERR_6827.Request="Plane Creation throught line angle with a plane:";
TopOpInBasicBodyPlanar_ERR_6827.Diagnostic="Your line is perpendicular to the input plane. No solutions or an infinity number of solutions.";
TopOpInBasicBodyPlanar_ERR_6827.Advice="Change your inputs.";
//
TopOpInBasicBodyPlanar_ERR_6828.Request="Plane Creation from three points:";
TopOpInBasicBodyPlanar_ERR_6828.Diagnostic="The three points are aligned.";
TopOpInBasicBodyPlanar_ERR_6828.Advice="Select three differents which are not aligned";
//
// 6850-6879- CloseOperator
//
TopOpInCloseOperator_ERR_6850.Request="Closed body creation:";
TopOpInCloseOperator_ERR_6850.Diagnostic="One of the planar boundaries leads to an invalid face.";
TopOpInCloseOperator_ERR_6850.Advice="Try the Join operator on the surface before closing it.";
//
TopOpInCloseOperator_ERR_6851.Request="Closed body creation:";
TopOpInCloseOperator_ERR_6851.Diagnostic="an opening in the selected body cannot be closed \n
because a closing planar face would intersect one of its adjacent faces.";
TopOpInCloseOperator_ERR_6851.Advice="Check all body openings for healing operations.";
//
TopOpInCloseOperator_ERR_6852.Request="Closed body creation:";
TopOpInCloseOperator_ERR_6852.Diagnostic="The input body does not contains faces.";
TopOpInCloseOperator_ERR_6852.Advice="Provide a input body that contains faces.";
//
TopOpInCloseOperator_ERR_6853.Request="Closed body creation:";
TopOpInCloseOperator_ERR_6853.Diagnostic="The input body contains intersecting shells.";
TopOpInCloseOperator_ERR_6853.Advice="Provide a input body which has no intersecting shells.";
//
// 6880-6899- Shell from closed wire
//
TopOpInShellFromClosedWireOperator_ERR_6880.Request="Shell from closed wire operator:";
TopOpInShellFromClosedWireOperator_ERR_6880.Diagnostic="Warning : Input wire is self intersecting.";
TopOpInShellFromClosedWireOperator_ERR_6880.Advice="Modify input wire.";


//
//Operator UnFoldedAeroOperator (6900-6949)
//
TopOpInUnFoldedAero_ERR_6900.Request="UnFoldedAero operator :";
TopOpInUnFoldedAero_ERR_6900.Diagnostic="An error occurred in UnFoldedAero operator.";
TopOpInUnFoldedAero_ERR_6900.Advice="An error occurred in UnFoldedAero operator : change the values of the parameters.";
//
TopOpInUnFoldedAero_ERR_6901.Request="UnFoldedAero operator :";
TopOpInUnFoldedAero_ERR_6901.Diagnostic="The result contains at least one twisted wire.";
TopOpInUnFoldedAero_ERR_6901.Advice="Decrease the parameters' values or reduce the surfaces' deformations.";
//
TopOpInUnFoldedAero_ERR_6902.Request="UnFoldedAero operator :";
TopOpInUnFoldedAero_ERR_6902.Diagnostic="RefCurve bad definition : domain number not equal to 1.";
TopOpInUnFoldedAero_ERR_6902.Advice="Domain number must be equal to 1.";
//
TopOpInUnFoldedAero_ERR_6903.Request="UnFoldedAero operator :";
TopOpInUnFoldedAero_ERR_6903.Diagnostic="RefCurve bad definition : Edge number between folded and flattened RefCurves are not equal.";
TopOpInUnFoldedAero_ERR_6903.Advice="Edge number between folded and flattened RefCurves must be equal.";
//
TopOpInUnFoldedAero_ERR_6904.Request="UnFoldedAero operator :";
TopOpInUnFoldedAero_ERR_6904.Diagnostic="RefCurve bad definition : Check null pointer.";
TopOpInUnFoldedAero_ERR_6904.Advice="Check null pointer.";
//
TopOpInUnFoldedAero_ERR_6905.Request="UnFoldedAero operator :";
TopOpInUnFoldedAero_ERR_6905.Diagnostic="An error occured during the Check.";
TopOpInUnFoldedAero_ERR_6905.Advice="Check the bend tangent line input.";
//
TopOpInUnFoldedAero_ERR_6906.Request="UnFoldedAero operator :";
TopOpInUnFoldedAero_ERR_6906.Diagnostic="RefCurves bad definition : The mapping between folded and flattened RefCurves is not coherent.";
TopOpInUnFoldedAero_ERR_6906.Advice="Mapping between folded and flattened RefCurves is not coherent.";
//
TopOpInUnFoldedAero_ERR_6907.Request="UnFoldedAero operator :";
TopOpInUnFoldedAero_ERR_6907.Diagnostic="RefCurve bad definition : The bend tangent line have an internal tangency discontinuity.";
TopOpInUnFoldedAero_ERR_6907.Advice="The bend tangent line have an internal tangency discontinuity.";
//
TopOpInUnFoldedAero_ERR_6908.Request="UnFoldedAero operator :";
TopOpInUnFoldedAero_ERR_6908.Diagnostic="Size inconsistency between the two support shells : Check the compatibility of the different shells.";
TopOpInUnFoldedAero_ERR_6908.Advice="Check the compatibility of the different shells.";
//
TopOpInUnFoldedAero_ERR_6909.Request="UnFoldedAero operator :";
TopOpInUnFoldedAero_ERR_6909.Diagnostic="Spine curve bad definition : Check the length compatibility of the different wire.";
TopOpInUnFoldedAero_ERR_6909.Advice="The wire to be transformed cannot be projected on the spine curve";
//
TopOpInUnFoldedAero_ERR_6910.Request="UnFoldedAero operator :";
TopOpInUnFoldedAero_ERR_6910.Diagnostic="UnFoldedAero bad parameter : The wire to be transformed cannot be projected on the neutral surface.";
TopOpInUnFoldedAero_ERR_6910.Advice="Check the input neutral surface or the value passed to the SetProjectDistance method.";
//
TopOpInUnFoldedAero_ERR_6911.Request="UnFoldedAero operator :";
TopOpInUnFoldedAero_ERR_6911.Diagnostic="UnFoldedAero bad parameter : The transformed wire is twisted.";
TopOpInUnFoldedAero_ERR_6911.Advice="Check that yours inputs don't cause a twisted result.";
//
TopOpInUnFoldedAero_ERR_6912.Request="UnFoldedAero operator :";
TopOpInUnFoldedAero_ERR_6912.Diagnostic="UnFoldedAero bad parameter : The transformed wire have a micro-twist.";
TopOpInUnFoldedAero_ERR_6912.Advice="Check that yours inputs don't cause a twisted result.";
//

//
//Operator Regul Offset (6950-6974)
//
TopOpInRegulOffsetDeviation_ERR_6950.Request="Smoothed Offset operator :";
TopOpInRegulOffsetDeviation_ERR_6950.Diagnostic="Input deviation has not been respected.";
TopOpInRegulOffsetDeviation_ERR_6950.Advice="Try to increase input deviation.";
//
TopOpInRegulOffsetFacesAdj_ERR_6951.Request="Smoothed Offset operator :";
TopOpInRegulOffsetFacesAdj_ERR_6951.Diagnostic="Cannot regularize two (or more than two) adjacent faces";
TopOpInRegulOffsetFacesAdj_ERR_6951.Advice="Try to change inputs.";
//
TopOpInRegulOffsetFailure_ERR_6952.Request="Smoothed Offset operator :";
TopOpInRegulOffsetFailure_ERR_6952.Diagnostic="Cannot regularize some faces";
TopOpInRegulOffsetFailure_ERR_6952.Advice="Try to change inputs.";
//
TopOpInRegulOffsetOffsetability_ERR_6953.Request="Smoothed Offset operator :";
TopOpInRegulOffsetOffsetability_ERR_6953.Diagnostic="Some faces are not offsetable for input value";
TopOpInRegulOffsetOffsetability_ERR_6953.Advice="Decrease offset value.";
//

//
// Rough Offset (6975-6999)
//
TopOpInRoughOffset_ERR_6975.Request    = "/p1 operator:";
TopOpInRoughOffset_ERR_6975.Diagnostic = "Input element out of scope.";
TopOpInRoughOffset_ERR_6975.Advice     = "Modify the input element.";
//
TopOpInRoughOffset_ERR_6976.Request    = "/p1 operator:";
TopOpInRoughOffset_ERR_6976.Diagnostic = "Input element with several boundaries";
TopOpInRoughOffset_ERR_6976.Advice     = "Remove additional boundaries using Fill or Healing.";
//
TopOpInRoughOffset_ERR_6977.Request    = "/p1 operator:";
TopOpInRoughOffset_ERR_6977.Diagnostic = "Failure during target surface computation.";
TopOpInRoughOffset_ERR_6977.Advice     = "Check that there exists one direction in which the part has no hidden area.";
//
TopOpInRoughOffset_ERR_6978.Request    = "Memory allocation failed during /p1 operation:";
TopOpInRoughOffset_ERR_6978.Diagnostic = "The deviation is too small to cope with the largest dimension of the part (along X, Y, Z).";
TopOpInRoughOffset_ERR_6978.Advice     = "Increase the deviation.";
//
TopOpInRoughOffset_ERR_6979.Request    = "No solution for /p1 operation:";
TopOpInRoughOffset_ERR_6979.Diagnostic = "The deviation is too large to cope with the smallest dimension of the part (along X, Y, Z).";
TopOpInRoughOffset_ERR_6979.Advice     = "Decrease the deviation.";
//
TopOpInRoughOffset_ERR_6980.Request    = "No solution for /p1 operation:";
TopOpInRoughOffset_ERR_6980.Diagnostic = "Internal error.";
TopOpInRoughOffset_ERR_6980.Advice     = "Try to improve the quality of the input element.";
//
TopOpInRoughOffset_ERR_6981.Request    = "/p1 operator:";
TopOpInRoughOffset_ERR_6981.Diagnostic = "Input geometry is locally invalid (twist).";
TopOpInRoughOffset_ERR_6981.Advice     = "Fix the geometry around the shown elements.";
//
// Generic Messages :
TopOpInRoughOffset_ERR_6998="Light Surface";
TopOpInRoughOffset_ERR_6999="Rough Offset";
//

//
// sweep and loft- new-
//
TopOpInSweepInvalidReference_ERR_7001.Request="Sweep or loft operator:";
TopOpInSweepInvalidReference_ERR_7001.Diagnostic="Invalid reference element type 
for the computation of the moving plane (perpendicular to the spine) or the tangency conditions.";
TopOpInSweepInvalidReference_ERR_7001.Advice="The reference element must be shell or a surface .";
//
TopOpInSweepNonConnexElement_ERR_7002.Request="Sweep or loft operator:";
TopOpInSweepNonConnexElement_ERR_7002.Diagnostic="Non connex selected elements.";
TopOpInSweepNonConnexElement_ERR_7002.Advice="Each profile, section and guide must be a connex entitie.";
//
// N.B je cree aussi un message 7035 qui est une variante pour les warnings
TopOpInSweepInvalidCenterCurve_ERR_7003.Request="Sweep operator:";
TopOpInSweepInvalidCenterCurve_ERR_7003.Diagnostic="The center curve is neither continuous in tangency, nor planar,
and the result sweep is invalid."; 
TopOpInSweepInvalidCenterCurve_ERR_7003.Advice="Select a curve that is continuous in tangency or a planar curve to define the center curve
 or use smooth sweeping options with appropriate parameters";
//
TopOpInSweepIdenticalGuides_ERR_7004.Request="Sweep or loft operator:";
TopOpInSweepIdenticalGuides_ERR_7004.Diagnostic="Identical guides have been selected ."; 
TopOpInSweepIdenticalGuides_ERR_7004.Advice="All guides must be distinct.";
//
TopOpInSweepInvalidSpine_ERR_7005.Request="Sweep or loft operator:";
TopOpInSweepInvalidSpine_ERR_7005.Diagnostic="Invalid spine ."; 
TopOpInSweepInvalidSpine_ERR_7005.Advice="The spine must be a curve or a wire.";
//
TopOpInSweepInvalidProfile_ERR_7006.Request="Sweep or loft operator:";
TopOpInSweepInvalidProfile_ERR_7006.Diagnostic="Invalid profile or section."; 
TopOpInSweepInvalidProfile_ERR_7006.Advice="The profile or the section must be a wire.";
//
TopOpInSweepNoSelection_ERR_7007.Request="Sweep or loft operator:";
TopOpInSweepNoSelection_ERR_7007.Diagnostic="Neither spine nor guide have been selected  ."; 
TopOpInSweepNoSelection_ERR_7007.Advice="Select at least a spine or one guide for a sweep or loft operation.";
//
TopOpInSweepMovingPlane_ERR_7008.Request="Sweep operator:";
TopOpInSweepMovingPlane_ERR_7008.Diagnostic="This type of moving plane definition is not taken into account yet  ."; 
TopOpInSweepMovingPlane_ERR_7008.Advice="Choose an other definition.";
//
TopOpInSweepProfileDimension012_ERR_7009.Request="Sweep or loft operator:";
TopOpInSweepProfileDimension012_ERR_7009.Diagnostic="The profile/section contains volume domains."; 
TopOpInSweepProfileDimension012_ERR_7009.Advice="The profile/section dimension must be 0, 1 or 2.";
//
TopOpInSweepEmptyProfile_ERR_7010.Request="Sweep or loft operator:";
TopOpInSweepEmptyProfile_ERR_7010.Diagnostic="The profile/section is empty."; 
TopOpInSweepEmptyProfile_ERR_7010.Advice="Use a non empty profile/section.";
//
TopOpInSweepNonHomogeneousProfile_ERR_7011.Request="Sweep or loft operator:";
TopOpInSweepNonHomogeneousProfile_ERR_7011.Diagnostic="The profile/section is not homogeneous: 
it contains domains of different dimensions."; 
TopOpInSweepNonHomogeneousProfile_ERR_7011.Advice="Use an homogeneous profile/section.";
//
TopOpInSweepGuideDimension12_ERR_7012.Request="Sweep or loft operator:";
TopOpInSweepGuideDimension12_ERR_7012.Diagnostic="The guide contains points or volumes."; 
TopOpInSweepGuideDimension12_ERR_7012.Advice="The guide dimension must be 1 or 2.";
//
TopOpInSweepEmptyGuide_ERR_7013.Request="Sweep or loft operator:";
TopOpInSweepEmptyGuide_ERR_7013.Diagnostic="The guide is empty."; 
TopOpInSweepEmptyGuide_ERR_7013.Advice="Use a non empty guide.";
//
TopOpInSweepMultiDomainGuide_ERR_7014.Request="Sweep or loft operator:";
TopOpInSweepMultiDomainGuide_ERR_7014.Diagnostic="The guide has more than one domain."; 
TopOpInSweepMultiDomainGuide_ERR_7014.Advice="Use a guide with a single domain.";
//
TopOpInSweepSpineDimension1_ERR_7015.Request="Sweep or loft operator:";
TopOpInSweepSpineDimension1_ERR_7015.Diagnostic="The spine contains domains that are not wires."; 
TopOpInSweepSpineDimension1_ERR_7015.Advice="The spine must be a wire.";
//
TopOpInSweepEmptySpine_ERR_7016.Request="Sweep or loft operator:";
TopOpInSweepEmptySpine_ERR_7016.Diagnostic="The spine is empty."; 
TopOpInSweepEmptySpine_ERR_7016.Advice="Use a non empty spine.";
//
TopOpInSweepMultiDomainSpine_ERR_7017.Request="Sweep or loft operator:";
TopOpInSweepMultiDomainSpine_ERR_7017.Diagnostic="The spine has more than one domain.";  
TopOpInSweepMultiDomainSpine_ERR_7017.Advice="Use a spine with a single wire domain.";
//
TopOpInSweepSelfIntersectingGuide_ERR_7018.Request="Sweep or loft operator:";
TopOpInSweepSelfIntersectingGuide_ERR_7018.Diagnostic="The guide is self intersecting."; 
TopOpInSweepSelfIntersectingGuide_ERR_7018.Advice="Use a guide that is not self intersecting.";
//
TopOpInSweepSelfIntersectingSpine_ERR_7019.Request="Sweep or loft operator:";
TopOpInSweepSelfIntersectingSpine_ERR_7019.Diagnostic="The spine is self intersecting."; 
TopOpInSweepSelfIntersectingSpine_ERR_7019.Advice="Use a spine that is not self intersecting.";
//
TopOpInSweepNonPlanarMultiDomainProfile_ERR_7020.Request="Sweep or loft operator:";
TopOpInSweepNonPlanarMultiDomainProfile_ERR_7020.Diagnostic="The profile/section has more than one domain and is not planar."; 
TopOpInSweepNonPlanarMultiDomainProfile_ERR_7020.Advice="Choose a profile/section that is planar or with only one domain.";
//
TopOpInSweepProfileDimensionWithTrimBody_ERR_7021.Request="Sweep or loft operator:";
TopOpInSweepProfileDimensionWithTrimBody_ERR_7021.Diagnostic="The guide has the wrong dimension, according to the trimming body."; 
TopOpInSweepProfileDimensionWithTrimBody_ERR_7021.Advice="The guide dimension must be the dimension of the trimming body 
minus 1.";
//
TopOpInSweepNonG1Spine_ERR_7022.Request="Sweep or loft operator:";
TopOpInSweepNonG1Spine_ERR_7022.Diagnostic="The spine is not continuous in tangency,
and the result sweep is invalid."; 
TopOpInSweepNonG1Spine_ERR_7022.Advice="Use a spine that is continuous in tangency.";
//
TopOpInLoftSectionD1Coupling_ERR_7023.Request="Loft or blend operator with automatic coupling:";
TopOpInLoftSectionD1Coupling_ERR_7023.Diagnostic="Coupling the vertices of the sections between two guides is not possible.
On a domain of a section between two guides, there is not the same count of vertices that are continuous, but not tangency continuous."; 
TopOpInLoftSectionD1Coupling_ERR_7023.Advice="- Use sections with the same continuity type or
- add or remove guides.";
//
TopOpInLoftSectionD2Coupling_ERR_7024.Request="Loft or blend operator with automatic coupling:";
TopOpInLoftSectionD2Coupling_ERR_7024.Diagnostic="Coupling the vertices of the sections between two guides is not possible.\n
On a domain of a section between:
- two guides, or
- two vertices that are not tangency continuous, or
- a guide and a vertex that is not tangency continuous,
there is not the same count of vertices that are continuous in tangency, but not in curvature."; 
TopOpInLoftSectionD2Coupling_ERR_7024.Advice="- Use sections with the same continuity type, or
- add or remove guides.";
//
TopOpInLoftSectionCoupling_ERR_7025.Request="Loft or blend operator with automatic coupling:";
TopOpInLoftSectionCoupling_ERR_7025.Diagnostic="Coupling the vertices of the sections between two guides is not possible.\n
On a domain of a section between two guides, there is not the same count of vertices ."; 
TopOpInLoftSectionCoupling_ERR_7025.Advice="- Use sections with the count of vertices or
- add or remove guides.";
//
TopOpInLoftProfilesAreIntersecting_ERR_7026.Request="Loft operator:";
TopOpInLoftProfilesAreIntersecting_ERR_7026.Diagnostic="Some profiles are intersecting together."; 
TopOpInLoftProfilesAreIntersecting_ERR_7026.Advice="Use profiles which are not intersecting together.";
//
TopOpInSweepTopologicalTwist_ERR_7027.Request="Sweep operator:";
TopOpInSweepTopologicalTwist_ERR_7027.Diagnostic="The extrusion of a vertex of the profile leads to a cusp."; 
TopOpInSweepTopologicalTwist_ERR_7027.Advice="Use a guide with a smaller curvature.";
//
TopOpInLoftTangencyOnInternalSection_ERR_7028.Request="Loft operator:";
TopOpInLoftTangencyOnInternalSection_ERR_7028.Diagnostic="A tangency constraint is imposed 
- either on the first or last section of the loft and this profile does not relimit the loft
- or on an internal section of the loft."; 
TopOpInLoftTangencyOnInternalSection_ERR_7028.Advice="Suppress the constraint or use the relimit option.";
//
TopOpInExtrapolGuideNonG1_ERR_7029.Request="Extrapol Operator:";
TopOpInExtrapolGuideNonG1_ERR_7029.Diagnostic="The curve is not continuous in tangency.";
TopOpInExtrapolGuideNonG1_ERR_7029.Advice="Split the curve and extrapol each domain.";
//
TopOpInSweepTooSharp_ERR_7030.Request="Sweep or Loft operator:";
TopOpInSweepTooSharp_ERR_7030.Diagnostic="Surface is too sharp."; 
TopOpInSweepTooSharp_ERR_7030.Advice="Input data incompatible.
It may lead to an error in following operations";
//
// voir aussi 7046 a 7049
TopOpInSweepSmallEdge_ERR_7031.Request="Sweep or Loft or Blend operator:";
TopOpInSweepSmallEdge_ERR_7031.Diagnostic="Face has a small edge."; 
TopOpInSweepSmallEdge_ERR_7031.Advice="It may lead to an error in following operations.
- Clean input data
- Check coupling data (loft, blend)";
//
TopOpInSweepNoKeptArea_ERR_7032.Request="Sweep or Loft or Blend operator:";
TopOpInSweepNoKeptArea_ERR_7032.Diagnostic="No kept area when using specified cutting data."; 
TopOpInSweepNoKeptArea_ERR_7032.Advice="Check input data";
//
TopOpInExtrapolLostOfDir_ERR_7033.Request="Extrapol Operator:";
TopOpInExtrapolLostOfDir_ERR_7033.Diagnostic="Surfaces can not be build with all direction constraints.";
TopOpInExtrapolLostOfDir_ERR_7033.Advice="Remove some directionnal edges.";
//
TopOpInSweepInternalProfileInReport_ERR_7034.Request="Loft operator:";
TopOpInSweepInternalProfileInReport_ERR_7034.Diagnostic="An intermediate section has been used for naming."; 
TopOpInSweepInternalProfileInReport_ERR_7034.Advice="Beware of instability due to changes in vivicity or vertex coupling.";
//
// 7035: variante pour warning du message 7003
TopOpInSweepInvalidCenterCurveWarning_ERR_7035.Request="Sweep operator:";
TopOpInSweepInvalidCenterCurveWarning_ERR_7035.Diagnostic="The center curve is neither continuous in tangency, nor planar,
computation might fail even with little changes in input data."; 
TopOpInSweepInvalidCenterCurveWarning_ERR_7035.Advice="Select a curve that is continuous in tangency or a planar curve to define the center curve or
 use smooth sweeping options with appropriate parameters";
//
// 7036: variante pour warning sweep du message 5012
TopOpInSweepCheckGapWarning_ERR_7036.Request="Sweep or Loft or Blend operator:";
TopOpInSweepCheckGapWarning_ERR_7036.Diagnostic="Gap detected between resulting surfaces.";
TopOpInSweepCheckGapWarning_ERR_7036.Advice="Modify the parameter value(s) or tolerant modelling parameter value(s) (if any)
or change the operand(s).";
//
// 7037: contraintes de tangences externes non respectées
TopOpInSweepCheckExternalTangencyWarning_ERR_7037.Request="Sweep or Loft or Blend operator:";
TopOpInSweepCheckExternalTangencyWarning_ERR_7037.Diagnostic="Tangency discontinuity detected between resulting topology and constraint surface.";
TopOpInSweepCheckExternalTangencyWarning_ERR_7037.Advice="Modify the parameter value(s) or tolerant modelling parameter value(s) (if any)
or change the operand(s).";
//
// 7038: nettoyage impossible
TopOpInSweepImpossibleCleanWarning_ERR_7038.Request="Sweep or Loft or Blend operator:";
TopOpInSweepImpossibleCleanWarning_ERR_7038.Diagnostic="One input contour could not be cleaned.";
TopOpInSweepImpossibleCleanWarning_ERR_7038.Advice="Modify the tolerant modelling parameter value(s) 
or change the operand(s).";
//
// 7039: profil positionné sur un vertex C0
TopOpInSweepProfileNearC0Vertex_ERR_7039.Request="Sweep operator:";
TopOpInSweepProfileNearC0Vertex_ERR_7039.Diagnostic="The profile contour is positionned on or near a vertex where the guide
is not tangency continuous. Result may be instable.";
TopOpInSweepProfileNearC0Vertex_ERR_7039.Advice="Change profile position.";
//
// 7040,7041,7042 not lying on elements. (with new error standard) NLD280704 
TopOpInNotLyingOn_ERR_7040.Status="Topological operators:";
TopOpInNotLyingOn_ERR_7040.Diagnostic="An input wire does not lie on the shell support.";
TopOpInNotLyingOn_ERR_7040.Advice="Project it on the support, and use this projection.";
//
TopOpInPtNotLyingOnWire_ERR_7041.Status="Topological operators:";
TopOpInPtNotLyingOnWire_ERR_7041.Diagnostic="An input point does not lie on the wire support.";
TopOpInPtNotLyingOnWire_ERR_7041.Advice="Project it on the support, and use this projection.";
//
TopOpInPtNotLyingOnShell_ERR_7042.Status="Topological operators:";
TopOpInPtNotLyingOnShell_ERR_7042.Diagnostic="An input point does not lie on the shell support.";
TopOpInPtNotLyingOnShell_ERR_7042.Advice="Project it on the support, and use this projection.";
//
TopOpInSweepNonC2NotAvailable_ERR_7043.Request="Sweep or Loft or Blend operator:";
TopOpInSweepNonC2NotAvailable_ERR_7043.Diagnostic="Input body contains C1 non C2 surfaces or curves but the input feature is too old for C1 treatment.";
TopOpInSweepNonC2NotAvailable_ERR_7043.Advice="Upgrade the input feature or create a new one.";
// NLD081004
TopOpInSweepNullHomogenizedWire_ERR_7044.Request="Sweep or Loft or Blend Operator:";
TopOpInSweepNullHomogenizedWire_ERR_7044.Diagnostic="An intermediate relimited wire has no edge.";
TopOpInSweepNullHomogenizedWire_ERR_7044.Advice="Modify the input to ensure a correct wire relimitation.
Check wires relative positions";
//
// NLD081004
TopOpInSweepNullEdgeInHomogenizedWire_ERR_7045.Request="Sweep or Loft or Blend Operator:";
TopOpInSweepNullEdgeInHomogenizedWire_ERR_7045.Diagnostic="An intermediate homogenized wire has a null edge.";
TopOpInSweepNullEdgeInHomogenizedWire_ERR_7045.Advice="Modify the input to ensure a correct homogenization of all wires.";
//
// NLD281004
TopOpInSweepSmallEdgeFromInitialGuide_ERR_7046.Request="Sweep or Loft or Blend operator:";
TopOpInSweepSmallEdgeFromInitialGuide_ERR_7046.Diagnostic="Face has a small edge that may come from an initial guide or spine."; 
TopOpInSweepSmallEdgeFromInitialGuide_ERR_7046.Advice="It may lead to an error in following operations.
- Clean input data
- Check input guides or spine";
//
// NLD281004
TopOpInSweepSmallEdgeFromInitialProfile_ERR_7047.Request="Sweep or Loft operator:";
TopOpInSweepSmallEdgeFromInitialProfile_ERR_7047.Diagnostic="Face has a small edge that may come from an initial profile."; 
TopOpInSweepSmallEdgeFromInitialProfile_ERR_7047.Advice="It may lead to an error in following operations.
- Clean input data
- Check input profiles";
//
// NLD281004
TopOpInSweepSmallEdgeFromFinalGuide_ERR_7048.Request="Sweep or Loft or Blend operator:";
TopOpInSweepSmallEdgeFromFinalGuide_ERR_7048.Diagnostic="Face has a small edge that may come from a final guide or spine."; 
TopOpInSweepSmallEdgeFromFinalGuide_ERR_7048.Advice="It may lead to an error in following operations.
- Clean input data
- Check guide support faces
- Check guide vertices coupling by spine plane";
//
// NLD281004
TopOpInSweepSmallEdgeFromFinalProfile_ERR_7049.Request="Sweep or Loft operator:";
TopOpInSweepSmallEdgeFromFinalProfile_ERR_7049.Diagnostic="Face has a small edge that may come from a final profile."; 
TopOpInSweepSmallEdgeFromFinalProfile_ERR_7049.Advice="It may lead to an error in following operations.
- Clean input data
- Check profile support faces
- Check profile vertices coupling";
//
// NLD281004
TopOpInSweepProfileOrderWarning_ERR_7050.Request="Loft operator:";
TopOpInSweepProfileOrderWarning_ERR_7050.Diagnostic="Wrong section order along the spine."; 
TopOpInSweepProfileOrderWarning_ERR_7050.Advice="Computed surfaces may not correspond to user intent.
- Change section selection order
- Verify that each section is in a plane normal to the spine";
//
// FDS040105
TopOpInSweepOpenProfileTwist_ERR_7051.Request="Sweep operator:";
TopOpInSweepOpenProfileTwist_ERR_7051.Diagnostic="The extrapolation of the open profile is intersecting the profile."; 
TopOpInSweepOpenProfileTwist_ERR_7051.Advice="Modify open profile to avoid a twist.";
//
// NLD120105 message issu de GeoOpInLoftNoIntersection_ERR_3008 pour aide au diagnostic
TopOpInLoftNoIntersection_ERR_7052.Request ="Geometric loft operator:";
TopOpInLoftNoIntersection_ERR_7052.Diagnostic ="A guide does not intersect one profile (or section). 
This may be also due to the definition of the spine: 
After the relimitation of the guide by the plane orthogonal to the spine, the guide does not intersect the profile (or section) anymore.";
GeoOpInLoftNoIntersection_ERR_7052.Advice ="Select guides such that each guide intersects each profile (or section), or change the spine.";
//
// NLD310105 message issu de GeoOpInSweepC0Point_ERR_3028 pour aide au diagnostic
TopOpInSweepC0Point_ERR_7053.Request ="Sweep or Loft operator:";
TopOpInSweepC0Point_ERR_7053.Diagnostic ="Impossible to compute edges intersection at tangency discontinuity point.";
TopOpInSweepC0Point_ERR_7053.Advice ="Check spine continuity.";
//
// NLD310105 message issu de GeoOpInSweepC0MeridianCurve_ERR_3029 pour aide au diagnostic
TopOpInSweepC0MeridianCurve_ERR_7054.Request ="Sweep or Loft operator:";
TopOpInSweepC0MeridianCurve_ERR_7054.Diagnostic ="Impossible to compute meridian curve by surfaces intersection at tangency discontinuity point.";
TopOpInSweepC0MeridianCurve_ERR_7054.Advice ="Check spine continuity.";
//
// NLD310105 message issu de GeoOpInSweepEdgeCurveCreation_ERR_3031 pour aide au diagnostic
TopOpInSweepEdgeCurveCreation_ERR_7055.Request ="Extrude or Sweep or Loft or Blend operator:";
TopOpInSweepEdgeCurveCreation_ERR_7055.Diagnostic ="Impossible to compute the edge curve between two surfaces.";
TopOpInSweepEdgeCurveCreation_ERR_7055.Advice ="Change your inputs.";
//
// NLD240205 message pour warning rebroussement detecte au niveau topologique
TopOpInSweepTopologicalWrap_ERR_7056.Request="Sweep or Loft operator:";
TopOpInSweepTopologicalWrap_ERR_7056.Diagnostic="The extrusion of a vertex of the profile leads to a wrap."; 
TopOpInSweepTopologicalWrap_ERR_7056.Advice="Use a guide with a smaller curvature. Check output or change your inputs.";
//
// NLD300305 message pour warning ou erreur direction de depouille non normale au plan de spine du sweep
TopOpInSweepDraftDirNotNormalToNonG1SpinePlane_ERR_7057.Request="Sweep operator:";
TopOpInSweepDraftDirNotNormalToNonG1SpinePlane_ERR_7057.Diagnostic="Draft direction not normal to guide plane.";
TopOpInSweepDraftDirNotNormalToNonG1SpinePlane_ERR_7057.Advice="Change draft direction or use a guide continuous in tangency or a limiting element
to ensure sweep surfaces connexity";
//
// NLD010605 message pour warning sweepchecker: ecart par rapport aux profils
TopOpInSweepCheckDeviationFromProfile_ERR_7058.Request="Loft operator:";
TopOpInSweepCheckDeviationFromProfile_ERR_7058.Diagnostic="Gap detected between surface and input section.";
TopOpInSweepCheckDeviationFromProfile_ERR_7058.Advice="Change area law or input data or modify the tolerant modelling parameter value(s)";
//
// NLD010605 message pour warning sweepchecker: ecart par rapport aux guides
TopOpInSweepCheckDeviationFromGuide_ERR_7059.Request="Loft operator:";
TopOpInSweepCheckDeviationFromGuide_ERR_7059.Diagnostic="Gap detected between surface and input guide.";
TopOpInSweepCheckDeviationFromGuide_ERR_7059.Advice="Change input data or modify the tolerant modelling parameter value(s)";
//
// NLD020605 message pour warning creation ccv posee sur avec edge vive
TopOpInSweepEdgeLyingOnSharpEdge_ERR_7060.Request="Topological operator:";
TopOpInSweepEdgeLyingOnSharpEdge_ERR_7060.Diagnostic="Sharp edge in input wire may lead to wrong normal computation and unpredictable result.";
TopOpInSweepEdgeLyingOnSharpEdge_ERR_7060.Advice="Change supporting shell.";
//
// NLD020605 message plus moderne pour homogeneisation des guides
TopOpInSweepGuidesHomogenization_ERR_7061.Request="Sweep or Loft or Blend or Extrapol operator:";
TopOpInSweepGuidesHomogenization_ERR_7061.Diagnostic="Impossible to homogenize the guides/spine topology before computation.";
TopOpInSweepGuidesHomogenization_ERR_7061.Advice="Change input data or modify the tolerant modelling parameter value(s) if any.";
//
// NLD020605 message plus moderne pour homogeneisation des profils
TopOpInSweepProfilesHomogenization_ERR_7062.Request="Loft or Blend operator:";
TopOpInSweepProfilesHomogenization_ERR_7062.Diagnostic="Impossible to homogenize the sections topology before computation.";
TopOpInSweepProfilesHomogenization_ERR_7062.Advice="Change input data or modify the tolerant modelling parameter value(s) if any.";
//
TopOpInSweepOutOfModelSize_ERR_7063.Request="Sweep operator:";
TopOpInSweepOutOfModelSize_ERR_7063.Diagnostic="The guide is greater than model size."; 
TopOpInSweepOutOfModelSize_ERR_7063.Advice="Use a shorter guide to stay inside the model size.";
/
TopOpInSweepEmptyResult_ERR_7064.Request="Topological Operator:";
TopOpInSweepEmptyResult_ERR_7064.Diagnostic="The result body is empty, all material has been removed."; 
TopOpInSweepEmptyResult_ERR_7064.Advice="Dont try to remove all material.";
//
TopOpInSweepEdgeNotInMFPlane_ERR_7065.Request="Sweep or Loft or Blend or Extrapol operator:";
TopOpInSweepEdgeNotInMFPlane_ERR_7065.Diagnostic="Warning : A limiting edge is not in the moving frame plane.";
TopOpInSweepEdgeNotInMFPlane_ERR_7065.Advice="Check cutters positions to avoid topological limits too close to twisted areas.";
//
// issu de GeoOpInSweepImplicitProfileEvaluation_ERR_3041
TopOpInSweepImplicitProfileEvaluation_ERR_7066.Request ="Geometric sweep with implicit section:";
TopOpInSweepImplicitProfileEvaluation_ERR_7066.Diagnostic ="Section cannot be evaluated.";
TopOpInSweepImplicitProfileEvaluation_ERR_7066.Advice ="Change your inputs.";
//
// NLD150107 message pour warning rebroussement detecte au niveau geometrique
TopOpInSweepGeometricalWrap_ERR_7067.Request="Sweep or Loft or Blend or Extrapol operator:";
TopOpInSweepGeometricalWrap_ERR_7067.Diagnostic="Surface computation leads to a geometrical wrap."; 
TopOpInSweepGeometricalWrap_ERR_7067.Advice="Use a guide or a spine with a smaller curvature. Check output or change your inputs.";
//
// NLD200207 message pour warning plus explicite si remplissage sans G1
TopOpInSweepFillWithoutTangency_ERR_7068.Request="Sweep operator:";
TopOpInSweepFillWithoutTangency_ERR_7068.Diagnostic="Area fill with tangency condition failed.";
TopOpInSweepFillWithoutTangency_ERR_7068.Advice="Modify the parameter value(s) or tolerant modelling parameter value(s) (if any)
or move cutters or change the operand(s).";
//
// NLD180110 issu de GeoOpInSweepImpossibleLawExtrapolation_ERR_3045
TopOpInSweepImpossibleLawExtrapolation_ERR_7069.Request ="Geometric sweep with implicit section:";
TopOpInSweepImpossibleLawExtrapolation_ERR_7069.Diagnostic ="Law cannot be consistently extrapolated at tangency discontinuity vertices.";
TopOpInSweepImpossibleLawExtrapolation_ERR_7069.Advice ="Change your inputs.";
//
// NLD050310
TopOpInSweepRelimitedGuide_WNG_7070.Request ="Sweep or Blend operator:";
TopOpInSweepRelimitedGuide_WNG_7070.Diagnostic ="One guide has been relimited.";
TopOpInSweepRelimitedGuide_WNG_7070.Advice ="Check all guides and spine consistency.";
//
// NLD100310
TopOpInSweepIgnoredSpec_WNG_7071.Request="Sweep or Loft or Blend or Extrapol operator:";
TopOpInSweepIgnoredSpec_WNG_7071.Diagnostic="All specifications can not be respected."; 
TopOpInSweepIgnoredSpec_WNG_7071.Advice="Result obtained with some specifications ignored.";
//
// NLD281010 remplace l'antiquite egyptienne FOInInvalidProfilePosition
TopOpInSweepInvalidProfilePosition_ERR_7072.Request ="Sweep or Loft operator:";
TopOpInSweepInvalidProfilePosition_ERR_7072.Diagnostic ="Profile or section not perpendicular to the spine.";
TopOpInSweepInvalidProfilePosition_ERR_7072.Advice ="Change your inputs.";
//
//Operator Blend (and extrapol G1) (7080-7099)
//
TopOpInBlendShellNonG1_ERR_7080.Request="Blend Operator:";
TopOpInBlendShellNonG1_ERR_7080.Diagnostic="On a Vertex the Curve is continuous in tangency but not the shell.";
TopOpInBlendShellNonG1_ERR_7080.Advice="Split the curve on this vertex.";
//
TopOpInBlendShellContainsAJunctionEdge_7081.Request="Blend Operator:";
TopOpInBlendShellContainsAJunctionEdge_7081.Diagnostic="One of the curves contains a junction edge.";
TopOpInBlendShellContainsAJunctionEdge_7081.Advice="Smooth the curve.";
//
TopOpInBlendWireAreIntersecting_ERR_7082.Request="Blend operator:";
TopOpInBlendWireAreIntersecting_ERR_7082.Diagnostic="Wires are intersecting together."; 
TopOpInBlendWireAreIntersecting_ERR_7082.Advice="Use Wires which are not intersecting together.";
//
TopOpInBlendNonCompatibleOption_ERR_7083.Request="Blend operator:";
TopOpInBlendNonCompatibleOption_ERR_7083.Diagnostic="Some options are not compatible."; 
TopOpInBlendNonCompatibleOption_ERR_7083.Advice="Tangent borders options are not used.";
//
TopOpInBlendTwist_ERR_7084.Request ="Blend or extrapol operator:";
TopOpInBlendTwist_ERR_7084.Diagnostic ="The result contains at least one twisted surface.";
TopOpInBlendTwist_ERR_7084.Advice ="Blend: Reduce tension or invert wire direction.\n Extrapol: Change Up to element";
//
TopOpInExtrapolationNegativeLength_ERR_7085.Request ="Extrapol Operator.";
TopOpInExtrapolationNegativeLength_ERR_7085.Diagnostic ="The length is less than or equal to zero.";
TopOpInExtrapolationNegativeLength_ERR_7085.Advice ="Use a strictly positive length.";
//
TopOpInBlendCurvatureContinuityAskedOnInternalEdge_ERR_7086.Request="Blend operator:";
TopOpInBlendCurvatureContinuityAskedOnInternalEdge_ERR_7086.Diagnostic="Curvature continuity option asked on an internal shell edge. Instable computation"; 
TopOpInBlendCurvatureContinuityAskedOnInternalEdge_ERR_7086.Advice="Trim shell in order to solve face choice ambiguity and stabilize curvature computation.";
//
TopOpSweepInRuledDevelopMultiEdge_ERR_7087.Request ="Ruled Developable Operator:";
TopOpSweepInRuledDevelopMultiEdge_ERR_7087.Diagnostic ="A guide contains more than one edge.";
TopOpSweepInRuledDevelopMultiEdge_ERR_7087.Advice ="Change or clean your inputs.";
//
TopOpInBlendAvoidTwist_ERR_7088.Request ="Blend Operator : Avoid Twists Coupling:";
TopOpInBlendAvoidTwist_ERR_7088.Diagnostic ="Tangency or curvature constraints can't be used with this coupling.";
TopOpInBlendAvoidTwist_ERR_7088.Advice ="Change one of the options.";
//
//Operators GeodesicPtPt and SimilarCurve (7100-7124)
//
TopOpInLineGeodesicPtPt_ERR_7100.Request="Operator Geodesic Point Point";
TopOpInLineGeodesicPtPt_ERR_7100.Diagnostic="There's no solution:no convergence"; 
TopOpInLineGeodesicPtPt_ERR_7100.Advice="Modify the points";
//
TopOpInLineGeodesicPtPt_ERR_7101.Request="Operator Geodesic Point Point";
TopOpInLineGeodesicPtPt_ERR_7101.Diagnostic="Problem in initialization"; 
TopOpInLineGeodesicPtPt_ERR_7101.Advice="Modify the points";
//
TopOpInSimilarCurve_ERR_7102.Request="Operator SimilarCurve";
TopOpInSimilarCurve_ERR_7102.Diagnostic="No solution for the projection of the point on Reference Curve"; 
TopOpInSimilarCurve_ERR_7102.Advice="Modify the point";
//
TopOpInSimilarCurve_ERR_7103.Request="Operator SimilarCurve";
TopOpInSimilarCurve_ERR_7103.Diagnostic="No solution for the intersection between Curve input and normal plane of Reference Curve"; 
TopOpInSimilarCurve_ERR_7103.Advice="Modify one of the curves";
//
TopOpInGeodesicProjection_ERR_7104.Request="Operator Geodesic Projection";
TopOpInGeodesicProjection_ERR_7104.Diagnostic="No solution for the relimitation of the wire"; 
TopOpInGeodesicProjection_ERR_7104.Advice="Modify the radius";
//
TopOpInGeodesicProjection_ERR_7105.Request="Operator Geodesic Projection";
TopOpInGeodesicProjection_ERR_7105.Diagnostic="No solution"; 
TopOpInGeodesicProjection_ERR_7105.Advice="";
//
TopOpInExtrapolUpTo_ERR_7106.Request="Operator Extrapolation Wire UpTo";
TopOpInExtrapolUpTo_ERR_7106.Diagnostic="UpTo element cannot not be reached by extrapolation"; 
TopOpInExtrapolUpTo_ERR_7106.Advice="Modify it";
//
TopOpInExtrapolUpTo_ERR_7107.Request="Operator Extrapolation Wire UpTo Wire";
TopOpInExtrapolUpTo_ERR_7107.Diagnostic="The UpTo element selected is not valid"; 
TopOpInExtrapolUpTo_ERR_7107.Advice="Modify it";
//
TopOpInExtrapolUpTo_ERR_7108.Request="Operator Extrapolation Wire UpTo on support";
TopOpInExtrapolUpTo_ERR_7108.Diagnostic="Extrapolation upto impossible because intersection between support and UpTo element is not valid"; 
TopOpInExtrapolUpTo_ERR_7108.Advice="Modify the UpTo element";
//
TopOpInExtrapolWire_ERR_7109.Request="Operator Extrapolation Wire in tangency on support";
TopOpInExtrapolWire_ERR_7109.Diagnostic="The operator does not find any solution"; 
TopOpInExtrapolWire_ERR_7109.Advice="It may be due to tangent of curve which is not in tangent plane";
//
TopOpInExtrapolWire_ERR_7110.Request="Operator Extrapolation Wire in curvature up to plane";
TopOpInExtrapolWire_ERR_7110.Diagnostic="The line tangent to curve at the extremity of initial curve doesn't intersect the target plane"; 
TopOpInExtrapolWire_ERR_7110.Advice="Modify the UpTo plane";
//
TopOpInExtrapolWire_ERR_7111.Request="Operator Extrapolation Wire in curvature";
TopOpInExtrapolWire_ERR_7111.Diagnostic="Degenerated situation:tangent situation between curve and plane"; 
TopOpInExtrapolWire_ERR_7111.Advice="Modify the Length or the UpTo plane";
//
TopOpInExtrapolWire_ERR_7112.Request="Operator Extrapolation Wire ";
TopOpInExtrapolWire_ERR_7112.Diagnostic="The length specified must be positive"; 
TopOpInExtrapolWire_ERR_7112.Advice="Modify the length";
//
TopOpInExtrapolWire_ERR_7113.Request="Operator Extrapolation Wire ";
TopOpInExtrapolWire_ERR_7113.Diagnostic="Probleme to get extremity after laid down operation";
//
TopOpInExtrapolWire_WNG_7114.Request="Operator Line Point Direction ";
TopOpInExtrapolWire_WNG_7114.Diagnostic="The required quality could not be reached"; 
//
TopOpInGeodesicPtPt_ERR_7115.Request="Operator Geodesic Line Point Point ";
TopOpInGeodesicPtPt_ERR_7115.Diagnostic="The tolerance is not correct"; 
TopOpInGeodesicPtPt_ERR_7115.Advice="Modify the tolerance";
//    internal
//
// same message as TopOpInSweep_Internal_ERR_7504
TopOpIntSweepInternalError_ERR_7500="Topological sweep operator: internal error /p.";
//
TopOpIntSweepDegeneratedSurface_ERR_7501="Topological sweep operator: the operator generated a null surface.";
//
TopOpIntSweepNullPointerSpine_ERR_7502.Request="Sweep or loft operator:";
TopOpIntSweepNullPointerSpine_ERR_7502.Diagnostic="The spine pointer is null."; 
TopOpIntSweepNullPointerSpine_ERR_7502.Advice="Use a non null spine pointer.";
//
TopOpIntSweepNullPointerGuide_ERR_7503.Request="Sweep or loft operator:";
TopOpIntSweepNullPointerGuide_ERR_7503.Diagnostic="The guide pointer is null."; 
TopOpIntSweepNullPointerGuide_ERR_7503.Advice="Use a non null guide pointer.";
//
//---------------------------------- For error filtering with diagnosis aid
// same message as TopOpIntSweep_Internal_ERR_7500
TopOpInSweepInternalError_ERR_7504="Topological sweep operator: internal error.";
// same message as TopOpIntAllTopo
TopOpInAllTopo_ERR_7505="Topological operators : internal error.";
// same message as TopOpIntAllGeo
TopOpInAllGeo_ERR_7506="Topological operators: internal error using the geometrical package.";
// NLD220704
TopOpInGeoCheck_ERR_7507="Topological operators: internal error using the geometrical package detected by geometrical data check";
//

// Topological Operators 7550-7599 (internal)
//
TopOpIntHybOpUnexpectedOperatorInput_ERR_7550.Request="Topological Operator:";
TopOpIntHybOpUnexpectedOperatorInput_ERR_7550.Diagnostic="Treatment aborted due to an invalid or NULL operator input.";
TopOpIntHybOpUnexpectedOperatorInput_ERR_7550.Advice="Change at least one of the input operands.";
//
TopOpIntHybOpInvalidRunManagement_ERR_7551.Request="Topological Operator:";
TopOpIntHybOpInvalidRunManagement_ERR_7551.Diagnostic="Treatment aborted on Invalid Run() method management.";
TopOpIntHybOpInvalidRunManagement_ERR_7551.Advice="Run() method can't be called twice.";
//
TopOpIntHybOpInvalidGetResultManagement_ERR_7552.Request="Topological Operator:";
TopOpIntHybOpInvalidGetResultManagement_ERR_7552.Diagnostic="Treatment aborted on Invalid GetResult() method management.";
TopOpIntHybOpInvalidGetResultManagement_ERR_7552.Advice="Run() method must be call before GetResult() method.";
//
TopOpIntHybOpInvalidConfigManagement_ERR_7553.Request="Topological Operator:";
TopOpIntHybOpInvalidConfigManagement_ERR_7553.Diagnostic="Treatment aborted because the current Configuration Software is not supported.";
TopOpIntHybOpInvalidConfigManagement_ERR_7553.Advice="Change the current Configuration Software.";
//
TopOpIntHybOpInvalidGetConfigManagement_ERR_7554.Request="Topological Operator:";
TopOpIntHybOpInvalidGetConfigManagement_ERR_7554.Diagnostic="Treatment aborted on Invalid GetConfigurationSoftware() method management.";
TopOpIntHybOpInvalidGetConfigManagement_ERR_7554.Advice="SetConfigurationSoftware() method must be call before GetConfigurationSoftware() method.";
//
TopOpIntHybOpInvalidAutoIntersectFace_ERR_7555.Request="Topological Operator:";
TopOpIntHybOpInvalidAutoIntersectFace_ERR_7555.Diagnostic="Treatment aborted on an invalid face with several self-intersecting edges.";
TopOpIntHybOpInvalidAutoIntersectFace_ERR_7555.Advice="Modify the input body or the input used to generate it.";
//
TopOpIntHybOpInvalidEmptyDomain_ERR_7556.Request="Topological Operator:";
TopOpIntHybOpInvalidEmptyDomain_ERR_7556.Diagnostic="The body contains an empty domain.";
TopOpIntHybOpInvalidEmptyDomain_ERR_7556.Advice="Modify the input body or the input used to generate it.";
//
TopOpIntHybOpInvalidOrientationManagement_ERR_7557.Request="Topological Operator:";
TopOpIntHybOpInvalidOrientationManagement_ERR_7557.Diagnostic="The resulting body cannot be oriented like the input body.";
TopOpIntHybOpInvalidOrientationManagement_ERR_7557.Advice="Modify the input body or the input used to generate it.";
//
TopOpIntHybOpInvalidAngleBetweenFaces_ERR_7558.Request="Topological Operator:";
TopOpIntHybOpInvalidAngleBetweenFaces_ERR_7558.Diagnostic="Treatment aborted because the angle between the faces does not respect the requested angle criteria.";
TopOpIntHybOpInvalidAngleBetweenFaces_ERR_7558.Advice="Modify the input body or the requested angle value.";
//
TopOpIntHybOpInvalidAngleBetweenEdges_ERR_7559.Request="Topological Operator:";
TopOpIntHybOpInvalidAngleBetweenEdges_ERR_7559.Diagnostic="Treatment aborted because the angle between the edges does not respect the requested angle criteria.";
TopOpIntHybOpInvalidAngleBetweenEdges_ERR_7559.Advice="Modify the input body or the requested angle value.";
//
TopOpIntHybOpInvalidSplitTrimInput_ERR_7560.Request="Topological Operator:";
TopOpIntHybOpInvalidSplitTrimInput_ERR_7560.Diagnostic="Split or Trim Operation is impossible because the input Bodies do not intersect each other.";
TopOpIntHybOpInvalidSplitTrimInput_ERR_7560.Advice="Modify the input bodies or the input used to generate it.";
//
TopOpIntHybOpInvalidTrimOrientation_ERR_7561.Request="Topological Operator:";
TopOpIntHybOpInvalidTrimOrientation_ERR_7561.Diagnostic="The resulting body cannot be oriented like the input body.";
TopOpIntHybOpInvalidTrimOrientation_ERR_7561.Advice="Modify the input body or if the input is a non connex body try with each domain separatly.";
//
// NLD081004
TopOpInHybOpNullWireComputed_ERR_7562.Request="Topological Operator:";
TopOpInHybOpNullWireComputed_ERR_7562.Diagnostic="The resulting wire has no edge.";
TopOpInHybOpNullWireComputed_ERR_7562.Advice="Modify the input to ensure a correct wire relimitation.";
//
// NLD081004
TopOpInHybOpNullEdgeInComputedWire_ERR_7563.Request="Topological Operator:";
TopOpInHybOpNullEdgeInComputedWire_ERR_7563.Diagnostic="The resulting wire has a null edge.";
TopOpInHybOpNullEdgeInComputedWire_ERR_7563.Advice="Modify the input to ensure a correct wire relimitation.";
//
// JSX211204
TopOpInHybOpTooLowCGMLevelForOption_ERR_7564.Request="Topological Operator:";
TopOpInHybOpTooLowCGMLevelForOption_ERR_7564.Diagnostic="Some options are only available with the last version.";
TopOpInHybOpTooLowCGMLevelForOption_ERR_7564.Advice="Upgrade the operator.";
//
TopOpInHybOpSplitHalfSpace_ERR_7565.Request="Topological Operator:";
TopOpInHybOpSplitHalfSpace_ERR_7565.Diagnostic="Half space mode requires an infinite plane as cutting element.";
TopOpInHybOpSplitHalfSpace_ERR_7565.Advice="choose an infinite plane or inactivate half space mode.";
//
//Operator Wrap -Surface / Wrap Curve Blend (7600-7620)
//
TopOpInWrapSurfaceNoProjectionOnReferenceSurface_ERR_7600.Request="Wrap Surface Operator:";
TopOpInWrapSurfaceNoProjectionOnReferenceSurface_ERR_7600.Diagnostic="The Body to be deformed cannot be fully projected onto the reference surface.";
TopOpInWrapSurfaceNoProjectionOnReferenceSurface_ERR_7600.Advice="Extend the reference (and/or) the target surface(s).";
//
//
TopOpInWrapCurveBadProjectionsOnReferenceSpine_ERR_7601.Request="Wrap Curve Operator:";
TopOpInWrapCurveBadProjectionsOnReferenceSpine_ERR_7601.Diagnostic="The Body to be deformed is not fully inside the regular neighbourhood of the spine.";
TopOpInWrapCurveBadProjectionsOnReferenceSpine_ERR_7601.Advice="Choose a spine with smaller curvature.";
//
//
TopOpInWrapSurfaceBadProjectionsOnReferenceSurface_ERR_7602.Request="Wrap Surface Operator:";
TopOpInWrapSurfaceBadProjectionsOnReferenceSurface_ERR_7602.Diagnostic="The Body to be deformed is not fully inside the regular neighbourhood of the reference surface.";
TopOpInWrapSurfaceBadProjectionsOnReferenceSurface_ERR_7602.Advice="Choose a reference surface with smaller curvature.";
//
//
TopOpInWrapCurveBadReparametrizationBySpine_ERR_7603.Request="Wrap Curve Operator:";
TopOpInWrapCurveBadReparametrizationBySpine_ERR_7603.Diagnostic="The reference or target curve cannot be parametrized by the spine in a monotonous way.";
TopOpInWrapCurveBadReparametrizationBySpine_ERR_7603.Advice="Choose a spine with smaller curvature.";
//
//
TopOpInWrapSurfaceTrimmedReferenceSurface_ERR_7604.Request="Wrap Surface Operator:";
TopOpInWrapSurfaceTrimmedReferenceSurface_ERR_7604.Diagnostic="The trimmed reference surface differs from his underlying surface.";
TopOpInWrapSurfaceTrimmedReferenceSurface_ERR_7604.Advice="Create another underlying surface.";
//
//
TopOpInWrapSurfaceTrimmedTargetSurface_ERR_7605.Request="Wrap Surface Operator:";
TopOpInWrapSurfaceTrimmedTargetSurface_ERR_7605.Diagnostic="The trimmed target surface differs from his underlying surface.";
TopOpInWrapSurfaceTrimmedTargetSurface_ERR_7605.Advice="Create another underlying surface.";
//
TopOpInWrapSurfaceMultipleProjections_ERR_7606.Request="Wrap Surface Operator:";
TopOpInWrapSurfaceMultipleProjections_ERR_7606.Diagnostic="Due to multiple projections onto reference or target surface the result is twisted.";
TopOpInWrapSurfaceMultipleProjections_ERR_7606.Advice="Create another reference or target surface.";
//
//Operator Variable Offset (7630-7659)
//
TopOpInVarOffUnderDefined_ERR_7630.Request="Variable Offset operator:";
TopOpInVarOffUnderDefined_ERR_7630.Diagnostic="A variably strained edge is not limited by constant strains on its extremities.";
TopOpInVarOffUnderDefined_ERR_7630.Advice="Check that every variably strained edge starts and ends with a constant strain.";
//
TopOpInVarOffTearing_ERR_7631.Request="Variable Offset operator:";
TopOpInVarOffTearing_ERR_7631.Diagnostic="There are two successive constantly strained edges with two different values causing a tearing of the surface.";
TopOpInVarOffTearing_ERR_7631.Advice="Use the same radius value for the two successive strains or insert a variable one between them.";
//
TopOpInVarOffNoConst_ERR_7632.Request="Variable Offset operator:";
TopOpInVarOffNoConst_ERR_7632.Diagnostic="No constant values.";
TopOpInVarOffNoConst_ERR_7632.Advice="Check that there are constant strains.";
//
TopOpInVarOffConstNotUsed_ERR_7633.Request="Variable Offset operator:";
TopOpInVarOffConstNotUsed_ERR_7633.Diagnostic="A constant offset has not been used.";
TopOpInVarOffConstNotUsed_ERR_7633.Advice="Check if this constant offset is useful.";
//
TopOpInVarOffHighVariation_ERR_7634.Request="Variable Offset operator:";
TopOpInVarOffHighVariation_ERR_7634.Diagnostic="Warning : High variation of the offset values.";
TopOpInVarOffHighVariation_ERR_7634.Advice="If necessary, modify the input offset values.";
//
TopOpInVarOffJoinFailure_ERR_7635.Request="Variable Offset operator:";
TopOpInVarOffJoinFailure_ERR_7635.Diagnostic="Warning : The join failed. Only variable areas are in result.";
TopOpInVarOffJoinFailure_ERR_7635.Advice="";
//
TopOpInVarOffWrongConstraintWire_ERR_7636.Request="Variable Offset operator:";
TopOpInVarOffWrongConstraintWire_ERR_7636.Diagnostic="The wire does not come directly from a variable area.";
TopOpInVarOffWrongConstraintWire_ERR_7636.Advice="Extract a new constraint wire from the variable area.";
//
TopOpInVarOffSkinsOverlap_ERR_7637.Request="Variable Offset operator:";
TopOpInVarOffSkinsOverlap_ERR_7637.Diagnostic="Some skins to offset overlap.";
TopOpInVarOffSkinsOverlap_ERR_7637.Advice="Cut out the overlaping skins.";
//
TopOpInVarOffSmoothBetweenConstantAreas_ERR_7638.Request="Variable Offset operator:";
TopOpInVarOffSmoothBetweenConstantAreas_ERR_7638.Diagnostic="Smooth edges split constant areas.";
TopOpInVarOffSmoothBetweenConstantAreas_ERR_7638.Advice="Cut out differently the base surface.";
//
TopOpInVarOffFadingBetweenConstantAreas_ERR_7639.Request="Variable Offset operator:";
TopOpInVarOffFadingBetweenConstantAreas_ERR_7639.Diagnostic="Locally smooth (fading) edges split constant areas.";
TopOpInVarOffFadingBetweenConstantAreas_ERR_7639.Advice="Cut out differently the base surface.";
//
//----------------------------------internal error
TopOpIntBoundaryWireNotClosed_ERR_7640="Boundary operator: internal error /p.";
//
TopOpIntVarOff_ERR_7641="Variable Offset operator: internal error /p.";
//
TopOpIntVarOff_SewingFailed_ERR_7642.Request="Variable Offset operator:";
TopOpIntVarOff_SewingFailed_ERR_7642.Diagnostic="Some bodies are not laying on the base surface.";
TopOpIntVarOff_SewingFailed_ERR_7642.Advice="Modify them so their boundaries lay on the base surface.";
//
TopOpIntVarOffNoSurface_ERR_7643.Request="Variable Offset operator:";
TopOpIntVarOffNoSurface_ERR_7643.Diagnostic="No surface is selected.";
TopOpIntVarOffNoSurface_ERR_7643.Advice="Select a surface to offset.";
//
TopOpIntVarOffAllOffsetsFail_ERR_7644.Request="Variable Offset operator:";
TopOpIntVarOffAllOffsetsFail_ERR_7644.Diagnostic="All offsets fail.";
TopOpIntVarOffAllOffsetsFail_ERR_7644.Advice="Try with lower offset values.";
//
TopOpIntVarOffSomeOffsetsFail_ERR_7645.Request="Variable Offset operator:";
TopOpIntVarOffSomeOffsetsFail_ERR_7645.Diagnostic="Update problem, some offsets fail.";
TopOpIntVarOffSomeOffsetsFail_ERR_7645.Advice="Clean the selection of the sub-elements to remove, or make a new variable offset.";
//
TopOpIntVarOffNotFromBoundary_ERR_7646.Request="Variable Offset operator:";
TopOpIntVarOffNotFromBoundary_ERR_7646.Diagnostic="The wire doesn't come from the boundary of a variable area.";
TopOpIntVarOffNotFromBoundary_ERR_7646.Advice="To create a wire, make an Extract of the boundary of a variable area.";
//
TopOpInVarOffWeaklySharpBetweenConstantAreas_ERR_7647.Request="Variable Offset operator:";
TopOpInVarOffWeaklySharpBetweenConstantAreas_ERR_7647.Diagnostic="Weakly sharp edges split constant areas.";
TopOpInVarOffWeaklySharpBetweenConstantAreas_ERR_7647.Advice="Cut out differently the base surface.";
//
TopOpInVarOffUpdateFails_ERR_7648.Request="Variable Offset operator:";
TopOpInVarOffUpdateFails_ERR_7648.Diagnostic="Some offsets of sub-parts fail.";
TopOpInVarOffUpdateFails_ERR_7648.Advice="Clear the selection of sub-elements to remove. Then run the variable offset operator.";
//
TopOpInVarOffMultiDomainsWire_ERR_7649.Request="Variable Offset operator:";
TopOpInVarOffMultiDomainsWire_ERR_7649.Diagnostic="The wire has many domains.";
TopOpInVarOffMultiDomainsWire_ERR_7649.Advice="Split the wire in mono domain wires.";
//
TopOpInVarOffWireOnTwoShells_ERR_7650.Request="Variable Offset operator:";
TopOpInVarOffWireOnTwoShells_ERR_7650.Diagnostic="The wire lies on two variable areas.";
TopOpInVarOffWireOnTwoShells_ERR_7650.Advice="Split the wire in wires for each variable area.";
//
TopOpInVarOffWireTooCloseToBoundary_ERR_7651.Request="Variable Offset operator:";
TopOpInVarOffWireTooCloseToBoundary_ERR_7651.Diagnostic="The wire is too close to the boundary of a variable area.";
TopOpInVarOffWireTooCloseToBoundary_ERR_7651.Advice="Supress the part too close to the boundary.";
//
TopOpInVarOffWireNotG1_ERR_7652.Request="Variable Offset operator:";
TopOpInVarOffWireNotG1_ERR_7652.Diagnostic="The wire is not continuous in tangency.";
TopOpInVarOffWireNotG1_ERR_7652.Advice="Split the wire in continuous in tangency wires";
//
TopOpInVarOffWireOnNoShell_ERR_7653.Request="Variable Offset operator:";
TopOpInVarOffWireOnNoShell_ERR_7653.Diagnostic="The wire lies on no variable area.";
TopOpInVarOffWireOnNoShell_ERR_7653.Advice="Check your inputs.";
//
TopOpInVarOffIncompatibleValues_ERR_7654.Request="Variable Offset operator:";
TopOpInVarOffIncompatibleValues_ERR_7654.Diagnostic="The offset values are incompatible. They must be equal.";
TopOpInVarOffIncompatibleValues_ERR_7654.Advice="Modify the offset value of the inner constant wire.";
//
TopOpInVarOffNotG1WireContact_ERR_7655.Request="Variable Offset operator:";
TopOpInVarOffNotG1WireContact_ERR_7655.Diagnostic="The inner constant wires are not continuous in tangence in their contact points.";
TopOpInVarOffNotG1WireContact_ERR_7655.Advice="Modify their shape in their contact points.";
//
TopOpInVarOffPartiallyLies_ERR_7656.Request="Variable Offset operator:";
TopOpInVarOffPartiallyLies_ERR_7656.Diagnostic="The inner constant wire lies partially on the variable area.";
TopOpInVarOffPartiallyLies_ERR_7656.Advice="Use the option 'geometry on support' or make a projection.";
//
TopOpIntVarOffLieOnNoBoundary_ERR_7657.Request="Variable Offset operator:";
TopOpIntVarOffLieOnNoBoundary_ERR_7657.Diagnostic="The wire doesn't lie on the boundary of a variable area.";
TopOpIntVarOffLieOnNoBoundary_ERR_7657.Advice="To create a wire, make an Extract of the boundary of a variable area.";
//
TopOpIntVarNotLieOnISOcurve_ERR_7658.Request="Variable Offset operator:";
TopOpIntVarNotLieOnISOcurve_ERR_7658.Diagnostic="The point doesn't lie on an isothickness curve.";
TopOpIntVarNotLieOnISOcurve_ERR_7658.Advice="Cut in two the variable area with an isothickness curve.";
//
TopOpInVarOffExtrapolationPb_ERR_7659.Request="Variable Offset operator:";
TopOpInVarOffExtrapolationPb_ERR_7659.Diagnostic="A part of the skin cannot be extrapolated.";
TopOpInVarOffExtrapolationPb_ERR_7659.Advice="Fill the hole generated on the result skin.";

//
// Operator Unfold (7660-7670) and also some generals
//
TopOpInTearingLeadsToNonConnexResult_ERR_7660.Request="Unfold Operator:";
TopOpInTearingLeadsToNonConnexResult_ERR_7660.Diagnostic="Tearing is needed, but will lead to a non connex result.";
TopOpInTearingLeadsToNonConnexResult_ERR_7660.Advice="Modify the input body.";
//
TopOpInImpossibleEdgeToTearSelection_ERR_7661.Request="Unfold Operator:";
TopOpInImpossibleEdgeToTearSelection_ERR_7661.Diagnostic="It is impossible to use some of the edges for tearing.";
TopOpInImpossibleEdgeToTearSelection_ERR_7661.Advice="Modify the selection of edges to tear.";
//
TopOpInNonConnexResult_ERR_7662.Request="Topological Operator:";
TopOpInNonConnexResult_ERR_7662.Diagnostic="Operation leads to a non connex result.";
TopOpInNonConnexResult_ERR_7662.Advice="Modify the inputs.";
//
TopOpInAmbiguousSituation_ERR_7663.Request="Topological Operator:";
TopOpInAmbiguousSituation_ERR_7663.Diagnostic="Input are ambiguous.";
TopOpInAmbiguousSituation_ERR_7663.Advice="Modify the inputs.";
//
TopOpInSurfaceUnfoldImpossible_ERR_7664.Request="Unfold Operator:";
TopOpInSurfaceUnfoldImpossible_ERR_7664.Diagnostic="Impossible to unfold at least one of the surfaces.";
TopOpInSurfaceUnfoldImpossible_ERR_7664.Advice="Check the input surfaces.";
//
TopOpInNonConnexLaidOn_ERR_7665.Request="Unfold + Transfer Operator:";
TopOpInNonConnexLaidOn_ERR_7665.Diagnostic="The laid down input body is not connex.";
TopOpInNonConnexLaidOn_ERR_7665.Advice="Modify the body to transfer.";
//
TopOpInSurfaceUnfoldIniPlaneOffSkin_ERR_7666.Request="Unfold Operator:";
TopOpInSurfaceUnfoldIniPlaneOffSkin_ERR_7666.Diagnostic="Initial location plane centre doesn't lie on input skin or the chosen face.";
TopOpInSurfaceUnfoldIniPlaneOffSkin_ERR_7666.Advice="Modify the initial location plane.";
//
TopOpInSurfaceUnfoldIniPlaneSkinNotParallel_ERR_7667.Request="Unfold Operator:";
TopOpInSurfaceUnfoldIniPlaneSkinNotParallel_ERR_7667.Diagnostic="Initial location plane is not tangential to input skin or the chosen face.";
TopOpInSurfaceUnfoldIniPlaneSkinNotParallel_ERR_7667.Advice="Modify the initial location plane.";
//
TopOpInSurfaceUnfoldIniPlaneHasMultiSupport_ERR_7668.Request="Unfold Operator:";
TopOpInSurfaceUnfoldIniPlaneHasMultiSupport_ERR_7668.Diagnostic="Ambiguity in finding support face for initial location plane - either the plane is tangential to at least two faces in input skin or its centre lies on an edge-to-tear.";
TopOpInSurfaceUnfoldIniPlaneHasMultiSupport_ERR_7668.Advice="Specify a support face along with initial location plane.";
//
TopOpInSurfaceUnfoldRuledNonCstTgtPlaneOnRule_ERR_7669.Request="Unfold Operator:";
TopOpInSurfaceUnfoldRuledNonCstTgtPlaneOnRule_ERR_7669.Diagnostic="The maximum angle between normal along a ruled line : /p1 degree is greater than G1 Tolerance.";
TopOpInSurfaceUnfoldRuledNonCstTgtPlaneOnRule_ERR_7669.Advice="Surface can not be unfolded without physical deformation. Check area and middle length of the result.";
//
TopOpInSurfaceUnfoldPartialTransfer_WNG_7670="Unfold Operator: Some bodies have been only partially transferred as these were not fully lying on the skin.";
//


//
//Operator CATBodyChecker (Messages only)
//
TopOpIntBodyCheckInvalidCurvatureCurve_MSG = "Invalid curvature radius found = /p1  <= Allowed [/p2] 
At curve parameter = (Arc=/p3, Param=/p4)";
TopOpIntBodyCheckInvalidCurvatureSurface_MSG = "Invalid curvature radius found = /p1  <= Allowed [/p2] 
At surface parameter = (PatchU=/p3, ParamU=/p4; PatchV=/p5, ParamV=/p6)";
TopOpIntBodyCheckSelfIntersectionShell_MSG = "Shell self-intersection found: /p1_/p2";
TopOpIntBodyCheckTopologicalEdgeLength_MSG = "Invalid Topological Edge Length found = /p1  <= Allowed [/p2]";
TopOpIntBodyCheckSelfIntersectionWire_MSG = "Wire self-intersection found: /p1_/p2";

//
//Operator FrFShellUnfold (7671-7680) : by SUH, 2004:12:30
//
TopOpInFrFSUDegenSurface_ERR_7671.Request="Free Form Unfold Operator:";
TopOpInFrFSUDegenSurface_ERR_7671.Diagnostic="Operation failed possibly because some of the Faces have partly or fully degenerated geometry.";
TopOpInFrFSUDegenSurface_ERR_7671.Advice="Modify the input body.";
//
TopOpInFrFSUInvalidSkin_ERR_7672.Request="Free Form Unfold Operator:";
TopOpInFrFSUInvalidSkin_ERR_7672.Diagnostic="Invalid Input Skin: The skin should be mono-domain, manifold and connex.";
TopOpInFrFSUInvalidSkin_ERR_7672.Advice="Modify the input body.";
//
TopOpInFrFSUClosedSharpCorner_ERR_7673.Request="Free Form Unfold Operator:";
TopOpInFrFSUClosedSharpCorner_ERR_7673.Diagnostic="Invalid Input Skin: Either the skin is closed or some of the closed corners are sharp; this may lead to huge distortion, hence rejected.";
TopOpInFrFSUClosedSharpCorner_ERR_7673.Advice="Modify the input body.";
//
TopOpInFrFSUTooSmallFeatures_WNG_7674.Request="Free Form Unfold Operator:";
TopOpInFrFSUTooSmallFeatures_WNG_7674.Diagnostic="The input skin contains some edges or faces, which are comparatively too small. These may remain under-represented in the flattened result.";
TopOpInFrFSUTooSmallFeatures_WNG_7674.Advice="If the result is not acceptable, modify the input skin.";
//
TopOpInFrFSUSelfIntersectingResult_ERR_7675.Request="Free Form Unfold Operator:";
TopOpInFrFSUSelfIntersectingResult_ERR_7675.Diagnostic="Invalid Result: The flattened skin has self-intersecting boundary, hence rejected.";
TopOpInFrFSUSelfIntersectingResult_ERR_7675.Advice="Modify the input body.";
//
TopOpInFrFSUDeviationDueToClean_WNG_7676="Free Form Unfold Operator: The transferred curves may be quite distorted due to automatic healing.";
//
TopOpInFrFSUResultComputationFailed_ERR_7677="Free Form Unfold Operator: Final reconstruction of flattened skin has failed due to an internal problem.";
//
TopOpInFrFSUResultIsTwisted_ERR_7678="Free Form Unfold Operator: The result computation cannot complete as some of the faces in the skin develop surface twists on flattening.";
//
TopOpInFrFSUResultFlatteningFailed_ERR_7679="Free Form Unfold Operator: Flattening has failed due to an internal problem.";
//
TopOpInFrFSUResultAssemblyFailed_ERR_7680.Request="Free Form Unfold Operator:";
TopOpInFrFSUResultAssemblyFailed_ERR_7680.Diagnostic="Final reconstruction of flattened skin has failed due to problem in assembling certain internal/external edges.";
TopOpInFrFSUResultAssemblyFailed_ERR_7680.Advice="Simplify the input body if it has got too many faces or the faces are vastly different sized.";

//
// Operator ShellExpansion (7690-7699) : by SKA, 2007:08:06
//
//
TopOpInShExpansionTangentsColinear_ERR_7691.Request="Shell Expansion Operator:";
TopOpInShExpansionTangentsColinear_ERR_7691.Diagnostic="Invalid Input Skin: The skin contains some faces having points that exhibit colinearity of Parametric Tangents.";
TopOpInShExpansionTangentsColinear_ERR_7691.Advice="Modify the input body";

//
TopOpInShExpansionFaceNormalToRef_ERR_7692.Request="Shell Expansion Operator:";
TopOpInShExpansionFaceNormalToRef_ERR_7692.Diagnostic="Invalid Input Skin: The skin contains faces having portions that are normal to Reference Line.";
TopOpInShExpansionFaceNormalToRef_ERR_7692.Advice="Modify the input body";

//
TopOpInShExpansionResultFlatteningFailed_ERR_7693="Shell Expansion Operator: Flattening has failed due to an internal problem.";

//
TopOpInShExpansionSmallTopology_ERR_7694.Request="Shell Expansion Operator:";
TopOpInShExpansionSmallTopology_ERR_7694.Diagnostic="Internal mesh generation has failed possibly due to small topologies in input body.";
TopOpInShExpansionSmallTopology_ERR_7694.Advice="Modify the input body";

//
TopOpInShExpansionComplexEnds_ERR_7695.Request="Shell Expansion Operator:";
TopOpInShExpansionComplexEnds_ERR_7695.Diagnostic="The ends of the skin are too complex. There seems to be more than one concavity locations.";
TopOpInShExpansionComplexEnds_ERR_7695.Advice="Simplify the input body";

//
// Operator Variable Offset (7700-7729)
//
//
TopOpInVarOffSplitPb_ERR_7700.Request="Variable Offset operator:";
TopOpInVarOffSplitPb_ERR_7700.Diagnostic="A part of the skin cannot be cut.";
TopOpInVarOffSplitPb_ERR_7700.Advice="Extract the different domains of the result skin for further process.";
//
TopOpIntVarOffVertexNotUsed_ERR_7701.Request="Variable Offset operator:";
TopOpIntVarOffVertexNotUsed_ERR_7701.Diagnostic="These vertices are misplaced.";
TopOpIntVarOffVertexNotUsed_ERR_7701.Advice="Remove these constraints or move them on a border of a variable area.";
//
TopOpIntVarOffSplittingWireVertex_ERR_7702.Request="Variable Offset operator:";
TopOpIntVarOffSplittingWireVertex_ERR_7702.Diagnostic="These vertices are misplaced. There are on middle of variable area border.";
TopOpIntVarOffSplittingWireVertex_ERR_7702.Advice="Remove these constraints or move them on a corner of a variable area.";
//
TopOpIntVarOffImplicitVertex_ERR_7703.Request="Variable Offset operator:";
TopOpIntVarOffImplicitVertex_ERR_7703.Diagnostic="These vertices have no value. Values have been automatically computed.";
TopOpIntVarOffImplicitVertex_ERR_7703.Advice="Put values on these vertices.";
//
TopOpIntVarOffRedundantVertex_ERR_7704.Request="Variable Offset operator:";
TopOpIntVarOffRedundantVertex_ERR_7704.Diagnostic="These vertices make redundant values.";
TopOpIntVarOffRedundantVertex_ERR_7704.Advice="Remove these input vertices.";
//

//
// Operator EdgePropagate (8000-8050)
//
//
TopOpIntRefFaceNeeded_ERR_8000.Request="Edge Propagation Operator:";
TopOpIntRefFaceNeeded_ERR_8000.Diagnostic="A reference face is needed for propagation orientation because the initial edge is internal or
is in a non manifold configuration.";
TopOpIntRefFaceNeeded_ERR_8000.Advice="Select a reference face.";
//
TopOpIntInitialEdgeNotOnBorder_ERR_8001.Request="Edge Propagation Operator:";
TopOpIntInitialEdgeNotOnBorder_ERR_8001.Diagnostic="In boundary mode , the initial edge must be on the boundary.";
TopOpIntInitialEdgeNotOnBorder_ERR_8001.Advice="Select a initial edge on the boundary.";
//
TopOpIntInvalidTolerance_ERR_8002.Request="Invalid C/p1 continuity tolerance value /p2 : must be in the range [ /p3 , /p4 ]";
TopOpIntInvalidTolerance_ERR_8002.Diagnostic="";
TopOpIntInvalidTolerance_ERR_8002.Advice="Modify the threshold value.";
//
// Fillet (...continuation )(8051-8100)
//
TopOpInFilletIntersection_ERR_8051.Request="Multi ribbon operator:";
TopOpInFilletIntersection_ERR_8051.Diagnostic="There is at least one sharp vertex with more than two edges to fillet. 
The only configuration allowed is a vertex with two edges to fillet.";
TopOpInFilletIntersection_ERR_8051.Advice="Process the each edge in a separate operation.";
//
//
TopOpInLimitingCannotBeDefined_ERR_8052.Request="Topological operator:";
TopOpInLimitingCannotBeDefined_ERR_8052.Diagnostic="Limiting element cannot be defined correctly.";
TopOpInLimitingCannotBeDefined_ERR_8052.Advice="Check that limiting element is not in a local smooth area.";
//
TopOpInAutoFilletNoFilletToBeDone_ERR_8053.Request="Automatic Fillet";
TopOpInAutoFilletNoFilletToBeDone_ERR_8053.Diagnostic="The input does not define any fillet to create.";
TopOpInAutoFilletNoFilletToBeDone_ERR_8053.Advice="There must be at least two connex faces to be filleted.";
//
TopOpInConicalFilletRelimitation_ERR_8054.Request="Ribbon computation:";
TopOpInConicalFilletRelimitation_ERR_8054.Diagnostic="Impossible relimitation. Fillet curvature along ribbon tracks is higher than support curvature.";
TopOpInConicalFilletRelimitation_ERR_8054.Advice="Decrease conic parameter.";
//
TopOpInAutoFilletSnapping_ERR_8055.Request="Automatic Fillet";
TopOpInAutoFilletSnapping_ERR_8055.Diagnostic="Snapping detected: a fillet cannot be created because it is about to be stopped by a fillet using the same radius.";
TopOpInAutoFilletSnapping_ERR_8055.Advice="Remove the existing fillet from the input.";
//
TopOpInPartingMultiShell_ERR_8056.Request="Topological operator:";
TopOpInPartingMultiShell_ERR_8056.Diagnostic="Limiting or parting element cannot be used with multiple shells or lumps.";
TopOpInPartingMultiShell_ERR_8056.Advice="Process each shell or lump in a separate operation.";
//
TopOpInFilletInternalTwist_ERR_8057.Request="Ribbon computation:";
TopOpInFilletInternalTwist_ERR_8057.Diagnostic="The result contains at least one twisted surface.";
TopOpInFilletInternalTwist_ERR_8057.Advice="Add limiting element(s), modify the parameter value(s), or  change the operand(s)";
//
TopOpInRibbonInitialization_ERR_8058.Request="Ribbon initialization:";
TopOpInRibbonInitialization_ERR_8058.Diagnostic="Impossible initialization on selected supports.";
TopOpInRibbonInitialization_ERR_8058.Advice="Modify the selection of faces, Use longer/better spine";
//
TopOpInNonConnexInputWire_ERR_8059.Request="Topological operator:";
TopOpInNonConnexInputWire_ERR_8059.Diagnostic="One or more input wire cannot be used for operation.";
TopOpInNonConnexInputWire_ERR_8059.Advice="Ensure that wire and its projection is connex";
//
TopOpInFilletRemainingSharpEdges_ERR_8060.Request="Fillet operator:";
TopOpInFilletRemainingSharpEdges_ERR_8060.Diagnostic="Some unfilleted edges remain in result body.";
TopOpInFilletRemainingSharpEdges_ERR_8060.Advice="Check the geometry. In case of multiple ribbons, process each ribbon in a separate operation.";
//
TopOpInAutoFilletNonManifold_ERR_8061.Request="Automatic Fillet:";
TopOpInAutoFilletNonManifold_ERR_8061.Diagnostic="illegal attempt to process a non-manifold configuration.";
TopOpInAutoFilletNonManifold_ERR_8061.Advice="Reduce the number of adjacent faces to the given Edge. No more than two adjacent faces can be processed.";
//
TopOpInAutoFilletComputeAdjacent_ERR_8062.Request="Automatic Fillet:";
TopOpInAutoFilletComputeAdjacent_ERR_8062.Diagnostic="Adjacent smooth skins containing parallel planes distant of less than twice the Fillet Radius. May alter the output topology";
TopOpInAutoFilletComputeAdjacent_ERR_8062.Advice="Remove the manual fillets close to the highlighted zone that can be performed after the autofillet operation.";
//
TopOpInAutoFilletMultipleShells_ERR_8063.Request="Automatic Fillet:";
TopOpInAutoFilletMultipleShells_ERR_8063.Diagnostic="Input body contains more than one shell.";
TopOpInAutoFilletMultipleShells_ERR_8063.Advice="Check that the input topology is correct.";
//
TopOpInFilletFaceFaceHelpPointOption_ERR_8064.Request="Fillet FaceFace:";
TopOpInFilletFaceFaceHelpPointOption_ERR_8064.Diagnostic="Help Point is equidistant to several ribbons.";
TopOpInFilletFaceFaceHelpPointOption_ERR_8064.Advice="Change Help Point position.";
//
// AutoDraft(8101-8150)
//
TopOpInAutoDraftFewDraftsCouldNotBeCreated_8101.Request="Automatic Draft:";
TopOpInAutoDraftFewDraftsCouldNotBeCreated_8101.Diagnostic="Some drafts have not been created.";
TopOpInAutoDraftFewDraftsCouldNotBeCreated_8101.Advice="Use the manual operator in order to complete the missing drafts.";
//
TopOpInAutoDraftConicalFacesRemain_8102.Request="Automatic Draft:";
TopOpInAutoDraftConicalFacesRemain_8102.Diagnostic="Some undesired conical faces have been created.";
TopOpInAutoDraftConicalFacesRemain_8102.Advice="Remove these faces if required.";
//
TopOpInAutoDraftNoDraftCouldBeCreated_ERR_8103.Request="Automatic Draft:";
TopOpInAutoDraftNoDraftCouldBeCreated_ERR_8103.Diagnostic="No draft could be created or sewn on the input model.";
TopOpInAutoDraftNoDraftCouldBeCreated_ERR_8103.Advice="It may be preferable to use the manual draft operator on this part.";
//
TopOpInAutoDraftResultCannotBeClosed_ERR_8104.Request="Automatic Draft:";
TopOpInAutoDraftResultCannotBeClosed_ERR_8104.Diagnostic="The result body cannot be closed.";
TopOpInAutoDraftResultCannotBeClosed_ERR_8104.Advice="Modify the input body or the parting body.";
//
TopOpInAutoDraftPartingCannotBeUsed_ERR_8105.Request="Automatic Draft:";
TopOpInAutoDraftPartingCannotBeUsed_ERR_8105.Diagnostic="Parting element cannot be used.";
TopOpInAutoDraftPartingCannotBeUsed_ERR_8105.Advice="Check whether parting element is correctly defined.";
//
TopOpInAutoDraftPartingCannotBeOriented_ERR_8106.Request="Automatic Draft:";
TopOpInAutoDraftPartingCannotBeOriented_ERR_8106.Diagnostic="Parting element cannot be oriented.";
TopOpInAutoDraftPartingCannotBeOriented_ERR_8106.Advice="Modify parting element.";
//
TopOpInAutoDraftAngleNotSupported_ERR_8107.Request="Automatic Draft:";
TopOpInAutoDraftAngleNotSupported_ERR_8107.Diagnostic="Draft angle is out of range.";
TopOpInAutoDraftAngleNotSupported_ERR_8107.Advice="Modify draft angle.";
//
TopOpInAutoDraftKeepFaceNotSupported_ERR_8108.Request="Automatic Draft:";
TopOpInAutoDraftKeepFaceNotSupported_ERR_8108.Diagnostic="One or several functional faces are not supported.";
TopOpInAutoDraftKeepFaceNotSupported_ERR_8108.Advice="Define only supported functionnal faces.";
//
TopOpInAutoDraftTrimError_ERR_8109.Request="Automatic Draft:";
TopOpInAutoDraftTrimError_ERR_8109.Diagnostic="Parting body cannot be used with input body.";
TopOpInAutoDraftTrimError_ERR_8109.Advice="Modify the input body or the parting body.";
//
TopOpInAutoDraftExistingDraft_8110.Request="Automatic Draft:";
TopOpInAutoDraftExistingDraft_8110.Diagnostic="Input body is already partially drafted using the same angle as input angle.";
TopOpInAutoDraftExistingDraft_8110.Advice="Avoid manual drafts that can be generated anyway by subsequent automatic draft.";
//
TopOpInAutoDraftNoDraftToBeDone_ERR_8111.Request="Automatic Draft:";
TopOpInAutoDraftNoDraftToBeDone_ERR_8111.Diagnostic="The inputs do not define any draft to create.";
TopOpInAutoDraftNoDraftToBeDone_ERR_8111.Advice="Modify the input body or the parting body.";
//
TopOpInAutoDraftPartingFacesBelongToInputBody_ERR_8112.Request="Automatic Draft:";
TopOpInAutoDraftPartingFacesBelongToInputBody_ERR_8112.Diagnostic="Parting body cannot be used because all its faces belong to the input body.";// and the chosen mode is add material.";
TopOpInAutoDraftPartingFacesBelongToInputBody_ERR_8112.Advice="Use a larger parting body";
//
TopOpInAutoDraftFunctionalFacesDoNotBelongToInputBody_ERR_8113.Request="Automatic Draft:";
TopOpInAutoDraftFunctionalFacesDoNotBelongToInputBody_ERR_8113.Diagnostic="At least one of the functionnal faces do not belong to the input body.";
TopOpInAutoDraftFunctionalFacesDoNotBelongToInputBody_ERR_8113.Advice="Select a valid face";
//
TopOpInAutoDraftInternalSkinsInInputBody_8114.Request="Automatic Draft:";
TopOpInAutoDraftInternalSkinsInInputBody_8114.Diagnostic="Input Body contains internal skins.";
TopOpInAutoDraftInternalSkinsInInputBody_8114.Advice="these skins were removed by AutoDraft";
//
TopOpInAutoDraftPartingFacesBelongToInputBody_ERR_8115.Request="Automatic Draft:";
TopOpInAutoDraftPartingFacesBelongToInputBody_ERR_8115.Diagnostic="Parting body cannot be used because all its faces belong to the input body and aren't all plane.";// and the chosen mode is add material.";
TopOpInAutoDraftPartingFacesBelongToInputBody_ERR_8115.Advice="Use a larger parting body or select a plane face";

//
// AutoFillet(8151-8200)
//
TopOpInAutoFilletSharpEdgeGenerated_8151.Request="Automatic Fillet";
TopOpInAutoFilletSharpEdgeGenerated_8151.Diagnostic="Operator has generated sharp edges.";
TopOpInAutoFilletSharpEdgeGenerated_8151.Advice="Smooth the result body manually in the neighbourhood of these edges.";
//

//
// Pattern(8201-8250)
//
TopOpInPatternFacesRebuildError_8201.Request="Pattern Face";
TopOpInPatternFacesRebuildError_8201.Diagnostic="Face pattern failed.";
TopOpInPatternFacesRebuildError_8201.Advice="Face pattern failed results primarily when any of the following conditions are met :
1. Generated faces are not coincident to the original body.
2. Generated faces exist on faces other than the original faces.
3. Geometry than is incident to the pattern faces is too complex to complete the face pattern.";
//

//
// Wall Thickness Analysis(8251-8300) : by MPX, 05-March-2009
//
TopOpInWTANonManifold_ERR_8251.Request="Wall Thickness Analysis";
TopOpInWTANonManifold_ERR_8251.Diagnostic="Wall Thickness Analysis is not supported on non-manifold topology";
TopOpInWTANonManifold_ERR_8251.Advice="Modify the input body";
//
TopOpInWTAVolumeContainsFreeEdge_ERR_8252.Request="Wall Thickness Analysis";
TopOpInWTAVolumeContainsFreeEdge_ERR_8252.Diagnostic="Input is ambiguous: a volume is found to contain a free edge";
TopOpInWTAVolumeContainsFreeEdge_ERR_8252.Advice="Modify the input body";
//

//
// 8301-8350- Silhouette
//
TopOpInSilhouetteOperator_ERR_8301.Request="Silhouette computation:";
TopOpInSilhouetteOperator_ERR_8301.Diagnostic="Silhouette operator failed.";
TopOpInSilhouetteOperator_ERR_8301.Advice="Modify the operator inputs.";
//
TopOpInSilhouetteOperator_ERR_8302.Request="Silhouette computation:";
TopOpInSilhouetteOperator_ERR_8302.Diagnostic="Any silhouette edge can be oriented.";
TopOpInSilhouetteOperator_ERR_8302.Advice="Modify the view specifications.";
//
TopOpInSilhouetteOperatorWarning_ERR_8303.Request="Silhouette computation:";
TopOpInSilhouetteOperatorWarning_ERR_8303.Diagnostic="Some silhouette edges cannot be oriented.";
TopOpInSilhouetteOperatorWarning_ERR_8303.Advice="Those edges are not taken into account.";
//
TopOpInSilhouetteOperator_ERR_8304.Request="Silhouette computation:";
TopOpInSilhouetteOperator_ERR_8304.Diagnostic="The origin point is to close to the support body, the view angle is greater than or equal to 180 degres";
TopOpInSilhouetteOperator_ERR_8304.Advice="Modify the origin point.";
//
TopOpInSilhouetteOperator_ERR_8305.Request="Silhouette computation:";
TopOpInSilhouetteOperator_ERR_8305.Diagnostic="The shadow screen contains the view direction.";
TopOpInSilhouetteOperator_ERR_8305.Advice="Modify one of these inputs.";

//
// 8351-8370 WireDevelop JSX 08/03/10 
//
TopOpInWireDevelopOperator_ERR_8351.Request="Meridian curve computation:";
TopOpInWireDevelopOperator_ERR_8351.Diagnostic="Intersection between support surface and meridian curve does not give a mono domain wire.";
TopOpInWireDevelopOperator_ERR_8351.Advice="Modify the operator inputs or untrim support surface.";

//
