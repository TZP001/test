//------------------------------------------------------
// Resource file for input topological objects errors 
// En_EN
//================================================================
//                           INPUT
//================================================================
//----------------------------------Null or invalid input
//
TopObInNullPointer =
     "The pointer to the input data /P1 is null. 
 Define this data or check that the pointer has not been desallocated.";
//
TopObInNullData =
     "The input data /P1 is null.";
//
TopObInEmptyObject =
     "The object /P1 is empty.";
//
TopObInInvalidType =
     "/p1 is an invalid type of the input data /p2. Use /p3 type instead.";
//
TopObInIndex =
     "Index /p1 is out of range. Maximum value: /p2";
//
//----------------------------------Orientation
//
TopObInBadOrientation =
     "Invalid orientation value: /p1 is not a valid orientation for /p2.";
//
TopObInBadMatterSideValue =
     "Invalid matter side value: /P1 is not a valid matter side for /p2.";
//
TopObInBadLocationValue =
     "Invalid Location value: /P1 is not a valid location value for /p2.";
//
TopObInBadSideValue =
     "Invalid sidevalue: /P1 is not a valid side value for /p2.";
//
//----------------------------------Invalid dimension
//                               /p1 = cell, domain, .. /p2= good dimension
TopObInInvalidDimension=
     "The /p1 dimension is invalid: use a /p1 of dimension /p2.";
//
TopObInTooSmallDimension=
     "The /p1 dimension is too small: the dimension must be at least /p2.";
//
TopObInTooLargeDimension=
     "The /p1 dimension is too large: the dimension must be at most /p2.";
//
TopObInIncompatibleElement=
     " /p1 is incompatible with /p2.";
//  
//----------------------------------invalid element                          
//
TopObInNonModifiableElement=
     " /p1 is non modifiable.";
//
TopObInNoGeometry=
     " /p1 has no associated geometry.";
//
TopObInIncomplete=
     " /p1 is incomplete.";
//
TopObInIncompleteSplit=
     " Split Operation: the splitting face does not completely cut the body.
Select another face.";
//
TopObInSurSurUndetectedConfusion=
     " A geometrical confusion between two faces has not been detected. 
Check the contact between bodies.";
//
//----------------------------------All topological objects
//
TopObInCell=
     "cell";
//
TopObInDomain=
     "domain";
//
TopObInBody=
     "body";
//
TopObInVertex=
     "vertex";
//
TopObInEdge=
     "edge";
//
TopObInFace=
     "face";
//
TopObInVolume=
     "volume";
//
TopObInLoop=
     "loop";
//
TopObInLump=
     "lump";
//
TopObInVertexInVolume=
     "VertexInVolume";
//
TopObInVertexInFace=
     "VertexInFace";
//
TopObInWire=
     "wire";
//================================================================
//                           INTERNAL
//================================================================
//----------------------------------Unvailable
//
TopObIntUnvailable =
     "The method /P1 for the object /P2 is not available yet.";
//
TopObIntobjectCreationFailed =
     "An object of the /p1 class can not be created.";
//
TopObIntInterfaceFailed =
     "Binding of the /p1 implementation to /p2 interface failed.
      Check the dictionary.";
//
TopObIntImplFailed =
     "Binding of the /p1 interface to /p2 implementation failed.
      Check the dictionary.";
//
TopObIntMethodCallOrder =
     "Invalid methods calls order. The method /p1 should be called after /p2.";
//
TopObIntObjectType =
     "No class can be matched with a type of value /p1.";
//
TopObIntBadTopology =
     "An invalid topological configuration has been detected.";
//
TopObIntImpossibleWriting =
     "The object /p1 can not be written.";
//
TopObIntAllocation =
     "Cannot allocate memory.";
//
TopObIntNoSubd =
     "The /p1 element has no /p2 subdomain.";
//
TopObIntSubd =
     "Internal error /p1, /p2.";
//
TopObIntBadGeometry =
       "An internal error /p1 leads to a bad geometrical configuration.";
//
TopObIntMath =
       "Error /p1 in the mathematical package.";
//
// Topological model error 4000-4499
//
TopObInCheckJournal_ERR_4000.Request="Topological journal check failed.";
TopObInCheckJournal_ERR_4000.Diagnostic="The journal orders cannot lead from the input bodies to the output body.";
TopObInCheckJournal_ERR_4000.Advice="Check the journal orders or the copy/nocopy input bodies.";
//
TopObInLyingOnAmbiguousGeometry_ERR_4100.Request="Ambiguous geometry support of LyingOn.";
TopObInLyingOnAmbiguousGeometry_ERR_4100.Diagnostic="/P1 is lying on /P2 with ambiguous supports /P3 and /P4.";
TopObInLyingOnAmbiguousGeometry_ERR_4100.Advice="Avoid ambiguous LyingOn geometries.";
//
//
// Boolean Operators 4500-4999
//
TopObInBoolIncompleteSplit_ERR_4500.Request="Boolean Operator: Split by a skin.";
TopObInBoolIncompleteSplit_ERR_4500.Diagnostic="A skin does not cut right across one of the volume: the split cannot be computed.";
TopObInBoolIncompleteSplit_ERR_4500.Advice="Choose a skin that completly cuts one volume of the body.";
//
TopObInBoolImpossibleSplit_ERR_4501.Request="Boolean Operator: Split by a skin.";
TopObInBoolImpossibleSplit_ERR_4501.Diagnostic="A skin has a hole, and this hole is inside the volume: the split cannot be computed.";
TopObInBoolImpossibleSplit_ERR_4501.Advice="Choose a skin whose holes (if any) are not inside the volume of the body.";
//
TopObInBoolUnresolvedSpec_ERR_4502.Request="Boolean Operator: Unresolved Specifications.";
TopObInBoolUnresolvedSpec_ERR_4502.Diagnostic="Your specification can not be resolved : Trim operation can not be performed.";
TopObInBoolUnresolvedSpec_ERR_4502.Advice="Modify the faces selection.";
//
TopObInBoolIncompleteCut_ERR_4503.Request="Boolean Operator: Impossible Cut.";
TopObInBoolIncompleteCut_ERR_4503.Diagnostic="One body does not cut right across the other one: the split cannot be computed.";
TopObInBoolIncompleteCut_ERR_4503.Advice="Modify body's contacts so that they completly cut each other. Try to add some constraints.";
//
TopObInBoolIncompleteLayDown_ERR_4504.Request="Boolean Operator: Incomplete Boundary Lay Down.";
TopObInBoolIncompleteLayDown_ERR_4504.Diagnostic="The skin boundary does not completely lay down on the trimming body.";
TopObInBoolIncompleteLayDown_ERR_4504.Advice="Modify the contacts of the skin boundary so that the boundary completly lays down. Try to add some constraints.";
//
TopObInBoolImpossibleSewing_ERR_4505.Request="Sewing Operator: Impossible Computation due to incompatible orientations.";
TopObInBoolImpossibleSewing_ERR_4505.Diagnostic="The sewing skin orientation leads to an invalid result.";
TopObInBoolImpossibleSewing_ERR_4505.Advice="Invert the sewing skin orientation.";
//
TopObInBoolImpossibleReport_ERR_4506.Request="Boolean Operator: Geometrical intersection computation is impossible around highlighted edge.";
TopObInBoolImpossibleReport_ERR_4506.Diagnostic="Impossible geometrical computation: tangent or small elements lead to bad quality intersections (see highlighted edge).";
TopObInBoolImpossibleReport_ERR_4506.Advice="Modify body's contacts (use constraints, split or extrude one of the body).";
//
TopObInBoolMissedConfusion_ERR_4507.Request="Boolean Operator: Tangent Design detected.";
TopObInBoolMissedConfusion_ERR_4507.Diagnostic="The highlighted tangent area can not be solved.";
TopObInBoolMissedConfusion_ERR_4507.Advice="Modify body's contacts (use constraints, split or sew one of the body).";
//
TopObInBoolFaceFaceFailed_ERR_4508.Request="Boolean Operator: Face/Face intersection failed.";
TopObInBoolFaceFaceFailed_ERR_4508.Diagnostic="Confrontation between highlighted faces can not be solved.";
TopObInBoolFaceFaceFailed_ERR_4508.Advice="Modify contacts quality (use constraints).";
//
TopObInBoolNoLayDown_ERR_4509.Request="Boolean Operator: No Boundary Lay Down.";
TopObInBoolNoLayDown_ERR_4509.Diagnostic="None of the skin boundaries is laying on the trimming body.";
TopObInBoolNoLayDown_ERR_4509.Advice="Modify the contacts of the skin boundary so that the boundary completly lays down. Try to add some constraints.";
//
TopObInBoolTwistedVolume_ERR_4510.Request="Boolean Operator: A Twisted Volume has been generated.";
TopObInBoolTwistedVolume_ERR_4510.Diagnostic="The bodies relative positions as well as their contacts are ambiguous.";
TopObInBoolTwistedVolume_ERR_4510.Advice="Try to modify operations order.";
//
TopObInBoolInaccurateContact_ERR_4511.Request="Boolean Operator: Inaccurate faces contact.";
TopObInBoolInaccurateContact_ERR_4511.Diagnostic="Confrontation between highlighted faces can not be solved.";
TopObInBoolInaccurateContact_ERR_4511.Advice="Modify contacts quality (use constraints) or try to sew one of your body on the other one.";
//
TopObInBoolImpossibleCut_ERR_4512.Request="Boolean Operator:  Highlighted element can not be cut.";
TopObInBoolImpossibleCut_ERR_4512.Diagnostic="Highlighted element can not be cut: check its tangency contacts.";
TopObInBoolImpossibleCut_ERR_4512.Advice="Modify body's contacts (use constraints, split or extrude one of the body).";
//
TopObInSmartProjIncompleteSolution_ERR_4513.Request="Smart Projection Operator";
TopObInSmartProjIncompleteSolution_ERR_4513.Diagnostic="Wire Projection can not be completed";
TopObInSmartProjIncompleteSolution_ERR_4513.Advice="Extrude Original Shell or use projection and select good pieces.";
//
TopObInSmartProjNoInitialisation_ERR_4514.Request="Smart Projection Operator";
TopObInSmartProjNoInitialisation_ERR_4514.Diagnostic="Wire Projection  can not start";
TopObInSmartProjNoInitialisation_ERR_4514.Advice="Projection Gives only point or no solutions or there are many solutions with no possible selections.";
//
TopObInSmartProjCheckDistance_ERR_4515.Request="Smart Projection Operator";
TopObInSmartProjCheckDistance_ERR_4515.Diagnostic="A Wire Smart Projection gives several solutions";
TopObInSmartProjCheckDistance_ERR_4515.Advice="There is not a smart projection which is always the nearest projection. Use projection and select the good solution";
//
TopObInBoolImpossibleSplit_ERR_4516.Request="Boolean Operator: Split by a skin.";
TopObInBoolImpossibleSplit_ERR_4516.Diagnostic="The splitting skin is not valid: it is made of domains that intersect each other. Intersections locations are highlighted";
TopObInBoolImpossibleSplit_ERR_4516.Advice="Operate several split or resolve the skin with Trim operator.";
//
TopObInBoolImpossibleMultiTrim_ERR_4517.Request="Boolean Operator: Pieces Mode Trim";
TopObInBoolImpossibleMultiTrim_ERR_4517.Diagnostic="Invalid input bodies";
TopObInBoolImpossibleMultiTrim_ERR_4517.Advice="Input Bodies must contain only one domain.";
//
TopObInBoolImpossibleMultiTrim_ERR_4518.Request="Boolean Operator: Pieces Mode Trim";
TopObInBoolImpossibleMultiTrim_ERR_4518.Diagnostic="Invalid selection: highlighted element (input number /p1) has been cut into /p2 portion(s): portion /p3 can not be kept!";
TopObInBoolImpossibleMultiTrim_ERR_4518.Advice="Replace this input.";
//
TopObInBoolPositionComputation_ERR_4519.Request="Boolean Operator: Impossible Volume Recomposition";
TopObInBoolPositionComputation_ERR_4519.Diagnostic="One input body may be composed of a non-wanted thin volume. It can not be decided if it must be kept or not.";
TopObInBoolPositionComputation_ERR_4519.Advice="Check bodies composition with GSD/Disassemble feature and use RemoveLump feature to keep only useful domains. Then retry the operation.";
//
TopObInSmartProjEqualSolution_ERR_4520.Request="Smart Projection Operator";
TopObInSmartProjEqualSolution_ERR_4520.Diagnostic="Two solutions have the same max distance";
TopObInSmartProjEqualSolution_ERR_4520.Advice="Use projection and select the good result.";
//
TopObInBoolLayDownBadOrientation_ERR_4521.Request="Lay Down Operator.";
TopObInBoolLayDownBadOrientation_ERR_4521.Diagnostic="Lay down of several connected wires with bad orientation.";
TopObInBoolLayDownBadOrientation_ERR_4521.Advice="Create one body for each wire, lay down them and join the results.";
//
TopObInSmartProjIncompleteSolution_ERR_4522.Request="Smart Projection Operator.";
TopObInSmartProjIncompleteSolution_ERR_4522.Diagnostic="The initial wire can not be completely projected on shell.";
TopObInSmartProjIncompleteSolution_ERR_4522.Advice="Change option of smart projection to allow partial solution or split initial wire.";
//
TopObInBoolFullResult_ERR_4523.Request="Compatible Operator";
TopObInBoolFullResult_ERR_4523.Diagnostic="Result has full edge(s) and/or full vertex (vertices)";
TopObInBoolFullResult_ERR_4523.Advice="Remove full elements from input bodies.";
//
TopObInBoolFullResult_ERR_4524.Request="Compatible Operator";
TopObInBoolFullResult_ERR_4524.Diagnostic="Input bodies are equal";
TopObInBoolFullResult_ERR_4524.Advice="Choose different bodies.";
//
TopObIntCellNotInBody_ERR_4600.Request="/p1 : cell does not belong to body.";
TopObIntCellNotInBody_ERR_4600.Diagnostic="Cell /p1 does not belong to body /p2. The requested operation cannot be performed.";
TopObIntCellNotInBody_ERR_4600.Advice="Modify the input selection.";
//
TopObIntCATGeoClean_ERR_4601.Request    ="Geometric checker detects anomalie(s).";
TopObIntCATGeoClean_ERR_4601.Diagnostic ="/p1 detected at /p2.";
TopObIntCATGeoClean_ERR_4601.Advice     ="Clean input document and correct Operator.";
//
TopObIntCATGeoClean_ERR_4602.Request    ="Geometric Checker aborted.";
TopObIntCATGeoClean_ERR_4602.Diagnostic ="Unexpected error occured during Check.";
TopObIntCATGeoClean_ERR_4602.Advice     ="Contact your local support.";
//
TopObIntImpossibleSituation_ERR_4603.Request="Local Datas Invalid for algorithm.";
TopObIntImpossibleSituation_ERR_4603.Diagnostic="Operations leads to impossible situation.";
TopObIntImpossibleSituation_ERR_4603.Advice="Modify the input selection.";
//
TopObInBoolWarningStabilization_ERR_4700.Request   ="The orientation of some result curves can not be stabilized.";
TopObInBoolWarningStabilization_ERR_4700.Diagnostic="The orientation of the red curve can not be stable because it come from several input curves or it is the result of a multiple projection of a single input curve (Input curves are highlighted in blue).";
TopObInBoolWarningStabilization_ERR_4700.Advice    ="Use a projection direction or extract only usefull faces from the support.";
//
TopObInBoolWarningBoundaryHealing_ERR_4701.Request   ="Some invalid curves create an auto-crossing of the profile.";
TopObInBoolWarningBoundaryHealing_ERR_4701.Diagnostic="Highlighted curves are invalid. The profile can therefore not be repaired.";
TopObInBoolWarningBoundaryHealing_ERR_4701.Advice    ="Recreate those curves.";
//
TopObInBoolWarningRegularizator_ERR_4702.Request   ="Some selected faces cross each other: they can not be regularised.";
TopObInBoolWarningRegularizator_ERR_4702.Diagnostic="Highlighted faces are not tangent. The body can therefore not be regularised.";
TopObInBoolWarningRegularizator_ERR_4702.Advice    ="Reconsider the body's design.";
//
TopObInBoolWarningInaccurateContact_ERR_4703.Request   ="Unprecise contact between bodies leads to a non connex result.";
TopObInBoolWarningInaccurateContact_ERR_4703.Diagnostic="Highlighted faces are tangent but can not be merged: result is made of several domains.";
TopObInBoolWarningInaccurateContact_ERR_4703.Advice    ="Reconsider bodies design or use the RemoveLump feature to eliminate some domains if necessary.";
//
TopObInBoolWarningNonManifoldEdges_ERR_4704.Request   ="Tangent configurations have been created during boolean operation.";
TopObInBoolWarningNonManifoldEdges_ERR_4704.Diagnostic="Tangent configurations may reveal unprecise contact between bodies.";
TopObInBoolWarningNonManifoldEdges_ERR_4704.Advice    ="Check bodies design.";
//
TopObInBoolWarningClosedWirePositionning_ERR_4705.Request = "Closed wire positionning is ambiguous.";
TopObInBoolWarningClosedWirePositionning_ERR_4705.Diagnostic = "Result depends on the position of the highlighted closure point versus the intersection location. Selection may then change during update.";
TopObInBoolWarningClosedWirePositionning_ERR_4705.Advice = "Use the keep/remove option to get a stable result";
//
TopObInBoolWarningGapInMissing_ERR_4706.Request = "A gap has been created.";
TopObInBoolWarningGapInMissing_ERR_4706.Diagnostic = "The highlighted edge has an internal gap of /p1 mm.";
TopObInBoolWarningGapInMissing_ERR_4706.Advice = "Contact between the two bodies is not precise enough.";
//
TopObInBoolWarningKeepAndDelete_ERR_4707.Request = "Volume Is Kept AndRemoved.";
TopObInBoolWarningKeepAndDelete_ERR_4707.Diagnostic = "A face kept and a face Removed are in the same volume.";
TopObInBoolWarningKeepAndDelete_ERR_4707.Advice = "The face will not be kept as the other faces of the volume.";
//
TopObInBoolWarningToleranceValue_ERR_4708.Request = "Tolerance value over 0.1";
TopObInBoolWarningToleranceValue_ERR_4708.Diagnostic = "Values bigger than 0.1 may be incompatible with following tests and operators.";
TopObInBoolWarningToleranceValue_ERR_4708.Advice = "Use a value of tolerance under 0.1";
//
//---------------------------------- Properties 4800-4899
//
TopObIntProp_ERR_4800.Request = "Attempt to define new owner to Property wich has already one";
TopObIntProp_ERR_4800.Diagnostic = "Property /P1 : current owner /P2 : new owner /P3";
TopObIntProp_ERR_4800.Advice = "Check customer Property design";
//
TopObIntProp_ERR_4801.Request = "Failed to add Property to input topology.";
TopObIntProp_ERR_4801.Diagnostic = "Something caused the adding of the property to fail, check your inputs.";
TopObIntProp_ERR_4801.Advice = "Make sure the inputs are topology and that the properties are not already attached to others topologies";
//
TopObIntProp_ERR_4802.Request = "Failed to Propagate properties after running operator.";
TopObIntProp_ERR_4802.Diagnostic = "Journal of inner operator somehow was deleting while running the operator.";
TopObIntProp_ERR_4802.Advice = "Check journal management for inner operator";
