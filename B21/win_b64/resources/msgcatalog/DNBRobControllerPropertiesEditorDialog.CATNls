// DO NOT EDIT :: THE CAA2 WIZARD WILL REPLACE ALL THE CODE HERE

GeneralCntrFrame.ControllerType.Title     = "Controller Type : ";
GeneralCntrFrame.ControllerType.ShortHelp = "Type of the controller.User-defined information.";
GeneralCntrFrame.ControllerType.LongHelp  = "Type of the controller.User-defined information.\nIt is valuated for robots coming from the Robot library \nto indicate a specific manufacturer or robot series.";
GeneralCntrFrame.ControllerType.Help      = "Type of the controller.User-defined information.";

GeneralCntrFrame.pTypeEditor.Title    = "Controller Type : ";
GeneralCntrFrame.pTypeEditor.ShortHelp= "Type of the controller.User-defined information.";
GeneralCntrFrame.pTypeEditor.LongHelp = "Type of the controller.User-defined information.\nIt is valuated for robots coming from the Robot library \nto indicate a specific manufacturer or robot series.";
GeneralCntrFrame.pTypeEditor.Help     = "Type of the controller.User-defined information.";



GeneralCntrFrame.SingularityTolerance.Title     = "Singularity Tolerance : ";
GeneralCntrFrame.SingularityTolerance.ShortHelp = "Wrist singularity tolerance angle.";
GeneralCntrFrame.SingularityTolerance.LongHelp  = "Wrist singularity tolerance angle.\nIt defines the zone around the wrist singular position that is \nconsidered unreachable by the inverse kinematics.\nAuthorized values are between 0 and 10 degrees (inclusive).";
GeneralCntrFrame.SingularityTolerance.Help      = "Wrist singularity tolerance angle.";

GeneralCntrFrame.pSingularityTolEdt.Title     = "Singularity Tolerance : ";
GeneralCntrFrame.pSingularityTolEdt.ShortHelp = "Wrist singularity tolerance angle.";
GeneralCntrFrame.pSingularityTolEdt.LongHelp  = "Wrist singularity tolerance angle.\nIt defines the zone around the wrist singular position that is \nconsidered unreachable by the inverse kinematics.\nAuthorized values are between 0 and 10 degrees (inclusive).";
GeneralCntrFrame.pSingularityTolEdt.Help      = "Wrist singularity tolerance angle.";


GeneralCntrFrame.JointInterpolationMode.Title     = "Joint Interpolation Mode : ";
GeneralCntrFrame.JointInterpolationMode.ShortHelp = "Interpolation Mode used to compute joint values.";
GeneralCntrFrame.JointInterpolationMode.LongHelp  = "Joint Interpolation Mode.\nIt defines how the actual joint values are computed\n when moving in non-Cartesian motion to a Cartesian target.\n\nAuthorized values are:\n  Shortest Angles.\n  Solution Angles.\n  Turn Numbers.\n  Absolute Shortest Angles.\n  Turn Signs";
GeneralCntrFrame.JointInterpolationMode.Help      = "Interpolation Mode used to compute joint values.";

GeneralCntrFrame._pJtInterpolationModeCombo.Title     = "Joint Interpolation Mode : ";
GeneralCntrFrame._pJtInterpolationModeCombo.ShortHelp = "Interpolation Mode used to compute joint values.";
GeneralCntrFrame._pJtInterpolationModeCombo.LongHelp  = "Joint Interpolation Mode.\nAuthorized values are:\n  Shortest Angles.\n  Solution Angles.\n  Turn Numbers.\n  Absolute Shortest Angles.\n  Turn Signs";
GeneralCntrFrame._pJtInterpolationModeCombo.Help      = "Interpolation Mode used to compute joint values.";


HeartBeatFrame.Title      = "Heart Beat";
HeartBeatFrame.ShortHelp  = "Controller sampling rate used in motion planning computation.";
HeartBeatFrame.LongHelp   = "The heart beat defines the sampling rate of the controller at which\nthe inverse kinematics and motion planning updates are computed\n during a move.";
HeartBeatFrame.Help       = "Controller sampling rate used in motion planning computation.";


HeartBeatFrame.SampleRate.Title     = "Rate : ";
HeartBeatFrame.SampleRate.ShortHelp = "Controller sampling rate used in motion planning computation";
HeartBeatFrame.SampleRate.LongHelp  = "The heart beat defines the sampling rate of the controller at which\nthe inverse kinematics and motion planning updates are computed\n during a move.";
HeartBeatFrame.SampleRate.Help      = "Controller sampling rate used in motion planning computation";

HeartBeatFrame.pSamplerateEdt.Title     = "Rate : ";
HeartBeatFrame.pSamplerateEdt.ShortHelp = "Controller sampling rate used in motion planning computation.";
HeartBeatFrame.pSamplerateEdt.LongHelp  = "The heart beat defines the sampling rate of the controller at which\nthe inverse kinematics and motion planning updates are computed\n during a move.";
HeartBeatFrame.pSamplerateEdt.Help      = "Controller sampling rate used in motion planning computation.";


TimeCompensationFrame.Title     = "Time Compensation";
TimeCompensationFrame.ShortHelp = "Time Compensation.";
TimeCompensationFrame.LongHelp  = "Time Compensation.";
TimeCompensationFrame.Help      = "Time Compensation.";

TimeCompensationFrame.ResponseDelay.Title     = "Response Delay : ";
TimeCompensationFrame.ResponseDelay.ShortHelp = "Delay time between motion command trigger and actual move.";
TimeCompensationFrame.ResponseDelay.LongHelp  = "The amount of time between the activation of the motion command\nand the actual motion of the robot.\nThe corresponding data type is a double";
TimeCompensationFrame.ResponseDelay.Help      = "Delay time between motion command trigger and actual move.";

TimeCompensationFrame.pRespDelayEdt.Title     = "Response Delay : ";
TimeCompensationFrame.pRespDelayEdt.ShortHelp = "Delay time between motion command trigger and actual move.";
TimeCompensationFrame.pRespDelayEdt.LongHelp  = "The amount of time between the activation of the motion command\nand the actual motion of the robot.\nThe corresponding data type is a double";
TimeCompensationFrame.pRespDelayEdt.Help      = "Delay time between motion command trigger and actual move.";

TimeCompensationFrame.SettleTime.Title      = "Settle Time : ";
TimeCompensationFrame.SettleTime.ShortHelp  = "Manipulator vibrations settle time after reaching a point.";
TimeCompensationFrame.SettleTime.LongHelp   = "The estimated amount of time required for the settling of the manipulator vibrations after reaching a point.\nThe corresponding data type is double.";
TimeCompensationFrame.SettleTime.Help       = "Manipulator vibrations settle time after reaching a point.";

TimeCompensationFrame.pSettleTimeEdt.Title      = "Settle Time : ";
TimeCompensationFrame.pSettleTimeEdt.ShortHelp  = "Manipulator vibrations settle time after reaching a point.";
TimeCompensationFrame.pSettleTimeEdt.LongHelp   = "The estimated amount of time required for the settling of the manipulator vibrations after reaching a point.\nThe corresponding data type is double.";
TimeCompensationFrame.pSettleTimeEdt.Help       = "Manipulator vibrations settle time after reaching a point.";


ScalingFrame.Title      = "Scaling";
ScalingFrame.ShortHelp  = "Scaling";
ScalingFrame.LongHelp   = "Scaling";
ScalingFrame.Help       = "Scaling";


ScalingFrame.Acceleration.Title     = "Acceleration :";
ScalingFrame.Acceleration.ShortHelp = "Acceleration.\nChoose Constant or Variable.";
ScalingFrame.Acceleration.LongHelp  = "Acceleration.\nChoose Constant or Variable.";
ScalingFrame.Acceleration.Help      = "Acceleration.\nChoose Constant or Variable.";

ScalingFrame.AcclBtnFrame.Constant.Title      = "Constant";
ScalingFrame.AcclBtnFrame.Constant.ShortHelp  = "Constant";
ScalingFrame.AcclBtnFrame.Constant.LongHelp   = "The value of velocity is scaled in order to extend the motion time to the desired value";
ScalingFrame.AcclBtnFrame.Constant.Help       = "The value of velocity is scaled in order to extend the motion time to the desired value";

ScalingFrame.AcclBtnFrame.Variable.Title      = "Variable";
ScalingFrame.AcclBtnFrame.Variable.ShortHelp  = "Variable";
ScalingFrame.AcclBtnFrame.Variable.LongHelp   = "The value of acceleration is scaled in order to extend the motion time to the desired value";
ScalingFrame.AcclBtnFrame.Variable.Help       = "The value of acceleration is scaled in order to extend the motion time to the desired value";

TimebasedMotionFrame.Title      = "Time-based Motion";
TimebasedMotionFrame.ShortHelp  = "Time-based Motion";
TimebasedMotionFrame.LongHelp   = "Time-based Motion";
TimebasedMotionFrame.Help       = "Time-based Motion";

TimebasedMotionFrame.Type.Title     = "Type: ";
TimebasedMotionFrame.Type.ShortHelp = "Type.\nChoose Exact or Contrained.";
TimebasedMotionFrame.Type.LongHelp  = "Type.\nChoose Exact or Contrained.";
TimebasedMotionFrame.Type.Help      = "Type.\nChoose Exact or Contrained.";

TimebasedMotionFrame.MotTypeBtnFrame.Exact.Title      = "Exact";
TimebasedMotionFrame.MotTypeBtnFrame.Exact.ShortHelp  = "Exact:\nMotion time is equal to defined value.";
TimebasedMotionFrame.MotTypeBtnFrame.Exact.LongHelp   = "Exact:\nThe device will perform the motion in the designated amount of time.";
TimebasedMotionFrame.MotTypeBtnFrame.Exact.Help       = "Exact:\nMotion time is equal to defined value.";

TimebasedMotionFrame.MotTypeBtnFrame.Constrained.Title      = "Constrained";
TimebasedMotionFrame.MotTypeBtnFrame.Constrained.ShortHelp  = "Constrained:\nMotion time is superior or equal to defined value";
TimebasedMotionFrame.MotTypeBtnFrame.Constrained.LongHelp   = "Constrained:\nThe device will move at the fastest possible speed while \ntaking into consideration speed limits and acceleration limits.\nTherefore, the move may take longer than the time requested";
TimebasedMotionFrame.MotTypeBtnFrame.Constrained.Help       = "Constrained:\nMotion time is superior or equal to defined value";


// END WIZARD REPLACEMENT ZONE
