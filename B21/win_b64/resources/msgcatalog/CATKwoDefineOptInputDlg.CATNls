Title = "Define Optimization Input";

referenceInfosFrame.Title = "Reference";
referenceInfosFrame.aliasLabel.Title = "Input name";
referenceInfosFrame.refAliasLabel.Title = "Reference name";
referenceInfosFrame.currentRefValueLabel.Title = "Current ref. value";
referenceInfosFrame.nominalRefValueLabel.Title = "Nominal ref. value";
referenceInfosFrame.useNominalRefValueRB.Title = "Keep nominal value";
referenceInfosFrame.useNominalRefValueRB.Help = "Enables to define the default inputs behavior when creating new methods: if checked, the input will be considered as a constant parameter equal to the nominal reference value";
referenceInfosFrame.useNominalRefValueRB.ShortHelp = "Define Input Behavior";
referenceInfosFrame.useNominalRefValueRB.LongHelp = "Allows to define the default inputs behavior when creating new methods: if checked, when running new methods, the input will be considered as a constant parameter equal to the nominal reference value.";
referenceInfosFrame.doNotUseNominalRefValueRB.Title = "Variable";
referenceInfosFrame.doNotUseNominalRefValueRB.Help = "Enables to define the default inputs behavior when creating new methods: if checked, the input will be considered as a variable parameter";
referenceInfosFrame.doNotUseNominalRefValueRB.ShortHelp = "This option allows to define the default inputs behavior when creating new methods: if checked, the input will be considered as a variable parameter when running new methods.";
referenceInfosFrame.doNotUseNominalRefValueRB.LongHelp = "Allows to define the default inputs behavior when creating new methods: if checked, the input will be considered as a variable parameter when running new methods.";

inputDefinitionModeFrame.Title = "Select the input definition mode";
inputDefinitionModeFrame.valuesListRB.Title = "List of possible values";
inputDefinitionModeFrame.valuesListRB.Help = "Constrains the referenced parameter to take only one of the possible values when running the optimization method";
inputDefinitionModeFrame.valuesListRB.ShortHelp = "Check it to constrain the referenced parameter to take only one of the given possible values when running the optimization method.";
inputDefinitionModeFrame.valuesListRB.LongHelp = "Check it to constrain the referenced parameter to take only one of the given possible values when running the optimization method.";
inputDefinitionModeFrame.rangesStepRB.Title = "Ranges and/or step";
inputDefinitionModeFrame.rangesStepRB.Help = "Check it to constrain the referenced parameter to remain in the given range and/or to respect the given step when running the optimization method.";
inputDefinitionModeFrame.rangesStepRB.ShortHelp = "Check it to constrain the referenced parameter to remain in the given range and/or to respect the given step when running the optimization method.";
inputDefinitionModeFrame.rangesStepRB.LongHelp = "Check it to constrain the referenced parameter to remain in the given range and/or to respect the given step when running the optimization method.";

valuesListFrame.Title = "Define the list of possible values for the selected input";
valuesListFrame.Help = "Use it to give a list of possible values. Note that it is mandatory for 'String' parameters";
valuesListFrame.ShortHelp = "Use it to give a list of possible values. Note that it is mandatory for 'String' parameters.";
valuesListFrame.LongHelp = "Provides a list of possible values. Note that it is mandatory for 'String' parameters.";

rangesStepFrame.Title = "Define the ranges and/or the step for the selected input";
rangesStepFrame.infBoundChkB.Title = "Set inferior bound = ";
rangesStepFrame.supBoundChkB.Title = "Set superior bound =  ";
rangesStepFrame.stepChkB.Title = "Set step = ";

EmptyInputNameError = "Name cannot be empty. Please, try another name.";
EmptyInputNameErrorHd = "Invalid input name";





