#!/bin/ksh

# =====================================================================
# Copyright 2002 (C) Dassault-Systemes
# 
# adl_promote_is: promote the current workspace to the remote workspace
# All the changes appeared since the last promotion will be transferred 
# into the remote mirror workspace and this workspace will be promoted
# to its parent workspace.
#
# =====================================================================
unset _lock_code
[ ! -z "$ADL_DEBUG" ] && set -x
[ "$(uname -s)" = "Windows_NT" ] && export ADL_USER_PATH="$(printf "%s" "$ADL_USER_PATH" | sed 's+\\+/+g')"
. "$ADL_USER_PATH"/admin/ADLMultiSiteCommon.sh

# =====================================================================
# Out function
# Syntax: $1 = exit code; $2 = message code; $3... = message parameter(s)
# CAUTION: only the first for message parameters can have spaces
# =====================================================================
Out()
{
	ExitCode=$1
	shift
	trap 'Out 5 0100' HUP INT QUIT TERM

	# Send event 'finish' to the remote transfer manager
	[ $ExitCode -eq 0 -a $_lock_code -eq 0 ] && "$_CLIENT" $_RUN_COMMON -finish "$_T_NAME" "$ADL_WS" "$_L_SITE" "#CMD=adl_promote_is"

	if [ $ExitCode -ge 1 ]
	then
		# Send 'abort' event to the remote transfer manager
		[ $_lock_code -eq 0 ] && "$_CLIENT" $_RUN_COMMON -abort "$_T_NAME" "$ADL_WS" "$_L_SITE" "#CMD=adl_promote_is"

		echo ""
		if [ $# -eq 1 ]
		then
			_printerr "$1" >&2
		elif [ $# -eq 2 ]
		then
			_printerr "$1" "$2" >&2
		elif [ $# -eq 3 ]
		then
			_printerr "$1" "$2" "$3" >&2
		elif [ $# -eq 4 ]
		then
			_printerr "$1" "$2" "$3" "$4" >&2
		elif [ $# -gt 4 ]
		then
			_printerr $* >&2
		fi

		echo ""
		_printerr 0030 >&2

	elif [ $# -ge 1 ]
	then
		echo ""
		if [ $# -eq 1 ]
		then
			_printmsg "$1" >&2
		elif [ $# -eq 2 ]
		then
			_printmsg "$1" "$2" >&2
		elif [ $# -eq 3 ]
		then
			_printmsg "$1" "$2" "$3" >&2
		elif [ $# -eq 4 ]
		then
			_printmsg "$1" "$2" "$3" "$4" >&2
		elif [ $# -gt 4 ]
		then
			_printmsg $* >&2
		fi
	fi
	unset IFS

	# Clean possibly dedicated environment in the transfer manager daemon
	"$_CLIENT" $_RUN_COMMON -finish > $NULL 2>&1
	# Remove dedicated temporary directory (its name contains an UUID)
	if [ ! -z "$_R_TMP" ]
	then
		"$_CLIENT" $_RUN_COMMON -rm '"'$_R_TMP'"' -rec || _printerr 0516 "$_R_TMP"
	fi

	\rm -rf "$DefaultTmpDir"/*_$$
	\rm -rf "$DefaultTmpDir"/*_$$.sh
	\rm -rf "$DefaultTmpDir"/*_$$.txt

	exit $ExitCode
}
trap 'Out 5 0100 ' HUP INT QUIT TERM

# =====================================================================
# Analyse des parametres d'appel
# =====================================================================

typeset -L1 OneChar
CheckOptArg()
{
	# Usage : CheckOptArg opt arg
	OneChar="$2"
	if [ "$2" = "" -o "$OneChar" = "-" ]
	then
		_printerr 0103 "$1" # "Option /p1: one argument is required"
		Out 5 0510
	fi
}

unset _T_NAME

# Note: _R_HOST & _R_PORT sont obsoletes -> utiliser _R_SERVER
unset _R_HOST
unset _R_PORT
unset _R_SERVER
unset _R_WS
unset _TREE_OPTION
unset _FORCE_START_OPTION
unset _CR_OPTION
unset _CR_LIST
unset _L_WS_TREE_LIST
export _WS_TREE_LIST_FILE="$DefaultTmpDir"/ls_tree_$$.txt
unset _FW_BY_FW_OPTION
unset _R_ALL_WS_TREE
unset _L_ALL_WS_TREE

while [ $# -ge 1 ]
do
	case "$1" in
		-h | -help | -\? ) #-------------------> HELP NEEDED
			_printmsg 0510 # usage ...
			_printmsg 0500
			exit 0
			;;
		-tree ) #-------------------> LOCAL WORKSPACE TREE(s)
			_TREE_OPTION=true
			shift
			touch "$_WS_TREE_LIST_FILE"
			while [ $# -ne 0 ]
			do
				OneChar="$1"
				if [ "$OneChar" != "-" ]
				then
					echo "$1" >> "$_WS_TREE_LIST_FILE"
					_L_WS_TREE_LIST="$1 $_L_WS_TREE_LIST"
					shift
				else
					break
				fi
			done
			if [ ! -s "$_WS_TREE_LIST_FILE" ]
			then
				_printerr 0103 "$1" # "Option /p1: one argument is required"
				Out 5 0510
			fi
			;;
		-transfer ) #-------------------> TRANSFER NAME
			CheckOptArg "$1" "$2"
			export _T_NAME="$2"
			shift 2
			;;
		-force_start ) #-------------------> FORCE TRANSFER TO START
			export _FORCE_START_OPTION="-force_start"
			shift
			;;
		-fw_by_fw ) #-------------------> FORCE TO START A TRANSFER FOR EACH FRAMEWORK
			export _FW_BY_FW_OPTION=true
			shift
			;;
		-* ) _printerr 0104 "$1" # "Unknown option: /p1"
			Out 5 0510
			;;
		*) _printerr 0411 "$1" # "Argument /p1 is not expected."
			Out 5 0510
			;;
	esac
done

# Check there is a current workspace
if [ -z "$ADL_WS" ]
then
	Out 5 0108 "adl_ch_ws" # "No current workspace. Use /p1 to set the current workspace to the local transfer workspace.";
fi

######################################################################
#
# Check or compute name of transfer + check remote workspace
#
######################################################################
check_transfer

# Check a mirror workspace exists
[ "$_R_MIRROR_WS" = "NOT_MIRROR_WS" ] && Out 5 0340 # "This command cannot be used because the transfer has been created without remote mirror workspace."

######################################################################
#
# Connection to the remote Multisite transfer manager
#
######################################################################
init_connection_with_remote_site "$_R_SERVER"

######################################################################
#
# Check information registered locally against current state
# of remote site -> information can be then retrieved in the 
# $_MIRROR_INFO_FILE file that is transferred locally
#
######################################################################
check_remote_transfer

# If no tree is specified, use the adl_ls_transfer command to know the list of trees to take in account
if [ ! -s "$_WS_TREE_LIST_FILE" ]
then
	$_AWK -F\| '{print $5}' "$DefaultTmpDir"/ls_transfer_$$.txt >"$_WS_TREE_LIST_FILE"
	[ $? -ne 0 ] && Out 5 0221 "$_WS_TREE_LIST_FILE" # "Failed to create temporary file /p1..."
fi

# Specific to DS: if CR management is on, set a flag to check before promoting in each tree if osirix is available
unset _DS_INSTALL
[ "$(adl_version -program -sep "|" | $_AWK -F\| '{print $2}')" = "NULL" ] && export _DS_INSTALL=true

######################################################################
#
# Prevent for concurrent accesses
#
######################################################################
[ ! -z "$_FORCE_START_OPTION" ] && "$_CLIENT" $_RUN_COMMON -abort "$_T_NAME" "$ADL_WS" "$_L_SITE"
"$_CLIENT" $_RUN_COMMON -start "$_T_NAME" "$ADL_WS" "$_L_SITE" "#CMD=adl_promote_is" >"$DefaultTmpDir"/start_is_$$.txt
_lock_code=$?
if [ $_lock_code -ne 0 ]
then
	grep 'A session already exists with this identifier' "$DefaultTmpDir"/start_is_$$.txt >$NULL
	if [ $? -eq 0 ]
	then
		 # "The same transfer \"/p1\" from workspace \"/p2\" is already registered on the remote host /p3..."
		Out 5 0333 "$_T_NAME" "$ADL_WS" "$_R_HOST"
	else
		Out 5 0334 "$_R_SERVER" # "The remote transfer manager does not respond from /p1."
	fi
fi

######################################################################
#
# Execute the command
#
######################################################################

# Change current workspace and remote host
_printmsg 0320 "$_R_WS" # "Changing current remote working workspace to /p1..."
"$_CLIENT" $_RUN_COMMON -setenv "$_R_WS" -no_image > "$DefaultTmpDir"/r_traces_$$.txt 2>&1
[ $? -ne 0 ] && \cat "$DefaultTmpDir"/r_traces_$$.txt && Out 5 0314 # "Failed to set current remote workspace for attaching components."

# Get information about local workspace
unset _OPTIONS
[ ! -z "$_L_WS_TREE_LIST" ] && _OPTIONS="-tree $_L_WS_TREE_LIST"
"$ADL_USER_PATH"/adl_ds_ws $_OPTIONS -program -sep \| -out "$DefaultTmpDir"/ds_l_ws_$$.txt
[ $? -ne 0 ] && Out 5 0106 # "Failed to extract information about local workspace"

#
# One transfer is launched per tree and all are run one by one
# Special case : when it is the first time a promotion is made 
# there are one transfer launched per framework in local workspace
# This is done to ensure the import operation in the remote database
# especially when there is a lot of data to be imported.
#
rc=0
while read _one_tree
do
	echo " " | "$_CLIENT" $_RUN_COMMON -log_input -echo
	# Translate the local workspace tree using proper upper/lower case
	_L_WS_TREE=$($_AWK -F\| '{if (tolower($5)==tolower("'$_one_tree'")) print $5}' "$DefaultTmpDir"/ls_transfer_$$.txt)

	_R_WS_TREE=$($_AWK -F\| '{if (tolower($5)==tolower("'$_L_WS_TREE'")) print $9}' "$DefaultTmpDir"/ls_transfer_$$.txt)
	[ -z "$_R_WS_TREE" ] && Out 5 413 "$_L_WS_TREE" # "Failed to extract name of remote workspace tree..."

	if [ ! -z "$_L_IMAGE" ]
	then
		_ADL_WORKING_DIR="$ADL_IMAGE_DOS_DIR/ToolsData/MultiSite/${_T_NAME}/${_L_WS_TREE}"
	else
		_ADL_WORKING_DIR="$_L_DIR/MultiSite/${ADL_WS}/${_T_NAME}/${_L_WS_TREE}"
	fi
	if [ ! -d "$_ADL_WORKING_DIR" ]
	then
		\mkdir -p "$_ADL_WORKING_DIR" || Out 5 0031 "$_ADL_WORKING_DIR"
	fi

	# Check if the workspace is already promoted
	\touch "$_ADL_WORKING_DIR/0lstate.txt"
	_currrev=$($_AWK -F\| '{if ($1 == "_WS" && $4=="'$_L_WS_TREE'") print $7}' "$DefaultTmpDir"/ds_l_ws_$$.txt)
	_currrank=$($_AWK -F\| '{if ($1 == "_WS" && $4=="'$_L_WS_TREE'") print $8}' "$DefaultTmpDir"/ds_l_ws_$$.txt)
	_prevrev=$($_AWK -F\| '{if ($1 == "_WS") print $7}' "$_ADL_WORKING_DIR/0lstate.txt")
	_prevrank=$($_AWK -F\| '{if ($1 == "_WS") print $8}' "$_ADL_WORKING_DIR/0lstate.txt")
	if [ "$_currrank" = "$_prevrank" -a "$_currrev" = "$_prevrev" ]
	then
		# Tranfer is already done to remote site, is the mirror workspace already promoted?
		_mirror_promoted_status_in_tree=$($_AWK -F\| ' \
			BEGIN {printit=0}\
				  {if ($1=="_WS" && $4=="'$_R_WS_TREE'") printit=1}\
				  {if (printit==1 && $1=="__WS_STATUS") {print $4; printit=0}} ' "$_MIRROR_INFO_FILE")
		if [ "$_mirror_promoted_status_in_tree" = "NOT_PROMOTED" ]
		then
			_L_ALL_WS_TREE="$_L_ALL_WS_TREE $_L_WS_TREE"
			_R_ALL_WS_TREE="$_R_ALL_WS_TREE $_R_WS_TREE"
		fi
		continue
	fi

	_printmsg 0511 "$ADL_WS" "$_L_WS_TREE" # "Transferring the workspace \"/p1\" in the workspace tree \"/p2\"..."
	# Check if the remote workspace is synchronized and if it must be
	# In that case it is not needed to run a transfer because the remote promotion will be refused
	_mirror_status_in_tree=$($_AWK -F\| ' \
		BEGIN {printit=0}\
		      {if ($1=="_WS" && $4=="'$_R_WS_TREE'") printit=1}\
		      {if (printit==1 && $1=="__WS_STATUS") {print $2; printit=0}} ' "$_MIRROR_INFO_FILE")
	if [ "$_mirror_status_in_tree" = "NOT_SYNCHRONIZED" ]
	then
		# Check if the remote parent workspace forces its child workspaces to be synchronized 
		# before allowing them to promote
		_parent_ws=$($_AWK -F\| '{if ($1=="_WS" && $4=="'$_R_WS_TREE'") print $9}' "$_MIRROR_INFO_FILE")
		"$_CLIENT" $_RUN_COMMON -cmd '"'$_RemoteADLUserPath/adl_ds_ws'"' "${_parent_ws}" -tree "$_R_WS_TREE" -program '-sep "|"' -out '"'$_R_TMP/r_ds_ws_parent.txt'"'
		[ $? -ne 0 ] && Out 5 0514 "${_parent_ws}" "$_R_WS" # "Failed to retrieve information on parent workspace..."
		"$_CLIENT" $_RUN_COMMON -get "$_R_TMP/r_ds_ws_parent.txt" "$DefaultTmpDir"/r_ds_ws_parent_$$.txt || Out 5 0025 "$_R_TMP/r_ds_ws_parent.txt" "$DefaultTmpDir"/r_ds_ws_parent_$$.txt 
		_sync_needed=$($_AWK -F\| '{if ($1=="_WS" && $4=="'$_R_WS_TREE'") print $17}' "$DefaultTmpDir"/r_ds_ws_parent_$$.txt)
		if [ "$_sync_needed" = "SYNC_FOR_PROMO" ]
		then
			_printerr 0515 "$_R_WS" "$_R_WS_TREE" "$_parent_ws" "$ADL_WS" # The remote mirror workspace "\/p1\" is not synchronized in tree \"/p2\" with its parent workspace \"/p3\"..."
			rc=5
			continue
		fi
	fi
	_L_ALL_WS_TREE="$_L_ALL_WS_TREE $_L_WS_TREE"
	_R_ALL_WS_TREE="$_R_ALL_WS_TREE $_R_WS_TREE"

	# If CR management is active, check if Osirix is available
	if [ ! -z "$_DS_INSTALL" ]
	then
		"$_CLIENT" $_RUN_COMMON -cmd '"'$_RemoteADLUserPath/adl_ls_tree'"' "$_R_WS_TREE" -program '-sep "|"' -out '"'$_R_TMP/treeinfo$$.txt'"'
		if [ $? -eq 0 ]
		then
			"$_CLIENT" $_RUN_COMMON -get "$_R_TMP/treeinfo$$.txt" "$DefaultTmpDir"/treeinfo$$ || Out 5 0025 "$_R_TMP/treeinfo$$.txt" "$DefaultTmpDir"/treeinfo$$
			export _R_CR_IN_TREE=$($_AWK -F\| '{print $6}' "$DefaultTmpDir"/treeinfo$$)
		else
			Out 5 0114 "$_R_WS_TREE" # "Failed to retrieve information about remote workspace tree"
		fi

		if [ "$_R_CR_IN_TREE" != "NONE" ]
		then
			"$_CLIENT" $_RUN_COMMON -cmd '"'$_RemoteADLUserPath/adl_ds_cr'"' 492741A 2>&1 > "$DefaultTmpDir"/dscr_$$.txt
			if [ $? -ne 0 ]
			then
				\cat "$DefaultTmpDir"/dscr_$$.txt | "$_CLIENT" $_RUN_COMMON -log_input -echo
				Out 5 0521 "$_R_SERVER" # "Failed to access Osirix from remote host \"/p1\"..."
			fi
		fi
	fi

	[ -z "$_L_IMAGE" -a  ! -z "$ADL_IMAGE" ] && export _L_IMAGE="$ADL_IMAGE"

	# Look if it is the first time a promotion is made in this tree
	unset _loop_on_fw
	if [ ! -z "$_L_IMAGE" ]
	then
		[ ! -s "$ADL_IMAGE_DOS_DIR/ToolsData/MultiSite/${_T_NAME}/${_L_WS_TREE}/local_delta_param.txt" ] && _loop_on_fw=true
	else
		[ ! -s "$_L_DIR/MultiSite/${ADL_WS}/${_T_NAME}/${_L_WS_TREE}/local_delta_param.txt" ] && _loop_on_fw=true
	fi

	# Loop on frameworks if either the first time or explicitly asked by the user
	rc3=0
	if [ ! -z "$_loop_on_fw" -o ! -z "$_FW_BY_FW_OPTION" ]
	then
		##################################################################
		# Run the intersite promotion by looping on local frameworks
		
		_printmsg 0517 "$ADL_WS" "$_R_SITE" "$_L_WS_TREE" # "Information: this is the first promotion from \"p1\" to distant site \"/p2\"..."

		"$ADL_USER_PATH"/adl_ls_fw -tree "$_L_WS_TREE" -program -sep "|" -out "$DefaultTmpDir"/ls_fw_$$.txt
		if [ $? -ne 0 ]
		then
			_printerr 0229 # "Failed to list components in current workspace."
			rc=5
			rc3=5
			continue
		else
			$_AWK -F\| '{print $1}' "$DefaultTmpDir"/ls_fw_$$.txt > "$DefaultTmpDir"/ls_fw2_$$.txt
			if [ $? -ne 0 ]
			then
				_printerr 0229 # "Failed to list components in current workspace."
				rc=5
				rc3=5
				continue
			elif [ ! -s "$DefaultTmpDir"/ls_fw2_$$.txt ]
			then
				_printmsg 0230 "$ADL_WS" "$_L_WS_TREE" # "There is no component in workspace \"/p1\" for workspace tree \"/p2\"."
			fi
		fi	

		# Count number of components to attach in order to adapt the garbage of trace files
		_nb_to_keep=$(\cat "$DefaultTmpDir"/ls_fw2_$$.txt | wc -l)
		[ $_nb_to_keep -gt 10 ] && _nb_to_keep=$(expr $_nb_to_keep + 2)
		[ $_nb_to_keep -lt 10 ] && _nb_to_keep=10

		while read _one_component
		do
			_printmsg 0518 "$_one_component" # "Transferring component \"/p1\"...";

			# Generate information to help reporting
			echo "Command = adl_promote_is / Local tree = $_L_WS_TREE / Framework = $_one_component" > "$_ADL_WORKING_DIR/0Information.txt" || Out 5 0032 "$_ADL_WORKING_DIR/0Information.txt"

			if [ ! -z "$_L_IMAGE" ]
			then
				$_CALL_SH "$ADL_USER_PATH"/adl_site_transfer -rhost "$_R_SERVER" -rsite "$_R_SITE" -rw "$_R_WS" -rno_image -rtree "$_R_WS_TREE" -rtmp "$_R_TMP" \
					-lw "$ADL_WS" -ltree "$_L_WS_TREE" -ltmp "$DefaultTmpDir" -limage "$_L_IMAGE" -export_only -keep_trace $_nb_to_keep \
					-fw "$_one_component" $_FORCE_START_OPTION -transfer "$_T_NAME" -run_no_check -tuuid $_TUUID -short_traces -rno_attach -lno_attach 2>&1 | tee -a "$DefaultTmpDir"/r_promote_${_L_WS_TREE}_${_one_component}_$$.txt
				rc2=$?
				nbl=$(\grep '#ERR# transfer failed.' "$DefaultTmpDir"/r_promote_${_L_WS_TREE}_${_one_component}_$$.txt | wc -l)
				if [ $rc2 -ne 0 -o $nbl -ge 1 ]
				then
					\cp "$DefaultTmpDir"/r_promote_${_L_WS_TREE}_${_one_component}_$$.txt "$_ADL_WORKING_DIR"/0LastError.txt
					\chmod 777 "$_ADL_WORKING_DIR"/0LastError.txt
					_printerr 0512 "$_L_WS_TREE" "$_ADL_WORKING_DIR"/0LastError.txt # "The promotion in workspace tree \"/p1\" has failed..."
					rc=5
					rc3=5
				else
					_printmsg 0098 "$_L_WS_TREE" "$_one_component" # "Command successful"
				fi
			else
				$_CALL_SH "$ADL_USER_PATH"/adl_site_transfer -rhost "$_R_SERVER" -rsite "$_R_SITE" -rw "$_R_WS" -rno_image -rtree "$_R_WS_TREE" -rtmp "$_R_TMP" \
					-lw "$ADL_WS" -ltree "$_L_WS_TREE" -ltmp "$DefaultTmpDir" -lwd "$_L_DIR" -export_only -keep_trace $_nb_to_keep \
					-fw "$_one_component" $_FORCE_START_OPTION -transfer "$_T_NAME" -run_no_check -tuuid $_TUUID -short_traces -rno_attach -lno_attach 2>&1 |tee -a "$DefaultTmpDir"/r_promote_${_L_WS_TREE}_${_one_component}_$$.txt
				rc2=$?
				nbl=$(\grep '#ERR# transfer failed.' "$DefaultTmpDir"/r_promote_${_L_WS_TREE}_${_one_component}_$$.txt | wc -l)
				if [ $rc2 -ne 0  -o $nbl -ge 1 ]
				then
					\cp "$DefaultTmpDir"/r_promote_${_L_WS_TREE}_${_one_component}_$$.txt "$_ADL_WORKING_DIR"/0LastError.txt
					\chmod 777 "$_ADL_WORKING_DIR"/0LastError.txt
					_printerr 0512 "$_L_WS_TREE" "$_ADL_WORKING_DIR"/0LastError.txt # "The promotion in workspace tree \"/p1\" has failed..."	
					rc=5
					rc3=5
				else
					_printmsg 0098 "$_L_WS_TREE" "$_one_component" # "Command successful"
				fi
			fi
		
		done < "$DefaultTmpDir"/ls_fw2_$$.txt	
	fi

	##################################################################
	# Run the intersite promotion in a single transfer in all cases to promote also the deleted frameworks
	# The transfer is executed for each tree and at the end, the promotion is done in the mirror workspace for all trees
	# to reduce the risks of one tree is promoted and not the other.

	if [ $rc3 -eq 0 ]
	then
		# Generate information to help reporting
		echo "Command = adl_promote_is / Local tree = $_L_WS_TREE / Framework = all" > "$_ADL_WORKING_DIR/0Information.txt" || Out 5 0032 "$_ADL_WORKING_DIR/0Information.txt"

		if [ ! -z "$_L_IMAGE" ]
		then
			unset _OPTIONS
			$_CALL_SH "$ADL_USER_PATH"/adl_site_transfer -rhost "$_R_SERVER" -rsite "$_R_SITE" -rw "$_R_WS" -rno_image -rtree $_R_WS_TREE -rtmp "$_R_TMP" \
				-lw "$ADL_WS" -ltree "$_L_WS_TREE" -ltmp "$DefaultTmpDir" -limage "$_L_IMAGE" -export_only \
				$_OPTIONS $_FORCE_START_OPTION -transfer "$_T_NAME" -run_no_check -tuuid $_TUUID -short_traces -rno_attach -lno_attach 2>&1 | tee -a "$DefaultTmpDir"/r_promote_${_L_WS_TREE}_$$.txt
			rc2=$?
			nbl=$(\grep '#ERR# transfer failed.' "$DefaultTmpDir"/r_promote_${_L_WS_TREE}_$$.txt | wc -l)
			if [ $rc2 -ne 0 -o $nbl -ge 1 ]
			then
				\cp "$DefaultTmpDir"/r_promote_${_L_WS_TREE}_$$.txt "$_ADL_WORKING_DIR"/0LastError.txt
				\chmod 777 "$_ADL_WORKING_DIR"/0LastError.txt
				_printerr 0512 "$_L_WS_TREE" "$_ADL_WORKING_DIR"/0LastError.txt # "The promotion in workspace tree \"/p1\" has failed..."
				rc=5
			else
				_printmsg 0099 "$_L_WS_TREE" # "Command successful in tree /p1"
			fi
		else
			unset _OPTIONS
			$_CALL_SH "$ADL_USER_PATH"/adl_site_transfer -rhost "$_R_SERVER" -rsite "$_R_SITE" -rw "$_R_WS" -rno_image -rtree $_R_WS_TREE -rtmp "$_R_TMP" \
				-lw "$ADL_WS" -ltree "$_L_WS_TREE" -ltmp "$DefaultTmpDir" -lwd "$_L_DIR" -export_only \
				$_OPTIONS $_FORCE_START_OPTION -transfer "$_T_NAME" -run_no_check -tuuid $_TUUID -short_traces -rno_attach -lno_attach 2>&1 |tee -a "$DefaultTmpDir"/r_promote_${_L_WS_TREE}_$$.txt
			rc2=$?
			nbl=$(\grep '#ERR# transfer failed.' "$DefaultTmpDir"/r_promote_${_L_WS_TREE}_$$.txt | wc -l)
			if [ $rc2 -ne 0  -o $nbl -ge 1 ]
			then
				\cp "$DefaultTmpDir"/r_promote_${_L_WS_TREE}_$$.txt "$_ADL_WORKING_DIR"/0LastError.txt
				\chmod 777 "$_ADL_WORKING_DIR"/0LastError.txt
				_printerr 0512 "$_L_WS_TREE" "$_ADL_WORKING_DIR"/0LastError.txt # "The promotion in workspace tree \"/p1\" has failed..."	
				rc=5
			else
				_printmsg 0099 "$_L_WS_TREE" # "Command successful in tree /p1"
			fi
		fi
	fi
done < "$_WS_TREE_LIST_FILE"

if [ $rc -eq 0 ]
then
	if [ -z "$_L_ALL_WS_TREE" ]
	then
		_printmsg 0523 "$ADL_WS" # "The workspace \"/p1\" is already promoted."
	else
		# Promotion of the mirror workspace to its parent workspace for all the specified trees
		_printmsg 0522 "$ADL_WS" "$_L_ALL_WS_TREE" # "Promoting the workspace \"/p1\" in the workspace tree \"/p2\"..."
		if [ -z "$_CR_LIST" ]
		then
			_OPTIONS="-cr_transfer"
		else
			_OPTIONS="-cr $_CR_LIST"
		fi

		_OPTIONS="$_OPTIONS -tree "$_R_ALL_WS_TREE" -adm_no_check_caa_rules"
		"$_CLIENT" $_RUN_COMMON -cmd '"'$_RemoteADLUserPath/adl_promote'"' $_OPTIONS >"$DefaultTmpDir/trace_promote_remote_$$.txt" 2>&1
		rc=$?
		\cat "$DefaultTmpDir/trace_promote_remote_$$.txt"|"$_CLIENT" $_RUN_COMMON -log_input -echo 
	fi
fi

if [ $rc -eq 0 ]
then
	Out 0
else
	Out 5 # "##### THE INTERSITE COMMAND ENTIRELY OR PARTIALLY FAILED #####"
fi
