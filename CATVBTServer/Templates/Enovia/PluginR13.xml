<?xml version="1.0"?>
<Template Name="Plugin">
<Group Name="Imakefile.mk"><If Test="COMMENTS">## COPYRIGHT <V>COMPANY</V> <V>YEAR</V>
##===================================================================
##
## Imakefile for module <V>PluginModule</V>
## This module is an Enovia Plug-in
##===================================================================
## <V>MONTH</V> <V>YEAR</V>  Creation: Code generated by the CAA wizard  <V>USER</V>
##===================================================================
</If>
BUILT_OBJECT_TYPE=SHARED LIBRARY

# DO NOT EDIT :: THE CAA2 WIZARDS WILL ADD CODE HERE
WIZARD_LINK_MODULES = 
# END WIZARD EDITION ZONE

OS = COMMON

LINK_WITH = $(WIZARD_LINK_MODULES)

</Group>

<Group Name="ModuleHeader">
#ifdef  _WINDOWS_SOURCE
#ifdef  __<V>PluginModule</V>
#define ExportedBy<V>PluginModule</V>     __declspec(dllexport)
#else
#define ExportedBy<V>PluginModule</V>     __declspec(dllimport)
#endif
#else
#define ExportedBy<V>PluginModule</V>
#endif
</Group>
<Group Name="PluginList">
T_ENOVPlugin<V>PluginModule</V>= "0"; 
</Group>
<Group Name="CPPFile"><If Test="COMMENTS">// COPYRIGHT <V>COMPANY</V> <V>YEAR</V>
//===================================================================
//
// <V>PluginClass</V>.cpp
//
// Implementation of the Plugin class <V>PluginClass</V>
//
//===================================================================
//  <V>MONTH</V> <V>YEAR</V>  Creation: Code generated by the CAA wizard  <V>USER</V>
//===================================================================
</If>
#include "<V>PluginClass</V>.h"
#include "<V>PluginClass</V>Listener.h"
#include "ENOVISessionEvent.h"

<If Test="TRACES">
#include "CAT<V>PluginModule</V>Trace.h"
</If>

CATImplementClass( <V>PluginClass</V>, DataExtension, CATBaseUnknown, T_<V>PluginClass</V> );
 
<If Test="COMMENTS">
//-----------------------------------------------------------------------------
// <V>PluginClass</V> : constructor
//-----------------------------------------------------------------------------
</If>
<V>PluginClass</V>::<V>PluginClass</V>() : CATBaseUnknown()
{
<If Test="TRACES">
   CAT<V>PluginModule</V>TRACE("<V>PluginClass</V> - Constructor");
</If>
}

<If Test="COMMENTS">
//-----------------------------------------------------------------------------
// <V>PluginClass</V> : destructor
//-----------------------------------------------------------------------------
</If>
<V>PluginClass</V>::~<V>PluginClass</V>()
{
<If Test="TRACES">
   CAT<V>PluginModule</V>TRACE("<V>PluginClass</V> - Destructor");
</If>
//{{DestructorSection
//}}DestructorSection
}
 
<If Test="COMMENTS">
// Tie the implementation to its interface
// ---------------------------------------
</If>
#include "TIE_ENOVIEventPlugin.h"
TIE_ENOVIEventPlugin( <V>PluginClass</V> );

HRESULT <V>PluginClass</V>::Init(const ENOVIEventManager_var &hEventManager)
{
	HRESULT Rc;

	CATUnicodeString usEventName, usTypeName;

	_p<V>PluginClass</V>Listener = new <V>PluginClass</V>Listener();
	CATBaseUnknown_var hENOVISessionEventMonPlugListener(_p<V>PluginClass</V>Listener);
	usTypeName= "VPMSession";
	usEventName= "CreateLoginSession";
	Rc= hEventManager->Subscribe( usEventName, usTypeName, hENOVISessionEventMonPlugListener,
						IID_ENOVISessionEvent, &_<V>PluginClass</V>ListeneronAfterCreateLoginSession, ENOVIEvent::EventFireAfter );       
	if(FAILED(Rc)) return Rc;

	return S_OK;
}

</Group>
<Group Name="CPPFileListener"><If Test="COMMENTS">// COPYRIGHT <V>COMPANY</V> <V>YEAR</V>
//===================================================================
//
// <V>PluginClass</V>Listener.cpp
//
//
//===================================================================
//  <V>MONTH</V> <V>YEAR</V>  Creation: Code generated by the CAA wizard  <V>USER</V>
//===================================================================
</If>
#include "VPMSession.h"
#include "CATIVpmLoginSession.h"
#include "ENOVIEventManager.h"
#include "<V>PluginClass</V>Listener.h"
<If Test="TRACES">
#include "CAT<V>PluginModule</V>Trace.h"
</If>
//{{IncludeSection
//}}IncludeSection
CATImplementClass( <V>PluginClass</V>Listener, Implementation, ENOVPackageListener, CATNull);
 
<If Test="COMMENTS">
//-----------------------------------------------------------------------------
// <V>PluginClass</V>Listener : constructor
//-----------------------------------------------------------------------------
</If>
<V>PluginClass</V>Listener::<V>PluginClass</V>Listener()
{
<If Test="TRACES">
   CAT<V>PluginModule</V>TRACE("<V>PluginClass</V>Listener - Constructor");
</If>
}

<If Test="COMMENTS">
//-----------------------------------------------------------------------------
// <V>PluginClass</V> : destructor
//-----------------------------------------------------------------------------
</If>
<V>PluginClass</V>Listener::~<V>PluginClass</V>Listener()
{
<If Test="TRACES">
   CAT<V>PluginModule</V>TRACE("<V>PluginClass</V>Listener - Destructor");
</If>
//{{DestructorSection
//}}DestructorSection
}
 
<If Test="COMMENTS">
// Tie the implementation to its interface
// ---------------------------------------
</If>
#include "TIE_ENOVISessionEvent.h"
TIE_ENOVISessionEvent( <V>PluginClass</V>Listener );

HRESULT <V>PluginClass</V>Listener::onAfterCreateLoginSession(const ENOVIEvent_var &iEvent,HRESULT & oNotify)
{
	HRESULT Rc;
	// Get the  session
	VPMSession *session= VPMSession::OpenSession();

	// Get the event manager
	CATIVpmLoginSession_var hLoginSession;
	Rc= session->GetLoginSession( hLoginSession );
	if( Rc==E_FAIL )
	{
<If Test="TRACES">		CAT<V>PluginModule</V>TRACE("Failed to get ENOVIEventManager");
</If>		return E_FAIL;
	}
	ENOVIEventManager_var hEventManager;
	Rc= hLoginSession->get_ENOVEventManager( hEventManager );
	if( Rc==E_FAIL )
	{
<If Test="TRACES">		CAT<V>PluginModule</V>TRACE("Failed to get ENOVIEventManager");
</If>		return E_FAIL;
	}

	CATUnicodeString usEventName, usTypeName;
//{{RegisterSection
//}}RegisterSection
	return S_OK;
}

</Group>

<Group Name="IncludeSection">#include "<V>SubscriberClass</V>.h"
#include "<V>EventInterface</V>.h"
</Group>

<Group Name="RegisterSection"><If Test="COMMENTS">	//
	// Create instance of object <V>SubscriberClass</V>
	// and register it on type   <V>PublisherClass</V>
	//
</If>
	<V>SubscriberInstance</V>= new <V>SubscriberClass</V>();
	CATBaseUnknown_var h<V>EventInterface</V><V>SubscriberClass</V>(<V>SubscriberInstance</V>);
	usTypeName= "<V>PublisherClass</V>";
</Group>

<Group Name="AddRegisterSection">
	<V>EventInterface</V>_var h<V>EventInterface</V><V>SubscriberClass</V>(<V>SubscriberInstance</V>);
	usTypeName= "<V>PublisherClass</V>";
</Group>

<Group Name="EventSection">	usEventName= "<V>EventName</V>";
	Rc= hEventManager->Subscribe( usEventName, usTypeName, h<V>EventInterface</V><V>SubscriberClass</V>,
						IID_<V>EventInterface</V>, &<V>CookieInstance</V>, <V>EventMode</V> );       
	if(FAILED(Rc)) return Rc;

</Group>

<Group Name="HFile"><If Test="COMMENTS">// COPYRIGHT <V>COMPANY</V> <V>YEAR</V>
//===================================================================
//
// <V>PluginClass</V>.h
//
// Declaration of the Plugin class <V>PluginClass</V>
//
//===================================================================
// <V>MONTH</V> <V>YEAR</V>  Creation: Code generated by the CAA wizard  <V>USER</V>
//===================================================================
</If>
#ifndef <V>PluginClass</V>_H
#define <V>PluginClass</V>_H

#include "<V>PluginModule</V>.h"
#include "CATBaseUnknown.h"
#include "ENOVIEventManager.h"

//-----------------------------------------------------------------------

<If Test="COMMENTS">
/**
 * Class <V>PluginClass</V>.
 * 
 * Using this prefered syntax will enable mkdoc to document your class.
 */
</If>
class ExportedBy<V>PluginModule</V> <V>PluginClass</V>: public CATBaseUnknown
{
	CATDeclareClass;

public:
<If Test="COMMENTS">
	// Standard constructors and destructors for an implementation class
	// -----------------------------------------------------------------
</If>
	<V>PluginClass</V> ();
	virtual ~<V>PluginClass</V> ();

	virtual HRESULT Init( const ENOVIEventManager_var &hEventManager );
 
private:
<If Test="COMMENTS">
	// The copy constructor and the equal operator must not be implemented
	// -------------------------------------------------------------------
</If>
	<V>PluginClass</V> (<V>PluginClass</V> &);
	<V>PluginClass</V>& operator=(<V>PluginClass</V>&);
<If Test="COMMENTS">
	// Members to store event subscriber instances and cookies
	// -------------------------------------------------------
</If>
	CATBaseUnknown * _p<V>PluginClass</V>Listener;
	unsigned long _<V>PluginClass</V>ListeneronAfterCreateLoginSession;

};

//-----------------------------------------------------------------------

#endif
</Group>

<Group Name="HFileListener"><If Test="COMMENTS">// COPYRIGHT <V>COMPANY</V> <V>YEAR</V>
//===================================================================
//
// <V>PluginClass</V>Listener.h
//
// Declaration of the Plugin class <V>PluginClass</V>Listener
//
//===================================================================
// <V>MONTH</V> <V>YEAR</V>  Creation: Code generated by the CAA wizard  <V>USER</V>
//===================================================================
</If>
#ifndef <V>PluginClass</V>Listener_H
#define <V>PluginClass</V>Listener_H

#include "<V>PluginModule</V>.h"
#include "ENOVPackageListener.h"

//-----------------------------------------------------------------------

<If Test="COMMENTS">
/**
 * Class <V>PluginClass</V>Listener.
 * 
 * Using this prefered syntax will enable mkdoc to document your class.
 */
</If>
class ExportedBy<V>PluginModule</V> <V>PluginClass</V>Listener: public ENOVPackageListener
{
	CATDeclareClass;

public:
<If Test="COMMENTS">
	// Standard constructors and destructors for an implementation class
	// -----------------------------------------------------------------
</If>
	<V>PluginClass</V>Listener ();
	virtual ~<V>PluginClass</V>Listener ();

	HRESULT onAfterCreateLoginSession(const ENOVIEvent_var & iEvent,HRESULT & oNotify);
 
private:
<If Test="COMMENTS">
	// The copy constructor and the equal operator must not be implemented
	// -------------------------------------------------------------------
</If>
	<V>PluginClass</V>Listener (<V>PluginClass</V>Listener &);
	<V>PluginClass</V>Listener& operator=(<V>PluginClass</V>Listener&);
<If Test="COMMENTS">
	// Members to store event subscriber instances and cookies
	// -------------------------------------------------------
</If>
	//{{Events
	//}}Events
};

//-----------------------------------------------------------------------

#endif
</Group>

<Group Name="DestructorPlugin">
if (NULL != <V>SubscriberInstance</V>)
{
	<V>SubscriberInstance</V>->Release();
	<V>SubscriberInstance</V> = NULL;
}
</Group>
<Group Name="EventCookies">	unsigned long <V>CookieInstance</V>;
</Group>
<Group Name="EventListener">	CATBaseUnknown *<V>SubscriberInstance</V>;
</Group>

<Group Name="PluginDico">T_<V>PluginClass</V> ENOVIEventPlugin lib<V>PluginModule</V>
<V>PluginClass</V>Listener ENOVISessionEvent lib<V>PluginModule</V>
</Group>
<Group Name="ListenerDico"><V>SubscriberClass</V> <V>EventInterface</V> lib<V>Module</V>
</Group>

<Script Name="NewPlugin">
	<CreateDirectory>
		<Path><V>Workspace</V>\<V>PluginFramework</V>\ProtectedInterfaces</Path>
		<CreateFile>
			<Path><V>PluginModule</V>.h</Path>
			<GenerateText Group="ModuleHeader"/>
		</CreateFile>
	</CreateDirectory>
	<CreateDirectory>
		<Path><V>Workspace</V>\<V>PluginFramework</V>\<V>PluginModule</V>.m</Path>
		<CreateFile>
			<Path>Imakefile.mk</Path>
			<GenerateText Group="Imakefile.mk"/>
		</CreateFile>
		<CreateDirectory>
			<Path>src</Path>
			<CreateFile>
				<Path>ENOVPlugin<V>PluginModule</V>.cpp</Path>
				<GenerateText Group="CPPFile"/>
			</CreateFile>
			<CreateFile>
				<Path>ENOVPlugin<V>PluginModule</V>Listener.cpp</Path>
				<GenerateText Group="CPPFileListener"/>
			</CreateFile>

		</CreateDirectory>
		<CreateDirectory>
			<Path>LocalInterfaces</Path>
			<CreateFile>
				<Path>ENOVPlugin<V>PluginModule</V>.h</Path>
				<GenerateText Group="HFile"/>
			</CreateFile>
			<CreateFile>
				<Path>ENOVPlugin<V>PluginModule</V>Listener.h</Path>
				<GenerateText Group="HFileListener"/>
			</CreateFile>

		</CreateDirectory>
	</CreateDirectory>
	<CreateDirectory>
		<Path><V>Workspace</V>\<V>PluginFramework</V>\CNext\code\dictionary</Path>
            <If Test="CustomerMode">
			<EditFile>
				<Path><V>PluginFramework</V>.dico</Path>
				<AddText>
					<GenerateText Group="PluginDico"/>
				</AddText>
			</EditFile>
		</If>
            <If Test="NoCustomerMode">
			<EditFile>
				<Path><V>PluginFramework</V>.dic</Path>
				<AddText>
					<GenerateText Group="PluginDico"/>
				</AddText>
			</EditFile>
		</If>
	</CreateDirectory>
	<CreateDirectory>
		<Path><V>Workspace</V>\<V>PluginFramework</V>\CNext\resources\msgcatalog</Path>
		<CreateFile>
			<Path>PluginList.CATRsc</Path>
			<GenerateText Group="PluginList"/>
		</CreateFile>
	</CreateDirectory>
</Script>
<Script Name="NewListener">
	<EditFile>
		<Path><V>Workspace</V>\<V>PluginFramework</V>\<V>PluginModule</V>.m\LocalInterfaces\ENOVPlugin<V>PluginModule</V>Listener.h</Path>
		<EditSection><Begin>//{{Events</Begin><End>//}}Events</End>
			<AddText>
				<GenerateText Group="EventListener"/>
			</AddText>
			<Loop Enumeration="Methods">
				<If Test="EventMode">
					<AddText>
						<GenerateText Group="EventCookies"/>
					</AddText>
				</If>
			</Loop>
		</EditSection>
	</EditFile>
	<EditFile>
		<Path><V>Workspace</V>\<V>PluginFramework</V>\<V>PluginModule</V>.m\src\ENOVPlugin<V>PluginModule</V>Listener.cpp</Path>
		<EditSection><Begin>//{{DestructorSection</Begin><End>//}}DestructorSection</End>
			<AddText>
				<GenerateText Group="DestructorPlugin"/>
			</AddText>
		</EditSection>
	</EditFile>
	<EditFile>
		<Path><V>Workspace</V>\<V>PluginFramework</V>\<V>PluginModule</V>.m\src\ENOVPlugin<V>PluginModule</V>Listener.cpp</Path>
		<EditSection><Begin>//{{RegisterSection</Begin><End>//}}RegisterSection</End>
			<AddText>
				<GenerateText Group="RegisterSection"/>
				<Loop Enumeration="Methods">
					<If Test="EventMode">
						<AddText>
							<GenerateText Group="EventSection"/>
						</AddText>
					</If>
				</Loop>
			</AddText>
		</EditSection>
		<EditSection><Begin>//{{IncludeSection</Begin><End>//}}IncludeSection</End>
			<AddText>
				<GenerateText Group="IncludeSection"/>
			</AddText>
		</EditSection>
	</EditFile>



	<CreateFile>
		<Path><V>Workspace</V>\<V>Framework</V>\<V>Module</V>.m\src\<V>ImplementationClass</V>.cpp</Path>
		<GenerateText Group="CNext\Implementation.xml\CPPFile"/>
		<EditSection><Begin>//{{TIE</Begin><End>//}}TIE</End>
			<AddText>
				<GenerateText Group="CNext\Implementation.xml\TIE"/>
			</AddText>
		</EditSection>
		<Loop Enumeration="Methods">
			<AddText>
				<GenerateText Group="CNext\Implementation.xml\CPPMethod"/>
			</AddText>
		</Loop>
	</CreateFile>

	<CreateFile>
		<Path><V>Workspace</V>\<V>Framework</V>\<V>Module</V>.m\LocalInterfaces\<V>ImplementationClass</V>.h</Path>
		<GenerateText Group="CNext\Implementation.xml\HFile"/>
		<EditSection><Begin>//{{Methods</Begin><End>//}}Methods</End>
			<Loop Enumeration="Methods">
				<AddText>
					<GenerateText Group="CNext\Implementation.xml\HMethod"/>
				</AddText>
			</Loop>
		</EditSection>
		<EditSection><Begin>//{{ITF</Begin><End>//}}ITF</End>
			<AddText>
				<GenerateText Group="CNext\Implementation.xml\ITFComment"/>
			</AddText>
		</EditSection>
		<EditSection><Begin>//{{IncludeSection</Begin><End>//}}IncludeSection</End>
			<AddText>
				<GenerateText Group="CNext\Implementation.xml\IncludeSection"/>
			</AddText>
		</EditSection>
	</CreateFile>

	<CreateDirectory>
		<Path><V>Workspace</V>\<V>Framework</V>\CNext\code\dictionary</Path>
		<If Test="CustomerMode">
			<EditFile>
				<Path><V>Framework</V>.dico</Path>
				<AddText>
					<GenerateText Group="ListenerDico"/>
				</AddText>
			</EditFile>
		</If>
		<If Test="NoCustomerMode">
			<EditFile>
				<Path><V>Framework</V>.dic</Path>
				<AddText>
					<GenerateText Group="ListenerDico"/>
				</AddText>
			</EditFile>
		</If>
		</EditFile>
	</CreateDirectory>
</Script>
<Script Name="AddListener">
	<EditFile>
		<Path><V>Workspace</V>\<V>PluginFramework</V>\<V>PluginModule</V>.m\LocalInterfaces\ENOVPlugin<V>PluginModule</V>Listener.h</Path>
		<EditSection><Begin>//{{Events</Begin><End>//}}Events</End>
			<Loop Enumeration="Methods">
				<If Test="EventMode">
					<AddText>
						<GenerateText Group="EventCookies"/>
					</AddText>
				</If>
			</Loop>
		</EditSection>
	</EditFile>
	<EditFile>
		<Path><V>Workspace</V>\<V>PluginFramework</V>\<V>PluginModule</V>.m\src\ENOVPlugin<V>PluginModule</V>Listener.cpp</Path>
		<EditSection><Begin>//{{DestructorSection</Begin><End>//}}DestructorSection</End>
			<AddText>
				<GenerateText Group="DestructorPlugin"/>
			</AddText>
		</EditSection>
	</EditFile>

	<EditFile>
		<Path><V>Workspace</V>\<V>PluginFramework</V>\<V>PluginModule</V>.m\src\ENOVPlugin<V>PluginModule</V>Listener.cpp</Path>
		<EditSection><Begin>//{{RegisterSection</Begin><End>//}}RegisterSection</End>
			<AddText>
				<GenerateText Group="AddRegisterSection"/>
				<Loop Enumeration="Methods">
					<If Test="EventMode">
						<AddText>
							<GenerateText Group="EventSection"/>
						</AddText>
					</If>
				</Loop>
			</AddText>
		</EditSection>
		<EditSection><Begin>//{{IncludeSection</Begin><End>//}}IncludeSection</End>
			<AddText>
				<GenerateText Group="IncludeSection"/>
			</AddText>
		</EditSection>
	</EditFile>
	<EditFile>
		<Path><V>Workspace</V>\<V>Framework</V>\<V>Module</V>.m\LocalInterfaces\<V>ImplementationClass</V>.h</Path>
		<EditSection><Begin>//{{REPORT</Begin><End>//REPORT}}</End>
			<AddText>
				<GenerateText Group="CNext\Implementation.xml\AddTIE"/>
			</AddText>
		</EditSection>
		<EditSection><Begin>//{{Methods</Begin><End>//}}Methods</End>
			<Loop Enumeration="Methods">
				<AddText>
					<GenerateText Group="CNext\Implementation.xml\HMethod"/>
				</AddText>
			</Loop>
		</EditSection>
		<EditSection><Begin>//{{IncludeSection</Begin><End>//}}IncludeSection</End>
			<AddText>
				<GenerateText Group="CNext\Implementation.xml\IncludeSection"/>
			</AddText>
		</EditSection>
	</EditFile>
	<EditFile>
		<Path><V>Workspace</V>\<V>Framework</V>\<V>Module</V>.m\src\<V>ImplementationClass</V>.cpp</Path>
		<EditSection><Begin>//{{TIE</Begin><End>//}}TIE</End>
			<AddText>
				<GenerateText Group="CNext\Implementation.xml\TIE"/>
			</AddText>
		</EditSection>
		<Loop Enumeration="Methods">
			<AddText>
				<GenerateText Group="CNext\Implementation.xml\CPPMethod"/>
			</AddText>
		</Loop>

	</EditFile>

	<If Test="CustomerMode">
		<EditFile>
			<Path><V>Workspace</V>\<V>Framework</V>\CNext\code\dictionary\<V>Framework</V>.dico</Path>
			<AddText>
				<GenerateText Group="ListenerDico"/>
			</AddText>
		</EditFile>
	</If>
	<If Test="NoCustomerMode">
		<EditFile>
			<Path><V>Workspace</V>\<V>Framework</V>\CNext\code\dictionary\<V>Framework</V>.dic</Path>
			<AddText>
				<GenerateText Group="ListenerDico"/>
			</AddText>
		</EditFile>
	</If>

</Script>

</Template>
