<?xml version="1.0"?>
<Template Name="Implementation">

<Group Name="CPPFile"><If Test="COMMENTS">// COPYRIGHT <V>COMPANY</V> <V>YEAR</V>
//===================================================================
//
//  <V>ImplementationClass</V>.cpp
//  Provide implementation to interface :
//{{ITF
//}}ITF
//===================================================================
//
// Usage notes:
//
//===================================================================
//  <V>MONTH</V> <V>YEAR</V>  Creation: Code generated by the CAA wizard  <V>USER</V>
//===================================================================
</If>
#include "<V>ImplementationClass</V>.h"
<If Test="TRACES">
#include "CAT<V>Module</V>Trace.h"
</If>
 
CATImplementClass( <V>ImplementationClass</V>,
                   <V>ImplementationType</V>,
                   <V>CNextBaseClass</V>,
                   <V>ImplementationSource</V> );
 
<If Test="COMMENTS">
//-----------------------------------------------------------------------------
// <V>ImplementationClass</V> : constructor
//-----------------------------------------------------------------------------
</If>
<V>ImplementationClass</V>::<V>ImplementationClass</V>():
    <V>BaseClass</V>()
{
<If Test="TRACES">
   CAT<V>Module</V>TRACE("<V>ImplementationClass</V> - Constructor");
</If>
}

<If Test="COMMENTS">
//-----------------------------------------------------------------------------
// <V>ImplementationClass</V> : destructor
//-----------------------------------------------------------------------------
</If>
<V>ImplementationClass</V>::~<V>ImplementationClass</V>()
{
<If Test="TRACES">
   CAT<V>Module</V>TRACE("<V>ImplementationClass</V> - Destructor");
</If>
}
 
<If Test="COMMENTS">
// Tie the implementation to its interface
// ---------------------------------------
</If>
//{{TIE
//}}TIE
</Group>

<Group Name="CPPMethod">
<If Test="COMMENTS">
//-----------------------------------------------------------------------------
// Implements <V>InterfaceClass</V>::<V>MethodName</V>
//-----------------------------------------------------------------------------
</If>
<V>MethodReturn</V> <V>ImplementationClass</V>::<V>MethodName</V><V>MethodSignature</V>
{
<If Test="TRACES">   CAT<V>Module</V>TRACE("Entering <V>ImplementationClass</V>::<V>MethodName</V><V>MethodSignature</V>");
</If>
<If Test="TRACES">   CAT<V>Module</V>TRACE("Exiting <V>ImplementationClass</V>::<V>MethodName</V><V>MethodSignature</V>");
</If><If Test="MethodReturn_VALUE">   <V>MethodReturn_VALUE</V>
</If>}

</Group>

<Group Name="TIE">
#include "TIE_<V>InterfaceClass</V>.h"
TIE_<V>InterfaceClass</V>( <V>ImplementationClass</V> );
</Group>

<Group Name="ITFComment">//   <V>InterfaceClass</V>
</Group>

<Group Name="HFile"><If Test="COMMENTS">// COPYRIGHT <V>COMPANY</V> <V>YEAR</V>
//===================================================================
//
// <V>ImplementationClass</V>.h
// Provide implementation to interface
//{{ITF
//}}ITF
//
//===================================================================
//
// Usage notes:
//
//===================================================================
//CAA2 Wizard Generation Report
//{{REPORT
// ENOVIATYPE: <V>PublisherClass</V>
// IMPLEMENTATION
// TIE: <V>InterfaceClass</V>
//REPORT}}
//End CAA2 Wizard Generation Report
//
//  <V>MONTH</V> <V>YEAR</V>  Creation: Code generated by the CAA wizard  <V>USER</V>
//===================================================================
</If>
#ifndef <V>ImplementationClass</V>_H
#define <V>ImplementationClass</V>_H

#include "<V>Module</V>.h"
#include "<V>BaseClass</V>.h"
//{{IncludeSection
//}}IncludeSection
//-----------------------------------------------------------------------

<If Test="COMMENTS">
/**
 * Class <V>IMPLEMENTATION_COMMENT</V>.
 * 
 * Using this prefered syntax will enable mkdoc to document your class.
 */
</If>
class ExportedBy<V>Module</V> <V>ImplementationClass</V>: public <V>BaseClass</V>
{
  CATDeclareClass;

  public:

<If Test="COMMENTS">
  // Standard constructors and destructors for an implementation class
  // -----------------------------------------------------------------
</If>
     <V>ImplementationClass</V> ();
     virtual ~<V>ImplementationClass</V> ();

	//{{Methods
	//}}Methods

  private:
<If Test="COMMENTS">
  // The copy constructor and the equal operator must not be implemented
  // -------------------------------------------------------------------
</If>
  <V>ImplementationClass</V> (<V>ImplementationClass</V> &);
  <V>ImplementationClass</V>& operator=(<V>ImplementationClass</V>&);

};

//-----------------------------------------------------------------------

#endif
</Group>
<Group Name="IncludeSection">#include "<V>InterfaceClass</V>.h"
</Group>
<Group Name="HMethod">
    /**
     * Implements a function from an interface.
     * @see <V>METHOD_FRAMEWORK</V>.<V>METHOD_INTERFACE</V>#<V>MethodName</V>
     */
     <V>MethodReturn</V> <V>MethodName</V><V>MethodSignature</V>;

</Group>
<Group Name="AddTIE">// TIE: <V>InterfaceClass</V>
</Group>
</Template>
