#set -x
export MK_DEVNULL=NUL
export MK_TEMPDIR=c:\\temp
if [ "$MkmkOS_NAME" = "" ]; then
	export MkmkOS_NAME=$MKMKOS_NAME
fi
if [ "$MkmkOS_VAR" = "" ]; then
	export MkmkOS_VAR=$MKMKOS_VAR
fi
if [ "$MkmkROOT_PATH" = "" ]; then
	export MkmkROOT_PATH=$MKMKROOT_PATH
fi
trap 'out 2' 2
umask 0

# Fonctions

FindResource()
{
  IFS=":"
  [ "$MkmkOS_NAME" = "Windows_NT" ] && IFS=";"
  SEP="/"
  [ "$MkmkOS_NAME" = "Windows_NT" ] && SEP="\\"
	
  for d in $MkmkROOT_PATH
  do
    [ -f $d${SEP}resources${SEP}TestAuto${SEP}$1 ] && break
    [ -d $d${SEP}resources${SEP}TestAuto${SEP}$1 ] && break
  done
  unset IFS
  [ -f $d${SEP}resources${SEP}TestAuto${SEP}$1 ] && printf "%s\n" "$d${SEP}resources${SEP}TestAuto${SEP}$1"
  [ -d $d${SEP}resources${SEP}TestAuto${SEP}$1 ] && printf "%s\n" "$d${SEP}resources${SEP}TestAuto${SEP}$1"
}

out()
{
  if [ $flag_k -eq 0 ];then
     $RM -fr $MK_TEMPDIR/*_$$
  fi
  exit $1
}

Trace()
{
	printf "## %s\n" "$*"
}
TraceErr()
{
	printf "## ! ERROR : %s\n" "$*"
}
TraceWarn()
{
	printf "## WARNING : %s\n" "$*"
}
TraceSep()
{
	echo "## ----------------------------------------------------------"
}

# Variable diverses

if [ "$MkmkOS_NAME" = "Windows_NT" ]; then
	IFS=":"
	[ "$MkmkOS_NAME" = "Windows_NT" ] && IFS=";"
	for d in $MkmkROOT_PATH
	do
		MkmkPATH="${MkmkPATH};${d}\\code\\command"
	done
	unset IFS
fi
typeset -lL1 OS_PREM_MIN
export OS=$MkmkOS_VAR
export OS_NAME=$MkmkOS_NAME
export OS_PREM_MIN=$OS
export RM=$(whence rm)
export MK_DEVNULL=${MK_DEVNULL:-"/dev/null"}
export MK_SEPARATOR=${MK_SEPARATOR:-":"}
export MK_TEMPDIR=${MK_TEMPDIR:-"/tmp"}
export ADL_ODT_NULL=$MK_DEVNULL
export ADL_ODT_TMP=$MK_TEMPDIR/ADL_ODT_$$
export ADL_ODT_PARAM=$ADL_ODT_TMP/ParamOdt_$$
export PURIFYOPTIONSINIT="$PURIFYOPTIONS"
export PUREOPTIONSINIT="$PUREOPTIONS"
whence_subodt=$(whence subodt98)
whence_mkrun=$(whence mkrun)
whence_mkrun=$whence_mkrun" -e $OS_$$ $MKODT_MKRUN_OPTS"
whence_killodt=$(whence killodt)
export ODT_UCC=$( whence ucc )
export whence_ro=$( whence ro )
export whence_ro=${whence_ro:-/u/users/tacr/bin/ro}
if [ "$MKODT_SUPENV" = "" ]; then
  export MKODT_SUPENV=$(whence mkodt_supenv_${ADL_FR_CATIA}.sh)
fi

export AuthorizedMandatory="$(FindResource AuthorizedParam)"

SHELL_X="TestCases"
ODT_LIST=""

# Flags pour options

typeset -i flag_W=0
typeset -i flag_d=0
typeset -i flag_D=0
typeset -i flag_F=0
typeset -i flag_s=0
typeset -i flag_l=0
typeset -i flag_L=0
typeset -i flag_a=0
typeset -i flag_S=0
typeset -i flag_k=0
typeset -i flag_t=0
typeset -i flag_h=0
typeset -i flag_X=0
typeset -i flag_c=0
typeset -i flag_I=0
typeset -i flag_C=0
typeset -i flag_p=1
typeset -i flag_b=0
typeset -i flag_q=0
typeset -i flag_i=0
typeset -i flag_xx
export flag_c
export flag_b
export flag_k
export flag_I
export flag_D
export flag_p

# Mode debugger

debuggerMode="none"

case "$MkmkOS_NAME" in
AIX)       debuggerMode="xldb" ;;
SunOS)     debuggerMode="debugger" ;;
IRIX)      debuggerMode="cvd" ;;
HP-UX)     debuggerMode="dde" ;;
Window_NT) debuggerMode="msdev" ;;
esac

# ======================================================== 
# Env special pour ODT
# ======================================================== 

#export ENV='\\koala\odttools\bin.win\mkodt_env'
export ENV="$( FindResource mkodt_env )"
export ENV_mkodt="$ENV"
if [ ! -f "$ENV" ]; then
  TraceErr "Unable to find mkodt_env"
  exit 1
fi
# ======================================================== 
# Help on-line et informations
# ======================================================== 

Help="$( FindResource mkodt_help)"
if [ "$1" = "" ]; then
  cat $Help
  out 0 
fi 

Info="$( FindResource mkodt_info)"

OPTIME=""

printf "%s\n" "$*" | grep -- "-q" > $MK_DEVNULL 2>&1
if [ "$?" != "0" ]; then
 cat $Info
fi

# ======================================================== 
# Lecture des options
# ======================================================== 
mkdir -p $ADL_ODT_TMP

set -- `getopt qrfXIW:F:SaikCDcs:htl:d:b:B:o:L: $*` 

WSROOT=""
WSROOTOutput=""
SHELL_X="TestCases"
ODT_LIST=""
export ODT_LIST_FILE="$MK_TEMPDIR/ODT_LIST_$$"
> $ODT_LIST_FILE
SHELL_X="TestCases SwitchTestCases"

while [ "$1" != "--" ]
do
  if [ "$1" = "-W" ];then
    WSROOT=$HOME/$2
    flag_W=1
    shift
  elif [ "$1" = "-d" ];then
    flag_d=1
    WSROOT=$2
    shift
  elif [ "$1" = "-i" ];then
    flag_i=1
  elif [ "$1" = "-o" ];then
    WSROOTOutput=$2
    shift 
  elif [ "$1" = "-D" ];then
    flag_D=1
    flag_p=0 
  elif [ "$1" = "-q" ];then
    flag_q=1
  elif [ "$1" = "-F" ];then
    PRODUCT=$2
    flag_F=1
    shift 
  elif [ "$1" = "-h" ];then
    cat $Help
    flag_h=1
    out 0 
  elif [ "$1" = "-t" ];then
    OPTIME=OK
    flag_t=1
    Trace "Time option selected" 
  elif [ "$1" = "-s" ];then
    flag_s=1
    nomshell=${2%.sh}
    ODT_LIST="$nomshell"
    if [ "$SHELL_X" = "TestCases SwitchTestCases" ]; then
       SHELL_X="TestCases"
    fi
    shift
  elif [ "$1" = "-l" ];then
    ODT_LIST="$(cat $2)"
    flag_l=1
    Trace "Option list selected with file $2"
    shift
  elif [ "$1" = "-L" ];then
    cat $2 > $ODT_LIST_FILE
    flag_L=1
    Trace "Option extended list selected with file $2"
    shift
  elif [ "$1" = "-a" ];then
    flag_a=1
    Trace "Automatic mode selected" 
  elif [ "$1" = "-k" ];then
    flag_k=1
    flag_p=0
    Trace "Keep mode selected" 
  elif [ "$1" = "-S" ];then
    flag_S=1
    SHELL_X="SwitchTestCases" 
    Trace "Mode Switch selected"
  elif [ "$1" = "-X" ];then
    flag_X=1
    export ODT_DISPLAY="Yes"
  elif [ "$1" = "-I" ];then
    flag_I=1
    Trace "mode Debug "
  elif [ "$1" = "-c" ];then
    flag_c=1
    flag_p=0
    Trace "mode COUVERTURE "
  elif [ "$1" = "-C" ];then
    flag_C=1
    flag_p=0
    Trace "mode Record         : Capture  "
    if [ "$mkodt_Capture" = "" -a "$MkmkOS_NAME" = "Windows_NT" ];then
      Trace "RECORD: Pas de capture Record sur Windows NT provisoirement"
      Trace "RECORD: Faire la capture sur Unix"
      Trace "-C option unavailable"
      return 1
    fi
  elif [ "$1" = "-b" ];then
    flag_b=1
    flag_p=0
    Trace "mode debug          : $2"
    export debuggerLoad="$2"
    export debuggerMode
    if [ ! -f "$( FindResource mkodt_debug_${MkmkOS_NAME}_${debuggerMode}.sh )" ];then
      TraceWarn "No debugger available on $MkmkOS_NAME, doing normal run"
      flag_b=0
    else
      export debuggerStub="$( FindResource mkodt_debug_${MkmkOS_NAME}_${debuggerMode}.sh | sed 's:\\:/:g')"
    fi
    shift
  elif [ "$1" = "-B" ];then
    Trace "debugger            : $2"
    debuggerMode="$2"
    if [ ! -f "$( FindResource mkodt_debug_${MkmkOS_NAME}_${debuggerMode}.sh )" ];then
      TraceWarn "No debugger $debuggerMode on $MkmkOS_NAME, doing normal run"
      flag_b=0
    else
      export debuggerStub="$( FindResource mkodt_debug_${MkmkOS_NAME}_${debuggerMode}.sh | sed 's:\\:/:g')"
    fi
    shift
  elif [ "$1" != "-f" ];then
    TraceErr "Unknown option $1"
    Trace "use mkodt -h to view available options"
    out 2
  fi

  shift
done

# Interpretation des options
# --------------------------

if [ "$ODT_PERTINENCE" != "" ]; then
  flag_p=0
fi

# Mode contextuel, analyse du repertoire courant
if [ "$WSROOT" = "" ]
then

   pwdcourant="$(pwd)"
   base="$(basename $pwdcourant)"
   dir="$(dirname $pwdcourant)"

   if [ "$base" = "SwitchTestCases" -a "$(basename $dir)" = "FunctionTests" ]; then
      flag_S=1
      flag_F=1
      SHELL_X="SwitchTestCases"
      Trace "Mode Switch selected"
      PRODUCT="$(dirname $dir)"
      WSROOT="$(dirname $PRODUCT)"
      PRODUCT="$(basename $PRODUCT)"
   elif [ "$base" = "TestCases" -a "$(basename $dir)" = "FunctionTests" ]; then
      flag_S=0
      flag_F=1
      SHELL_X="TestCases"
      PRODUCT="$(dirname $dir)"
      WSROOT="$(dirname $PRODUCT)"
      PRODUCT="$(basename $PRODUCT)"
   elif [ "$base" = "FunctionTests" ]; then
      flag_F=1
      SHELL_X="TestCases SwitchTestCases"
      PRODUCT="$(basename $dir)"
      WSROOT="$(dirname $dir)"
   elif [ -f "$pwdcourant/IdentityCard/IdentityCard.h" ]; then
      flag_F=1
      if [ "$PRODUCT" = "" ]; then
        PRODUCT="$base"
      fi
      WSROOT="$dir"
   else
      ls -d $pwdcourant/$MkmkOS_VAR/CNext.* > $MK_DEVNULL 2>&1
      if [ "$?" = "0" ]; then
        WSROOT="$pwdcourant"
      else
        TraceErr "Unable to find workspace from current directory"
        out 2
      fi
   fi
fi

export ADL_BLD_LEVEL 
export WSROOT
export STEPLIB=""

if [ "$flag_a" = "1" ]; then
  if [ "$flag_L" = "1" ];then
    TraceErr "Incompatible options -a and -L"
    out 2
  fi
  if [ "$flag_l" = "1" ];then
    TraceErr "Incompatible options -a and -l"
    out 2
  fi
  if [ "$flag_s" = "1" ];then
    TraceErr "Incompatible options -a and -s"
    out 2
  fi
fi
if [ "$flag_L" = "1" ];then
  if [ "$flag_F" = "1" ];then
    TraceErr "Incompatible options -F and -L"
    out 2
  fi
fi

if [ ! -d "$WSROOT" ]; then
   TraceErr "Workspace directory [$WSROOT] not found"
   out 2
fi

#for f in $PRODUCT
#do
#   if [ ! -d "$WSROOT/$f" ]; then
#      TraceErr "Framework directory [$WSROOT/$f] not found"     
#      out 2
#   fi
#done

# ======================================================== 
# Preparation de l'execution
# ======================================================== 

# Lecture de la concatenation
if [ "$ADL_ODT_CONCATENATION" = "" ]; then
#  cd $WSROOT Modif pour WhichDir (mbi 5/11/98)
  ADL_ODT_CONCATENATION="$(mkGetPreq -W $WSROOT)"
  export ADL_ODT_CONCATENATION
fi

TraceSep
Trace "Worspace  Directory : $WSROOT"
for w in $ADL_ODT_CONCATENATION
do
  Trace "Concatenation       : $w"
done
Trace "OS                  : $MkmkOS_VAR "
Trace "Machine             : $(uname -n)"
Trace "Display             : $DISPLAY"

# Determination de la liste des ODT (et frameworks)
# -------------------------------------------------

typeset -i count=0
typeset -i nbODT=0
typeset -i nbFW=0

if [ "$PRODUCT" = "" -a "$flag_a" = "1" ]; then
  for f in $(ls $WSROOT)
  do
     if [ "${f%.tst}" != "$f" ]; then
        if [ -d "$WSROOT/$f/FunctionTests" ]; then
           PRODUCT="$PRODUCT $f"
           nbFW=$nbFW+1
        fi
     fi
   done
   Trace "$nbFW framework(s) found"
fi

if [ "$ODT_LIST" = "" ]; then
 if [ "$flag_a" = "1" ]; then
  for Framework in $PRODUCT
  do
    for r in $SHELL_X
    do
       for s in $(ls $WSROOT/$Framework/FunctionTests/$r 2> $MK_DEVNULL)
       do
          if [ "${s%.sh}" != "$s" ]; then
            printf "%-34s %-15s %s\n" "$Framework" "$r" "${s%.sh}" >> $ODT_LIST_FILE
            nbODT=$nbODT+1
          fi
       done
    done
  done
 fi
else
  if [ "$PRODUCT" = "" ]; then
    TraceErr "Missing option -F"
    out 2
  fi
  for s in $ODT_LIST
  do
    printf "%-34s %-15s %s\n" "$PRODUCT" "$SHELL_X" "${s%.sh}" >> $ODT_LIST_FILE
    nbODT=$nbODT+1
  done
fi
if [ "$flag_L" = "1" ]; then
   nbODT="$(wc -l $ODT_LIST_FILE|awk '{ print $1 }')"
fi

if [ "$flag_D" != "1" ]; then

 if [ "$nbODT" = "0" ]; then
   TraceSep
   TraceErr "No ODT found, missing -a or -s option ?"
 fi

 Trace "$nbODT ODT to replay"
else
 echo "$PRODUCT $SHELL_X noODT" > $ODT_LIST_FILE
fi

# Variables specifique couverture de test
# ---------------------------------------

if [ $flag_c -eq 1 ]; then
  case "$OS_NAME" in
    "AIX" )
        export ODT_COVERAGE="Yes";
        export CatdbgPgm="$( FindResource Catdbg/cover )";
        export CatdbgLib="$( FindResource Catdbg/lib )";
        ;;

    "SunOS" )
        ;;

    "Windows_NT" )
        ;;

    *  )
        TraceWarn "NO COVERAGE INFORMATION ---- AIX, NT and SunOS ONLY ----";
        flag_c=0;
        ODT_COVERAGE="";
        ;;
  esac
fi

# Construction du PATH minimal
# ----------------------------

if [ "$OS_PREM_MIN" = "w" ]; then
 export PATH_MIN="$PATH"
 export MK_SEPARATOR=";"
 export ADL_ODT_SEPARATOR=";"
 export ADL_ODT_SLASH="\\"
 export CNEXTOUTPUT=console
else
 if [ "$PATH_TEST" != "" ] ; then
  PATH_TEST_PLUS2P="$PATH_TEST:"
 fi
 case "$OS_NAME" in
 AIX)   export LIBPATH="${PATH_TEST_PLUS2P}/usr/lpp/xlC/lib:/lib:/usr/lib";;
 HP-UX) export SHLIB_PATH="${PATH_TEST_PLUS2P}/lib:/usr/lib";;
 IRIX)  export LD_LIBRARY_PATH="${PATH_TEST_PLUS2P}/usr/lib:/lib" ;;
 SunOS) export LD_LIBRARY_PATH="${PATH_TEST_PLUS2P}/lib:/usr/lib:/usr/ccs/lib:/opt/SUNWits/Graphics-sw/xgl/lib:/usr/openwin/lib:/usr/dt/lib";;
 esac

 # Verrue pour mode debugger : le SHLIB_PATH value perturbe
 # l'execution de dde (le debugger)
 # Est-il utile de valuer le SHLIB_PATH avec /lib:/usr/lib ?

 if [ $flag_b -eq 1 ]; then
   export SHLIB_PATH=""
 fi

 export ADL_ODT_SEPARATOR=":"
 export ADL_ODT_SLASH="/"
 mk_full="$(whence mkmk_profile)"
 mk_path="${mk_full%.bat}"
 if [ "$mk_path" = "" ]; then
   TraceErr "unable to find mkmk_profile"
   out 2
 fi
 export PATH="/bin:/usr/bin:/usr/sbin:/usr/bsd:/usr/ccs/bin:/usr/ucb:/usr/dt/bin:/usr/bin/X11:/usr/openwin/bin:/usr/vue/bin"

 . $mk_path >$MK_DEVNULL 2>&1
 if [ "$OS_NAME" = "SunOS" ]; then
   export LD_LIBRARY_PATH="${LD_LIBRARY_PATH};"
 fi

 PATH_MIN="$PATH"
 LIBPATH_MIN="$LIBPATH"
 SHLIB_PATH_MIN="$SHLIB_PATH"
 LD_LIBRARY_PATH_MIN="$LD_LIBRARY_PATH"
fi

export STEPLIB="$PATH_TEST:$STEPLIB"

# Mise en place du path minimal

export PATH="$PATH_PLUS$MK_SEPARATOR$PATH_MIN"
export LIBPATH="$LIBPATH_MIN"
export SHLIB_PATH="$SHLIB_PATH_MIN"
export LD_LIBRARY_PATH="$LD_LIBRARY_PATH_MIN"

# Surcharge optionnelle des variables ADL_ODT
# -------------------------------------------

if [ "$WSROOTOutput" = "" ]; then
  WSROOTOutput="$WSROOT"
fi
if [ "$ADL_ODT_OUT" != "" ]; then
   ADL_ODT_OUT_FORCE="Yes"
else
   ADL_ODT_OUT_FORCE="No"
fi
if [ "$ADL_ODT_COV" != "" ]; then
   ADL_ODT_COV_FORCE="Yes"
else
   ADL_ODT_COV_FORCE="No"
fi

# Options pour mkrun
# ------------------

mkrun_options=""
if [ "$flag_i" = "1" ]; then
   if [ -f "$WSROOT/Install_config" ]; then
      mkrun_options="$(nawk -F ':' '{
        if( NF>=2 && $1 ~ "FW_PATH" )
        for( i= 2; i<=NF; i++ )
        if( concat!="" ) concat=concat":"$i;
        else concat=$i;
      } END { print concat }' $WSROOT/Install_config)"
      if [ "$mkrun_options" != "" ]; then mkrun_options="-s $mkrun_options"; fi
   fi
fi

# ======================================================== 
# Boucle sur les ODT
# ======================================================== 

TraceSep

typeset -i rc_glob=0
typeset -i rc_loc 

while read Framework ODTType ODTName
do
 DIR_REF_TEST="$WSROOT/$Framework/FunctionTests"
 
 export CDDTTERM=$DIR_REF_TEST/$ODTType
 export ODT_LOG_NAME=$ODTName
 # Variables ADL_ODT

 export ADL_ODT_REF=$WSROOT/$Framework/FunctionTests/OutputRef
 export ADL_ODT_IN=$WSROOT/$Framework/FunctionTests/InputData

 if [ "$ADL_ODT_OUT_FORCE" = "No" ]; then
   export ADL_ODT_OUT=$WSROOTOutput/$Framework/FunctionTests/Output/$OS
 fi
 if [ "$ADL_ODT_COV_FORCE" = "No" ]; then
   export ADL_ODT_COV=$WSROOTOutput/$Framework/FunctionTests/Coverage/$OS
 fi

 mkdir -p $ADL_ODT_OUT 2>$MK_DEVNULL
 touch $ADL_ODT_OUT 2>$MK_DEVNULL
 if [ $? != 0 ]; then
  TraceWarn "Directory: $ADL_ODT_OUT not writable"
  TraceWarn "ADL_ODT_OUT is set to $MK_TEMPDIR/MKODT_save_$$"
  TraceWarn "++++++ Output Will be lost"
  TraceWarn "++++++ Set the ADL_ODT_OUT variable to a writable directory  +++++++"
  export ADL_ODT_OUT=$MK_TEMPDIR/MKODT_save_$$
  mkdir -p $ADL_ODT_OUT 2>$MK_DEVNULL
  ADL_ODT_OUT_FORCE="Yes"
 fi
 if [ "$flag_c" = "1" ]; then
   mkdir -p $ADL_ODT_COV 2>$MK_DEVNULL
 fi

 # Replay de la liste d'ODT
 # ------------------------

 export ODT_FILE=${ODTName%.*}

 count=$count+1

 # Capture d un Record 

 export ADL_ODT_REC=$ADL_ODT_IN/${ODT_FILE}.rec
 export ADL_ODT_MODEL="/u/lego/${ADL_FR_CATIA}recmdl/$Framework"
 unset CATRECORDCAPTURE
 unset CATRECORDREPLAY
 if [ $flag_C -eq 1 ]; then
   export CATRECORDCAPTURE=$ADL_ODT_REC
   export ODT_MAX_TIME=120
 fi

 # Couverture

 if [ $flag_c -eq 1 ] ; then
   case "$OS_NAME" in
     "SunOS" )
       rm $ADL_ODT_COV/$ODT_FILE.pv* $ADL_ODT_COV/$ODT_FILE.plog 2> $MK_DEVNULL;
       rm $ADL_ODT_COV/$ODT_FILE.pcv* 2> $MK_DEVNULL;
       export PURIFYOPTIONS=" -view-file=$ADL_ODT_TMP/$ODT_FILE.pv%p $PURIFYOPTIONSINIT -chain-length=12";
       export PUREOPTIONS=" -log-file=/tmp/logpure -counts-file=$ADL_ODT_COV/$ODT_FILE.pcv $PUREOPTIONSINIT";
       ;;
     "Windows_NT" )
       rm $ADL_ODT_COV/$ODT_FILE.pv* $ADL_ODT_COV/$ODT_FILE.plog 2> $MK_DEVNULL;
       rm $ADL_ODT_COV/$ODT_FILE.pcv* 2> $MK_DEVNULL;
       ;;
   esac
 fi

 if [ "$flag_q" = "0" ]; then
   Trace "RUNNING ODT [$Framework $ODT_FILE] ($count/$nbODT)"
 fi
 id="$( printf "%-32s %-15s\n" $Framework $ODTName )"

 # Lancement de l'ODT
 # ------------------

>$MK_TEMPDIR/mkodt_$$
>$ADL_ODT_PARAM
 rm $MK_TEMPDIR/mkodt_$$ 2>$MK_DEVNULL
 export PATH="$WSROOT\\$MkmkOS_VAR\\code\\bin;$PATH"
 #setcatenv -e mkodt_env -p $WSROOT\\$MkmkOS_VAR -desktop no
 #setcatenv -e mkodt_env -u CATICPath=\\\\RUBENS\\CDCXR2w\\PACKAGINGBSF\\win_a\\code\\productIC
delcatenv -e mkodt_env
echo  setcatenv -e mkodt_env $OPTION_FOR_SETCATENV
setcatenv -e mkodt_env $OPTION_FOR_SETCATENV
export CATDefaultEnvironment=mkodt_env
 $whence_subodt s $DIR_REF_TEST/$ODTType/$ODT_FILE p > $MK_TEMPDIR/mkodt_$$ 2>&1 < $MK_DEVNULL
 # Analyse de l'execution
 # ----------------------

 rc_loc=0
 grep " successful " $MK_TEMPDIR/mkodt_$$ >$MK_DEVNULL
     if [ $? -ne 0 ]; then
       rc_chn=` awk '( $8 == "failed" ) { print $10 } ' $MK_TEMPDIR/mkodt_$$ `
       if [ "$rc_chn" = "" ]; then
         rc_loc=99
       else
         rc_loc=$rc_chn
       fi
     fi
     if [ "$flag_q" = "0" ]; then
       cat $MK_TEMPDIR/mkodt_$$
     else
       if [ "$rc_loc" = "0" ]; then
         Trace "$id : OK"
       else
         Trace "$id : KO, rc=$rc_loc"
       fi
     fi

 if [ "$rc_loc" != "0" ]; then
   rc_glob=$rc_glob+1
 fi
 if [ $flag_k -eq 0 ]; then
   rm -rf $ADL_ODT_TMP/*
 fi

 # Purify, extraction de la log ascii

 purify_err=""
 purify_warn=""
 purify_mlk=""
 if [ $flag_c -eq 1 ]; then
   if [ "$OS_NAME" = "SunOS" ]; then
     export PURIFYOPTIONS="-append-logfile"
     ls $ADL_ODT_COV/$ODT_FILE.pv* > $MK_DEVNULL 2>&1
     if [ $? = 0 ]; then
       for pv in $ADL_ODT_COV/$ODT_FILE.pv*; do 
         pvname=`basename $pv`
         /u/env/purify/$OS_NAME/purify -view $pv -windows=no -log-file=$ADL_ODT_TMP/$pvname.plog
       done
       cat $ADL_ODT_TMP/*.plog >$ADL_ODT_COV/$ODT_FILE.plog
     else
       >$ADL_ODT_COV/$ODT_FILE.plog
     fi

     purify_err=`fgrep -c -f "$(whence mkodt_plog_fatal)" $ADL_ODT_COV/$ODT_FILE.plog 2>$MK_DEVNULL`
     purify_warn=`fgrep -c -f "$(whence mkodt_plog_warning)" $ADL_ODT_COV/$ODT_FILE.plog 2>$MK_DEVNULL`
     purify_mlk="$( awk 'BEGIN {
        l=0
	    leak=0
        pleak=0
        alloc=0
     }
     {
	if( $1=="Memory" && $2=="leaked:" ) {

		leak+=$3
		pleak+=$8
	}
        if( l==0 ) {
          if( $1=="Purify" && $2=="Heap" && $3=="Analysis" ) l=1
          } else {
		if( l==6 ) alloc+=$4
		l++
		if( l==7 ) l=0
          }
	}
	END {
		print leak,pleak,alloc
	}' $ADL_ODT_COV/$ODT_FILE.plog )"
	if [ -z "$purify_err" ]
	then purify_err="."
	fi
	if [ -z "$purify_warn" ]
	then purify_warn="."
	fi
	if [ -z "$purify_mlk" ]
	then purify_mlk="? ? ?"
	fi
   elif [ "$OS_NAME" = "Window_NT" ]; then
        rm -f $Mk_TEMPDIR/odttempo.plog
        ls $ADL_ODT_COV/$ODT_FILE.pv*.pfy | while read A;do
          purify /SaveTextData=$Mk_TEMPDIR/odttempo.plog /Run=no $A
          cat $Mk_TEMPDIR/odttempo.plog >> $ADL_ODT_COV/$ODT_FILE.plog
          rm -f $Mk_TEMPDIR/odttempo.plog
        done
   fi
 fi

 # Generation du fichier mkodt_result

 if [ "$ODTType" = "SwitchTestCases" ]; then
   TYPE_ODT="-S"
 else
   TYPE_ODT="."
 fi
 echo $Framework "-f" $ODT_FILE $MkmkOS_VAR $rc_loc $(date +"%y-%m-%d-%T"|sed -e 's+/+-+g') "?" $TYPE_ODT $pertinence_result $Elapsed_time $Max_time $purify_err $purify_warn $purify_mlk " " > $ADL_ODT_OUT/$ODT_FILE.mkodt_result 

done < $ODT_LIST_FILE

# Return code
# -----------

if [ "$nbODT" = "1" ]; then
  out $rc_loc
else
  Trace
  Trace "$nbODT ODT replayed, $rc_glob KO"
  out $rc_glob
fi
