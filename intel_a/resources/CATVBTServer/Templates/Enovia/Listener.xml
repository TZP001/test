<?xml version="1.0"?>
<Template Name="Listener">

<Group Name="CPPFile"><If Test="COMMENTS">// COPYRIGHT <V>COMPANY</V> <V>YEAR</V>
//===================================================================
//
// <V>PackageListener</V>.cpp
//
// Implementation of the ackageListener class <V>PackageListenerClass</V>
//
//===================================================================
//  <V>MONTH</V> <V>YEAR</V>  Creation: Code generated by the CAA wizard  <V>USER</V>
//===================================================================
</If>
#include "VPMSession.h"
#include "ENOVPackageListener.h"
#include "<V>PackageListenerClass</V>.h"
//{{IncludeSection
//}}IncludeSection
CATImplementClass( <V>PackageListenerClass</V>,
                   DataExtension,
                   CATBaseUnknown,
                   INFO_<V>PackageName</V> );
 
<If Test="COMMENTS">
//-----------------------------------------------------------------------------
// <V>PackageListenerClass</V> : constructor
//-----------------------------------------------------------------------------
</If>
<V>PackageListenerClass</V>::<V>PackageListenerClass</V>() : ENOVPackageListener()
{
}

<If Test="COMMENTS">
//-----------------------------------------------------------------------------
// <V>PackageListenerClass</V> : destructor
//-----------------------------------------------------------------------------
</If>
<V>PackageListenerClass</V>::~<V>PackageListenerClass</V>()
{
}
 
<If Test="COMMENTS">
// Tie the implementation to its interface
// ---------------------------------------
</If>
#include "TIE_ENOVISessionEvent.h"
TIE_ENOVISessionEvent( <V>PackageListenerClass</V> );
HRESULT <V>PackageListenerClass</V>::onAfterCreateLoginSession(const ENOVIEvent_var& iRaisedEvent,HRESULT&  ioNotifyReturnCode)
{
	HRESULT Rc;
<If Test="COMMENTS">
	// Get the login session
</If>
	VPMSession *session= VPMSession::OpenSession();

<If Test="COMMENTS">
	// Get the event manager
</If>
	ENOVIEventManager_var hEventManager;
	Rc= session->get_ENOVEventManager( hEventManager );
	if( Rc==E_FAIL )
	{
		return E_FAIL;
	}

	CATUnicodeString usEventName, usTypeName;
//{{RegisterSection
//}}RegisterSection
	return S_OK;
}

</Group>

<Group Name="IncludeSection">#include "<V>SubscriberClass</V>.h"
#include "<V>EventInterface</V>.h"
</Group>

<Group Name="RegisterSection"><If Test="COMMENTS">	//
	// Create instance of object <V>SubscriberClass</V>
	// and register it on type   <V>PublisherClass</V>
	//
</If>
	<V>SubscriberInstance</V>= new <V>SubscriberClass</V>();
	CATBaseUnknown_var h<V>EventInterface</V><V>SubscriberClass</V>(<V>SubscriberInstance</V>);
	usTypeName= "ENOVIA_<V>PublisherClass</V>";
</Group>

<Group Name="AddRegisterSection">
	<V>EventInterface</V>_var h<V>EventInterface</V><V>SubscriberClass</V>(<V>SubscriberInstance</V>);
	usTypeName= "ENOVIA_<V>PublisherClass</V>";
</Group>

<Group Name="EventSection">	usEventName= "<V>EventName</V>";
	Rc= hEventManager->Subscribe( usEventName, usTypeName, h<V>EventInterface</V><V>SubscriberClass</V>,
						IID_<V>EventInterface</V>, &<V>CookieInstance</V>, <V>EventMode</V> );       
	if(FAILED(Rc)) return Rc;

</Group>

<Group Name="HFile"><If Test="COMMENTS">// COPYRIGHT <V>COMPANY</V> <V>YEAR</V>
//===================================================================
//
// <V>PackageListenerClass</V>.h
//
// Declaration of the PakageListener class <V>PackageListenerClass</V>
//
//===================================================================
// <V>MONTH</V> <V>YEAR</V>  Creation: Code generated by the CAA wizard  <V>USER</V>
//===================================================================
</If>
#ifndef <V>PackageListenerClass</V>_H
#define <V>PackageListenerClass</V>_H

#include "<V>Module</V>.h"
#include "CATBaseUnknown.h"
#include "ENOVPackageListener.h" 

class ENOVIEvent_var;
//-----------------------------------------------------------------------

<If Test="COMMENTS">
/**
 * Class <V>PackageListenerClass</V>.
 * 
 * Using this prefered syntax will enable mkdoc to document your class.
 */
</If>
class ExportedBy<V>Module</V> <V>PackageListenerClass</V>: public ENOVPackageListener
{
	CATDeclareClass;

public:
<If Test="COMMENTS">
	// Standard constructors and destructors for an implementation class
	// -----------------------------------------------------------------
</If>
	<V>PackageListenerClass</V> ();
	virtual ~<V>PackageListenerClass</V> ();

	HRESULT onAfterCreateLoginSession(const ENOVIEvent_var& iRaisedEvent, HRESULT&  ioNotifyReturnCode) ;

 
private:
<If Test="COMMENTS">
	// The copy constructor and the equal operator must not be implemented
	// -------------------------------------------------------------------
</If>
	<V>PackageListenerClass</V> (<V>PackageListenerClass</V> &);
	<V>PackageListenerClass</V>& operator=(<V>PackageListenerClass</V>&);
<If Test="COMMENTS">
	// Members to store event subscriber instances and cookies
	// -------------------------------------------------------
</If>
	//{{Events
	//}}Events
};

//-----------------------------------------------------------------------

#endif
</Group>

<Group Name="EventCookies">	unsigned long <V>CookieInstance</V>;
</Group>
<Group Name="EventListener">	CATBaseUnknown *<V>SubscriberInstance</V>;
</Group>

<Group Name="ModuleDico">INFO_<V>PackageName</V> ENOVISessionEvent lib<V>Module</V>
</Group>
<Group Name="ListenerDico"><V>SubscriberClass</V> <V>EventInterface</V> lib<V>Module</V>
</Group>

<Script Name="PackageListener">
	<CreateDirectory>
		<Path><V>Workspace</V>\<V>Framework</V>\<V>Module</V>.m</Path>
		<CreateDirectory>
			<Path>src</Path>
			<CreateFile>
				<Path><V>PackageListenerClass</V>.cpp</Path>
				<GenerateText Group="CPPFile"/>
			</CreateFile>
		</CreateDirectory>
		<CreateDirectory>
			<Path>LocalInterfaces</Path>
			<CreateFile>
				<Path><V>PackageListenerClass</V>.h</Path>
				<GenerateText Group="HFile"/>
			</CreateFile>
		</CreateDirectory>
	</CreateDirectory>
	<CreateDirectory>
		<Path><V>Workspace</V>\<V>Framework</V>\CNext\code\dictionary</Path>
		<EditFile>
			<Path><V>Framework</V>.dico</Path>
			<AddText>
				<GenerateText Group="ModuleDico"/>
			</AddText>
		</EditFile>
	</CreateDirectory>
</Script>

<Script Name="NewListener">
	<EditFile>
		<Path><V>Workspace</V>\<V>Framework</V>\<V>Module</V>.m\LocalInterfaces\<V>PackageListenerClass</V>.h</Path>
		<EditSection><Begin>//{{Events</Begin><End>//}}Events</End>
			<AddText>
				<GenerateText Group="EventListener"/>
			</AddText>
			<Loop Enumeration="Methods">
				<If Test="EventMode">
					<AddText>
						<GenerateText Group="EventCookies"/>
					</AddText>
				</If>
			</Loop>
		</EditSection>
	</EditFile>

	<EditFile>
		<Path><V>Workspace</V>\<V>Framework</V>\<V>Module</V>.m\src\<V>PackageListenerClass</V>.cpp</Path>
		<EditSection><Begin>//{{RegisterSection</Begin><End>//}}RegisterSection</End>
			<AddText>
				<GenerateText Group="RegisterSection"/>
				<Loop Enumeration="Methods">
					<If Test="EventMode">
						<AddText>
							<GenerateText Group="EventSection"/>
						</AddText>
					</If>
				</Loop>
			</AddText>
		</EditSection>
		<EditSection><Begin>//{{IncludeSection</Begin><End>//}}IncludeSection</End>
			<AddText>
				<GenerateText Group="IncludeSection"/>
			</AddText>
		</EditSection>
	</EditFile>



	<CreateFile>
		<Path><V>Workspace</V>\<V>Framework</V>\<V>Module</V>.m\src\<V>ImplementationClass</V>.cpp</Path>
		<GenerateText Group="CNext\Implementation.xml\CPPFile"/>
		<EditSection><Begin>//{{TIE</Begin><End>//}}TIE</End>
			<AddText>
				<GenerateText Group="CNext\Implementation.xml\TIE"/>
			</AddText>
		</EditSection>
		<EditSection><Begin>//{{ITF</Begin><End>//}}ITF</End>
			<AddText>
				<GenerateText Group="CNext\Implementation.xml\ITFComment"/>
			</AddText>
		</EditSection>
		<Loop Enumeration="Methods">
			<AddText>
				<GenerateText Group="CNext\Implementation.xml\CPPMethod"/>
			</AddText>
		</Loop>
	</CreateFile>

	<CreateFile>
		<Path><V>Workspace</V>\<V>Framework</V>\<V>Module</V>.m\LocalInterfaces\<V>ImplementationClass</V>.h</Path>
		<GenerateText Group="CNext\Implementation.xml\HFile"/>
		<EditSection><Begin>//{{Methods</Begin><End>//}}Methods</End>
			<Loop Enumeration="Methods">
				<AddText>
					<GenerateText Group="CNext\Implementation.xml\HMethod"/>
				</AddText>
			</Loop>
		</EditSection>
		<EditSection><Begin>//{{ITF</Begin><End>//}}ITF</End>
			<AddText>
				<GenerateText Group="CNext\Implementation.xml\ITFComment"/>
			</AddText>
		</EditSection>
		<EditSection><Begin>//{{IncludeSection</Begin><End>//}}IncludeSection</End>
			<AddText>
				<GenerateText Group="CNext\Implementation.xml\IncludeSection"/>
			</AddText>
		</EditSection>
	</CreateFile>

	<CreateDirectory>
		<Path><V>Workspace</V>\<V>Framework</V>\CNext\code\dictionary</Path>
		<EditFile>
			<Path><V>Framework</V>.dico</Path>
			<AddText>
				<GenerateText Group="ListenerDico"/>
			</AddText>
		</EditFile>
	</CreateDirectory>
</Script>

<Script Name="AddToListener">
	<EditFile>
		<Path><V>Workspace</V>\<V>Framework</V>\<V>Module</V>.m\LocalInterfaces\<V>PackageListenerClass</V>.h</Path>
		<EditSection><Begin>//{{Events</Begin><End>//}}Events</End>
			<AddText>
				<GenerateText Group="EventListener"/>
			</AddText>
			<Loop Enumeration="Methods">
				<If Test="EventMode">
					<AddText>
						<GenerateText Group="EventCookies"/>
					</AddText>
				</If>
			</Loop>
		</EditSection>
	</EditFile>

	<EditFile>
		<Path><V>Workspace</V>\<V>Framework</V>\<V>Module</V>.m\src\<V>PackageListenerClass</V>.cpp</Path>
		<EditSection><Begin>//{{RegisterSection</Begin><End>//}}RegisterSection</End>
			<AddText>
				<GenerateText Group="AddRegisterSection"/>
				<Loop Enumeration="Methods">
					<If Test="EventMode">
						<AddText>
							<GenerateText Group="EventSection"/>
						</AddText>
					</If>
				</Loop>
			</AddText>
		</EditSection>
		<EditSection><Begin>//{{IncludeSection</Begin><End>//}}IncludeSection</End>
			<AddText>
				<GenerateText Group="IncludeSection"/>
			</AddText>
		</EditSection>
	</EditFile>

	<EditFile>
		<Path><V>Workspace</V>\<V>Framework</V>\<V>Module</V>.m\LocalInterfaces\<V>ImplementationClass</V>.h</Path>
		<EditSection><Begin>//{{Methods</Begin><End>//}}Methods</End>
			<Loop Enumeration="Methods">
				<AddText>
					<GenerateText Group="CNext\Implementation.xml\HMethod"/>
				</AddText>
			</Loop>
		</EditSection>
		<EditSection><Begin>//{{IncludeSection</Begin><End>//}}IncludeSection</End>
			<AddText>
				<GenerateText Group="CNext\Implementation.xml\IncludeSection"/>
			</AddText>
		</EditSection>
	</EditFile>
	<EditFile>
		<Path><V>Workspace</V>\<V>Framework</V>\<V>Module</V>.m\src\<V>ImplementationClass</V>.cpp</Path>
		<EditSection><Begin>//{{TIE</Begin><End>//}}TIE</End>
			<AddText>
				<GenerateText Group="CNext\Implementation.xml\TIE"/>
			</AddText>
		</EditSection>
		<Loop Enumeration="Methods">
			<AddText>
				<GenerateText Group="CNext\Implementation.xml\CPPMethod"/>
			</AddText>
		</Loop>

	</EditFile>
	<EditFile>
		<Path><V>Workspace</V>\<V>Framework</V>\CNext\code\dictionary\<V>Framework</V>.dico</Path>
		<AddText>
				<GenerateText Group="ListenerDico"/>
		</AddText>
	</EditFile>
</Script>

</Template>
