mkFRONT.mkNoFW            = "/P1 -> This command must be executed in a workspace containing, at least, one framework.";
mkFRONT.mkNoModule        = "/P1 -> This command must be executed in a module.";
mkFRONT.mkCorruptedFile   = "/P1 -> This concatenation file is corrupted. Use the mkGetPreqM command to create a new one.";
mkFRONT.mkMandatoryOption = "Command -> The option '/P1' is mandatory.";
mkFRONT.mkMandatoryOptionsOR   = "Command -> One of these options '/P1' or '/P2' is mandatory.";
mkFRONT.mkNotBothOptions  = "Command -> Cannot specify both '/P1' and '/P2' options."; 
mkFRONT.mkStartInfo       = "## Start of Information.";
mkFRONT.mkEndInfo         = "## End of Information.";
mkFRONT.mkFailed          = "/P1: /P2/P3/P4 failed.";
mkFRONT.mkSuccessful      = "/P1: /P2/P3/P4 successful.";
mkFRONT.mkLoadShell       = "/P1 -> It is impossible to load this Shell model.";
mkFRONT.mkRenameFailed    = "/P1 -> Failed to rename this file to [/P2].";
mkFRONT.mkWSEIsInvalid    = "/P1 -> This /P2 is not a valid object due to previous error:";
mkFRONT.mkNotAWS          = "/P1 -> This workspace is not valid.";
mkFRONT.mkLIBPATH         = "DEBUG -> The Library path will be [/P1].";
mkFRONT.mkPATH            = "DEBUG -> The Path will be [/P1].";
mkFRONT.mkBackDir         = "DEBUG -> Change directory back to [/P1].";
mkFRONT.mkCycleSuffix     = "Internal Error -> Suffix cyclic detected between [/P1] and [/P2].";
mkFRONT.mkShellInfo       = "mkrunM -> The shell used to start the command is: [/P1]";
mkFRONT.mkGiveConcat      = "Concatenation -> The list of paths is [/P1].";
mkFRONT.mkBadOptErr       = "Command line -> Syntax error.";
mkFRONT.mkNothingToDo     = "Command line -> There is no /P1 to work on. Use one option in the following list: [-a] or [-lFW lst] or [-lMod lst].";
mkFRONT.MacMiss           = "Macro [/P1] not defined in /P2.";
mkFRONT.MacDefInvalid     = "Macro [/P1]: invalid value [/P2].";
mkFRONT.mkDupHeader       = "/P1 -> This header exists in directory [/P2], that of [/P3] is ignored.";
mkFRONT.mkHDRUpdated      = "/P1 -> Map of imported headers updated.";
mkFRONT.mkHDRNeedsUpdate  = "/P1 -> /P2 needs update.";
mkFRONT.mkMkfNeedsUpd     = "/P1 -> Make files /P2 /P3.";
mkFRONT.DataUpd           = "/P1 -> Data /P2.";
mkFRONT.ChkOptsModif      = "Language options -> modification for [/P1].";
mkFRONT.ChkOptsFailed     = "Language options -> Check failed: /P1.";
mkCtrlSrc.mkBadHeader     = "/P1 Header /P2 of framework /P3 (/P4 Mode) is used by file /P5.";
mkTriePreq.mkNotExpMode   = "Framework /P1 can be referenced in the Identity Card in the NotExported mode /P1.";
mkTriePreq.mkBadExpMode   = "Header /P1 of Framework /P2 is used by header /P3 of current framework";
mkUpdDep.mkDepDir         = "mkmk Internal Error -> Dependencies directory must be specified";
mkUpdDep.mkUpdTarget      = "mkmk Internal Error -> Target name to update must be specified";
mkAnlGrammars.Compiler    = "/P1 compiler is [/P2].";
mkAnlGrammars.Grammar     = "Grammar to be analyzed is [/P1/P2].";
mkAnlGrammars.Updated     = "->   /P1: updated, /P2 /P3.";
mkAnlGrammars.Identical   = "     /P1: identical, /P2 /P3.";
mkAnlGrammars.NoFile      = "/P1 -> File does not exists, compilation failed.";
mkAnlGrammars.NoGenFiles  = "/P1 -> No files have been generated.";
mkAnlGrammars.InvMode     = "/P1 -> [/P2/] is an invalid mode of generation.";
mkCheckCompil.BuildAllSrc = "The previous list of sources (.make.src_obj) does not exist -> All sources will be rebuilt";
mkCheckCompil.BuildAllPreq= "The previous list of prerequisites (.make.preq.list) does not exist -> All sources will be rebuilt";
mkCheckCompil.DiffList    = "The /P1 lists are different -> All sources will be rebuilt";
mkMakeCompil.NOSource     = "No java source in the src directory.";
mkMakeCompil.TooBigEnv    = "The environment is too big. No command can be executed";
mkMakeCompil.MultiCmde    = "Sources file need to be compile in several javac command.\nThen, they need to fit the hierarchical structure of packages.";
mkMakeCompil.NoPrereq     = "Prerequisite /P1 does not exist (not build or in Error).";
mkMakeCompil.NoTool       = "The /P1 is not found for that Operating System.";
mkMakeJar.NOPackage       = "No built package in the objects directory";
mkCheckResources.BuildJar = "The previous list of resources (.make.resources.list) does not exist -> The archive will be regenerated";
mkCheckResources.DiffList = "The /P1 lists are different -> The archive will be regenerated";
mkjavadoc.NoHierarchicalSource = "The source /P1 of module /P2 does not fit the hierarchical structure of package. Therefore, it will not be documented.";
mkjavadoc.NoPackage       = "There is no package to document.";
mkdoc.DeletedFile         = "Updating file /P1 in the Doc View";
mkdoc.NotAbsolute         = "Base path /P1 is not absolute";
mkdoc.BadOption           = "An option is missing";
mkdoc.SubstFile           = "Substitution file /P1 does not exist";
mkdoc.Delete              = "File corresponding to /P1 has been deleted in current module";
mkdoc.Protocol            = "Protocol /P1 is used in source file /P2";
mkdoc.NoFile              = "Error in /P1: No file at reference </P2>";
mkdoc.NotInPrereq         = "Error in /P1: File </P2> is not in a prerequisite framework";
mkdoc.NotInConfig         = "Error in /P1: File </P2> is not in the same configuration";
mkdoc.DocBaseRTV          = "Error in /P1: DOC_BASE cannot prereq several RTV (/P2)";
mkdoc.CommonRTV           = "Error in /P1: COMMON only prereq COMMON RTV (/P2)";
mkdoc.NoSubstFile         = "Substitution module /P1 is not found in concatenation";
mkdoc.NotValidLink        = "This link is not valid: /P1";
mkdoc.ForbidLink          = "Error in /P1 : A link with an element outside the workspace is not allowed: /P2";
mkdoc.InvalidSubst        = "Invalid format for substitution file /P1";
mkdoc.TagNotFound         = "Error in /P2: Tag /P1 has not been found";
mkdoc.TagNotClosed        = "Error in /P1: Tag not closed ( /P2 )";
mkdoc.AnchorNotResolved   = "/P1 Anchor not resolved in source file /P2";
mkdoc.AnchorNoLink        = "No link to /P1 Anchor in source file /P2";
mkdoc.EmptyLink           = "Error in /P1: Empty link ( /P2 )";
mkdoc.NoExtension         = "Extension for file /P1 not implemented";
mkdoc.ErrorSize           = "Error on file /P1 : Different size between runtime and build time view";
mkdoc.NotISO              = "Error on file /P1 : Incorrect file name format";
mkdoc.Blank               = "Error on file /P1 : Blank character not authorized";
mkView.KoFilterExpand     = "Error in /P1 : The file tree cannot be expanded.";
mkView.Delete             = "Deleting directory /P1...";
mkidx.DoesNotExist        = "File /P1 does not exist in the Documentation View.";
mkidx.Lang                = "The Language of input HTML documents is set to /P1";
mkidx.NoPartTitle         = "No title is defined for this module's documents";
mkidx.InvalidLocale       = "Error: Invalid Japanese locale!";
mkidx.TitleError          = "title ended by <table> instead of </h... in file /P1";
mkSPKDiff.COMPUTE_DIFF    = "computing differences for '/P1'";
mkSPKDiff.DELETED_ELT     = "'/P1' (from /P2) does not contain anymore element /P3";
mkSPKDiff.NEW_ELT         = "'/P1' (from /P2) does contain new element /P3";
mkSPKDiff.NO_ELT          = "'/P1' (from /P2 or /P3) does not contain anymore element /P4";
