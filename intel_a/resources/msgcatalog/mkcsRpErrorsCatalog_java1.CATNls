//*********************************************************************************************************************
// ERRORS COMPLETE NAME ([ErrorLabel].fullname)
//***************
// ANDROID RULES
CallSuperFirst.fullname	="Call Super First";
CallSuperLast.fullname	="Call Super Last";
ProtectLogD.fullname	="Protect LogD";
ProtectLogV.fullname	="Protect LogV";

// BASIC JSF RULES
DontNestJsfInJstlIteration.fullname	="Dont Nest Jsf In Jstl Iteration";

// BASIC JSP RULES
NoLongScripts.fullname				="No Long Scripts";
NoScriptlets.fullname				="No Scriptlets";
NoInlineStyleInformation.fullname	="No Inline Style Information";
NoClassAttribute.fullname			="No Class Attribute";
NoJspForward.fullname				="No Jsp Forward";
IframeMissingSrcAttribute.fullname	="Iframe Missing Src Attribute";
NoHtmlComments.fullname				="No Html Comments";
DuplicateJspImports.fullname		="Duplicate Jsp Imports";
JspEncoding.fullname				="Jsp Encoding";

// BASIC RULES
EmptyCatchBlock.fullname								="Empty Catch Block";
EmptyIfStmt.fullname									="Empty If Stmt";
EmptyWhileStmt.fullname									="Empty While Stmt";
EmptyTryBlock.fullname									="Empty Try Block";
EmptyFinallyBlock.fullname								="Empty Finally Block";
EmptySwitchStatements.fullname							="Empty Switch Statements";
JumbledIncrementer.fullname								="Jumbled Incrementer";
ForLoopShouldBeWhileLoop.fullname						="For Loop Should Be While Loop";
UnnecessaryConversionTemporary.fullname					="Unnecessary Conversion Temporary";
OverrideBothEqualsAndHashcode.fullname					="Override Both Equals And Hashcode";
DoubleCheckedLocking.fullname							="Double Checked Locking";
ReturnFromFinallyBlock.fullname							="Return From Finally Block";
EmptySynchronizedBlock.fullname							="Empty Synchronized Block";
UnnecessaryReturn.fullname								="Unnecessary Return";
EmptyStaticInitializer.fullname							="Empty Static Initializer";
UnconditionalIfStatement.fullname						="Unconditional If Statement";
EmptyStatementNotInLoop.fullname						="Empty Statement Not In Loop";
BooleanInstantiation.fullname							="Boolean Instantiation";
UnnecessaryFinalModifier.fullname						="Unnecessary Final Modifier";
CollapsibleIfStatements.fullname						="Collapsible If Statements";
UselessOverridingMethod.fullname						="Useless Overriding Method";
ClassCastExceptionWithToArray.fullname					="Class Cast Exception With To Array";
AvoidDecimalLiteralsInBigDecimalConstructor.fullname	="Avoid Decimal Literals In Big Decimal Constructor";
UselessOperationOnImmutable.fullname					="Useless Operation On Immutable";
MisplacedNullCheck.fullname								="Misplaced Null Check";
UnusedNullCheckInEquals.fullname						="Unused Null Check In Equals";
AvoidThreadGroup.fullname								="Avoid Thread Group";
BrokenNullCheck.fullname								="Broken Null Check";
BigIntegerInstantiation.fullname						="Big Integer Instantiation";
AvoidUsingOctalValues.fullname							="Avoid Using Octal Values";
AvoidUsingHardCodedIP.fullname							="Avoid Using Hard Coded IP";
CheckResultSet.fullname									="Check Result Set";
AvoidMultipleUnaryOperators.fullname					="Avoid Multiple Unary Operators";
EmptyInitializer.fullname								="Empty Initializer";

// BRACES RULES
IfStmtsMustUseBraces.fullname		="If Stmts Must Use Braces";
WhileLoopsMustUseBraces.fullname	="While Loops Must Use Braces";
IfElseStmtsMustUseBraces.fullname	="If Else Stmts Must Use Braces";
ForLoopsMustUseBraces.fullname		="For Loops Must Use Braces";

// CLONE IMPLEMENTATION RULES
ProperCloneImplementation.fullname				="Proper Clone Implementation";
CloneThrowsCloneNotSupportedException.fullname	="Clone Throws Clone Not Supported Exception";
CloneMethodMustImplementCloneable.fullname		="Clone Method Must Implement Cloneable";

// CODE SIZE RULES
NPathComplexity.fullname		="NPath Complexity";
ExcessiveMethodLength.fullname	="Excessive Method Length";
ExcessiveParameterList.fullname	="Excessive Parameter List";
ExcessiveClassLength.fullname	="Excessive Class Length";
CyclomaticComplexity.fullname	="Cyclomatic Complexity";
ExcessivePublicCount.fullname	="Excessive Public Count";
TooManyFields.fullname			="Too Many Fields";
NcssMethodCount.fullname		="Ncss Method Count";
NcssTypeCount.fullname			="Ncss Type Count";
NcssConstructorCount.fullname	="Ncss Constructor Count";
TooManyMethods.fullname			="Too Many Methods";

// CONTROVERSAL RULES
UnnecessaryConstructor.fullname					="Unnecessary Constructor";
NullAssignment.fullname							="Null Assignment";
OnlyOneReturn.fullname							="Only One Return";
UnusedModifier.fullname							="Unused Modifier";
AssignmentInOperand.fullname					="Assignment In Operand";
AtLeastOneConstructor.fullname					="At Least One Constructor";
DontImportSun.fullname							="Dont Import Sun";
SuspiciousOctalEscape.fullname					="Suspicious Octal Escape";
CallSuperInConstructor.fullname					="Call Super In Constructor";
UnnecessaryParentheses.fullname					="Unnecessary Parentheses";
DefaultPackage.fullname							="Default Package";
BooleanInversion.fullname						="Boolean Inversion";
DataflowAnomalyAnalysis.fullname				="Dataflow Anomaly Analysis";
AvoidFinalLocalVariable.fullname				="Avoid Final Local Variable";
AvoidUsingShortType.fullname					="Avoid Using Short Type";
AvoidUsingVolatile.fullname						="Avoid Using Volatile";
AvoidUsingNativeCode.fullname					="Avoid Using Native Code";
AvoidAccessibilityAlteration.fullname			="Avoid Accessibility Alteration";
DoNotCallGarbageCollectionExplicitly.fullname	="Do Not Call Garbage Collection Explicitly";

// COUPLING RULES
CouplingBetweenObjects.fullname	="Coupling Between Objects";
ExcessiveImports.fullname		="Excessive Imports";
LooseCoupling.fullname			="Loose Coupling";

// DESIGN RULES
UseSingleton.fullname									="Use Singleton";
SimplifyBooleanReturns.fullname							="Simplify Boolean Returns";
SimplifyBooleanExpressions.fullname						="Simplify Boolean Expressions";
SwitchStmtsShouldHaveDefault.fullname					="Switch Stmts Should Have Default";
AvoidDeeplyNestedIfStmts.fullname						="Avoid Deeply Nested If Stmts";
AvoidReassigningParameters.fullname						="Avoid Reassigning Parameters";
SwitchDensity.fullname									="Switch Density";
ConstructorCallsOverridableMethod.fullname				="Constructor Calls Overridable Method";
AccessorClassGeneration.fullname						="Accessor Class Generation";
FinalFieldCouldBeStatic.fullname						="Final Field Could Be Static";
CloseResource.fullname									="Close Resource";
NonStaticInitializer.fullname							="Non Static Initializer";
DefaultLabelNotLastInSwitchStmt.fullname				="Default Label Not Last In Switch Stmt";
NonCaseLabelInSwitchStatement.fullname					="Non Case Label In Switch Statement";
OptimizableToArrayCall.fullname							="Optimizable To Array Call";
BadComparison.fullname									="Bad Comparison";
EqualsNull.fullname										="Equals Null";
ConfusingTernary.fullname								="Confusing Ternary";
InstantiationToGetClass.fullname						="Instantiation To Get Class";
IdempotentOperations.fullname							="Idempotent Operations";
SimpleDateFormatNeedsLocale.fullname					="Simple Date Format Needs Locale";
ImmutableField.fullname									="Immutable Field";
UseLocaleWithCaseConversions.fullname					="Use Locale With Case Conversions";
AvoidProtectedFieldInFinalClass.fullname				="Avoid Protected Field In Final Class";
AssignmentToNonFinalStatic.fullname						="Assignment To Non Final Static";
MissingStaticMethodInNonInstantiatableClass.fullname	="Missing Static Method In Non Instantiatable Class";
AvoidSynchronizedAtMethodLevel.fullname					="Avoid Synchronized At Method Level";
MissingBreakInSwitch.fullname							="Missing Break In Switch";
UseNotifyAllInsteadOfNotify.fullname					="Use Notify All Instead Of Notify";
AvoidInstanceofChecksInCatchClause.fullname				="Avoid Instance of Checks In Catch Clause";
AbstractClassWithoutAbstractMethod.fullname				="Abstract Class Without Abstract Method";
SimplifyConditional.fullname							="Simplify Conditional";
CompareObjectsWithEquals.fullname						="Compare Objects With Equals";
PositionLiteralsFirstInComparisons.fullname				="Position Literals First In Comparisons";
UnnecessaryLocalBeforeReturn.fullname					="Unnecessary Local Before Return";
NonThreadSafeSingleton.fullname							="Non Thread Safe Singleton";
UncommentedEmptyMethod.fullname							="Uncommented Empty Method";
UncommentedEmptyConstructor.fullname					="Uncommented Empty Constructor";
AvoidConstantsInterface.fullname						="Avoid Constants Interface";
UnsynchronizedStaticDateFormatter.fullname				="Unsynchronized Static Date Formatter";
PreserveStackTrace.fullname								="Preserve Stack Trace";
UseCollectionIsEmpty.fullname							="Use Collection Is Empty";
ClassWithOnlyPrivateConstructorsShouldBeFinal.fullname	="Class With Only Private Constructors Should Be Final";
EmptyMethodInAbstractClassShouldBeAbstract.fullname		="Empty Method In Abstract Class Should Be Abstract";
SingularField.fullname									="Singular Field";
ReturnEmptyArrayRatherThanNull.fullname					="Return Empty Array Rather Than Null";
AbstractClassWithoutAnyMethod.fullname					="Abstract Class Without Any Method";
TooFewBranchesForASwitchStatement.fullname				="Too Few Branches For A Switch Statement";

// FINALIZER RULES
EmptyFinalizer.fullname						="Empty Finalizer";
FinalizeOnlyCallsSuperFinalize.fullname		="Finalize Only Calls Super Finalize";
FinalizeOverloaded.fullname					="Finalize Overloaded";
FinalizeDoesNotCallSuperFinalize.fullname	="Finalize Does Not Call Super Finalize";
FinalizeShouldBeProtected.fullname			="Finalize Should Be Protected";
AvoidCallingFinalize.fullname				="Avoid Calling Finalize";

// IMPORT STATEMENT RULES
DuplicateImports.fullname		="Duplicate Imports";
DontImportJavaLang.fullname		="Dont Import Java Lang";
UnusedImports.fullname			="Unused Imports";
ImportFromSamePackage.fullname	="Import From Same Package";
TooManyStaticImports.fullname	="Too Many Static Imports";

// J2EE RULES
UseProperClassLoader.fullname					="Use Proper Class Loader";
MDBAndSessionBeanNamingConvention.fullname		="MDB And Session Bean Naming Convention";
RemoteSessionInterfaceNamingConvention.fullname	="Remote Session Interface Naming Convention";
LocalInterfaceSessionNamingConvention.fullname	="Local Interface Session Naming Convention";
LocalHomeNamingConvention.fullname				="Local Home Naming Convention";
RemoteInterfaceNamingConvention.fullname		="Remote Interface Naming Convention";
DoNotCallSystemExit.fullname					="Do Not Call System Exit";
StaticEJBFieldShouldBeFinal.fullname			="Static EJB Field Should Be Final";
DoNotUseThreads.fullname						="Do Not Use Threads";

// JAVA BEAN RULES
BeanMembersShouldSerialize.fullname	="Bean Members Should Serialize";
MissingSerialVersionUID.fullname	="Missing Serial Version UID";

// JUNIT RULES
JUnitStaticSuite.fullname						="JUnit Static Suite";
JUnitSpelling.fullname							="JUnit Spelling";
JUnitAssertionsShouldIncludeMessage.fullname	="JUnit Assertions Should Include Message";
JUnitTestsShouldIncludeAssert.fullname			="JUnit Tests ShouldInclude Assert";
TestClassWithoutTestCases.fullname				="Test Class Without Test Cases";
UnnecessaryBooleanAssertion.fullname			="Unnecessary Boolean Assertion";
UseAssertEqualsInsteadOfAssertTrue.fullname		="Use Assert Equals Instead Of Assert True";
UseAssertSameInsteadOfAssertTrue.fullname		="Use Assert Same Instead Of Assert True";
UseAssertNullInsteadOfAssertTrue.fullname		="Use Assert Null Instead Of Assert True";
SimplifyBooleanAssertion.fullname				="Simplify Boolean Assertion";

// JAKARTA COMMONS LOGGING RULES
UseCorrectExceptionLogging.fullname	="Use Correct Exception Logging";
ProperLogger.fullname				="Proper Logger";

// JAVA LOGGING RULES
MoreThanOneLogger.fullname		="More Than One Logger";
LoggerIsNotStaticFinal.fullname	="Logger Is Not Static Final";
SystemPrintln.fullname			="System Println";
AvoidPrintStackTrace.fullname	="Avoid Print Stack Trace";

// MIGRATION RULES
ReplaceVectorWithList.fullname					="Replace Vector With List";
ReplaceHashtableWithMap.fullname				="Replace Hash table With Map";
ReplaceEnumerationWithIterator.fullname			="Replace Enumeration With Iterator";
AvoidEnumAsIdentifier.fullname					="Avoid Enum As Identifier";
AvoidAssertAsIdentifier.fullname				="Avoid Assert As Identifier";
IntegerInstantiation.fullname					="Integer Instantiation";
ByteInstantiation.fullname						="Byte Instantiation";
ShortInstantiation.fullname						="Short Instantiation";
LongInstantiation.fullname						="Long Instantiation";
JUnit4TestShouldUseBeforeAnnotation.fullname	="JUnit4 Test Should Use Before Annotation";
JUnit4TestShouldUseAfterAnnotation.fullname		="JUnit4 Test Should Use After Annotation";
JUnit4TestShouldUseTestAnnotation.fullname		="JUnit4 Test Should Use Test Annotation";
JUnit4SuitesShouldUseSuiteAnnotation.fullname	="JUnit4 Suites Should Use Suite Annotation";
JUnitUseExpected.fullname						="JUnit Use Expected";

// NAMING RULES
ShortVariable.fullname						="Short Variable";
LongVariable.fullname						="Long Variable";
ShortMethodName.fullname					="Short Method Name";
VariableNamingConventions.fullname			="Variable Naming Conventions";
MethodNamingConventions.fullname			="Method Naming Conventions";
ClassNamingConventions.fullname				="Class Naming Conventions";
AbstractNaming.fullname						="Abstract Naming";
AvoidDollarSigns.fullname					="Avoid Dollar Signs";
MethodWithSameNameAsEnclosingClass.fullname	="Method With Same Name As Enclosing Class";
SuspiciousHashcodeMethodName.fullname		="Suspicious Hashcode Method Name";
SuspiciousConstantFieldName.fullname		="Suspicious Constant Field Name";
SuspiciousEqualsMethodName.fullname			="Suspicious Equals Method Name";
AvoidFieldNameMatchingTypeName.fullname		="Avoid Field Name Matching Type Name";
AvoidFieldNameMatchingMethodName.fullname	="Avoid Field Name Matching Method Name";
NoPackage.fullname							="No Package";
PackageCase.fullname						="Package Case";
MisleadingVariableName.fullname				="Misleading Variable Name";
BooleanGetMethodName.fullname				="Boolean Get Method Name";

// OPTIMIZATION RULES
LocalVariableCouldBeFinal.fullname			="Local Variable Could Be Final";
MethodArgumentCouldBeFinal.fullname			="Method Argument Could Be Final";
AvoidInstantiatingObjectsInLoops.fullname	="Avoid Instantiating Objects In Loops";
UseArrayListInsteadOfVector.fullname		="Use ArrayList Instead Of Vector";
SimplifyStartsWith.fullname					="Simplify Starts With";
UseStringBufferForStringAppends.fullname	="Use String Buffer For String Appends";
UseArraysAsList.fullname					="Use Arrays As List";
AvoidArrayLoops.fullname					="Avoid Array Loops";
UnnecessaryWrapperObjectCreation.fullname	="Unnecessary Wrapper Object Creation";
AddEmptyString.fullname						="Add Empty String";

// STRICT EXCEPTION RULES
AvoidCatchingThrowable.fullname						="Avoid Catching Throwable";
SignatureDeclareThrowsException.fullname			="Signature Declare Throws Exception";
ExceptionAsFlowControl.fullname						="Exception As Flow Control";
AvoidCatchingNPE.fullname							="Avoid Catching NPE";
AvoidThrowingRawExceptionTypes.fullname				="Avoid Throwing Raw Exception Types";
AvoidThrowingNullPointerException.fullname			="Avoid Throwing Null Pointer Exception";
AvoidRethrowingException.fullname					="Avoid Rethrowing Exception";
DoNotExtendJavaLangError.fullname					="Do Not Extend JavaLang Error";
DoNotThrowExceptionInFinally.fullname				="Do Not Throw Exception In Finally";
AvoidThrowingNewInstanceOfSameException.fullname	="Avoid Throwing New Instance Of Same Exception";

// STRING AND STRINGBUFFER RULES
AvoidDuplicateLiterals.fullname					="Avoid Duplicate Literals";
StringInstantiation.fullname					="String Instantiation";
StringToString.fullname							="String To String";
InefficientStringBuffering.fullname				="Inefficient String Buffering";
UnnecessaryCaseChange.fullname					="Unnecessary Case Change";
UseStringBufferLength.fullname					="Use String Buffer Length";
AppendCharacterWithChar.fullname				="Append Character With Char";
ConsecutiveLiteralAppends.fullname				="Consecutive Literal Appends";
UseIndexOfChar.fullname							="Use Index Of Char";
InefficientEmptyStringCheck.fullname			="Inefficient Empty String Check";
InsufficientStringBufferDeclaration.fullname	="Insufficient String Buffer Declaration";
UselessStringValueOf.fullname					="Useless String Value Of";
StringBufferInstantiationWithChar.fullname		="String Buffer Instantiation With Char";
UseEqualsToCompareStrings.fullname				="Use Equals To Compare Strings";
AvoidStringBufferField.fullname					="Avoid String Buffer Field";

// SECURITY CODE GUIDELINES
MethodReturnsInternalArray.fullname	="Method Returns Internal Array";
ArrayIsStoredDirectly.fullname		="Array Is Stored Directly";

// TYPE RESOLUTION RULES
LooseCoupling.fullname						="Loose Coupling";
CloneMethodMustImplementCloneable.fullname	="Clone Method Must Implement Cloneable";
UnusedImports.fullname						="Unused Imports";
SignatureDeclareThrowsException.fullname	="Signature Declare Throws Exception";

// UNUSED CODE RULES
UnusedPrivateField.fullname		="Unused Private Field";
UnusedLocalVariable.fullname	="Unused Local Variable";
UnusedPrivateMethod.fullname	="Unused Private Method";
UnusedFormalParameter.fullname	="Unused Formal Parameter";

// ENOVIA MatrixOne Programming Guidelines
JavaClassMethodSizeCheck.fullname							="Java Class Method Size Check";
StaticVariableMayBeDeclaredAsFinal.fullname					="Static Variable May Be Declared As Final";
FinalVariableMustBeCapital.fullname							="Final Variable Must Be Capital";
UseNonSynchronizedOverSynchronizedDataStructure.fullname	="Use Non Synchronized Over Synchronized Data Structure";
RemoveDebugStatements.fullname								="Remove Debug Statements";
AvoidUsingStringTokenizer.fullname							="Avoid Using String Tokenizer";
PreferrablyUseDomainObject.fullname							="Preferrably Use Domain Object";
AvoidUseOfMQLCommandClass.fullname							="Avoid Use Of MQL Command Class";
JPONamingRule.fullname										="JPO Naming Rule";
JPOMethodTryCatchRule.fullname								="JPO Method Try Catch Rule";
AvoidStaticContextVariableRule.fullname						="Avoid Static Context Variable Rule";
UseGetFrameContextRule.fullname								="Use Get Frame Context Rule";
InitializeEmptyStringsRule.fullname							="Initialize Empty Strings Rule";
StringBufferConcatRule.fullname								="String Buffer Concat Rule";
SymbolicNameReference.fullname								="Symbolic Name Reference";
StringManipulation.fullname									="String Manipulation";
CheckVaultPatternInFindObjectsRule.fullname					="Check Vault Pattern In Find Objects Rule";
CheckRelTypePatternsInGetRelatedObjectsRule.fullname		="Check Rel Type Patterns In Get Related Objects Rule";
AvoidDBCallInsideLoopForTableColumnMethod.fullname			="Avoid DB Call Inside Loop For Table Column Method";
//*********************************************************************************************************************
// ERRORS DEFINITION ([ErrorLabel].definition)
//***************
// ANDROID RULES
CallSuperFirst.definition	="Super should be called at the start of the method.";
CallSuperLast.definition	="Super should be called at the end of the method.";
ProtectLogD.definition		="Log.d calls should be protected by checking Config.LOGD first.";
ProtectLogV.definition		="Log.v calls should be protected by checking Config.LOGV first.";

// BASIC JSF RULES
DontNestJsfInJstlIteration.definition	= "Do not nest JSF component custom actions inside a custom action that iterates over its body.";

// BASIC JSP RULES
NoLongScripts.definition				="Scripts should be part of Tag Libraries, rather than part of JSP pages.";
NoScriptlets.definition					="Scriptlets should be factored into Tag Libraries or JSP declarations, rather than being part of JSP pages.";
NoInlineStyleInformation.definition		="Style information should be put in CSS files, not in JSPs. Therefore, don't use <B> or <FONT> tags, or attributes like align='center'.";
NoClassAttribute.definition				="Do not use an attribute called 'class'. Use \"styleclass\" for CSS styles";
NoJspForward.definition					="Do not do a forward from within a JSP file";
IframeMissingSrcAttribute.definition	="IFrames which are missing a src element can cause security information popups in IE if you are accessing the page through SSL.<br>See <a href=\"http://support.microsoft.com/default.aspx?scid=kb;EN-US;Q261188\" target=\"_blank\">Support Microsoft</A> for more information.";
NoHtmlComments.definition				="In a production system, HTML comments increase the payload between the application server to the client, and serve little other purpose. Consider switching to JSP comments.";
DuplicateJspImports.definition			="Avoid duplicate import statements inside JSP's.";
JspEncoding.definition					="A missing 'meta' tag or page directive will trigger this rule, as well as a non-UTF-8 charset.";

// BASIC RULES
EmptyCatchBlock.definition								="Empty Catch Block finds instances where an exception is caught, but nothing is done.<br>In most circumstances, this swallows an exception which should either be acted on or reported.";
EmptyIfStmt.definition									="Empty If Statement finds instances where a condition is checked but nothing is done about it.";
EmptyWhileStmt.definition								="Empty While Statement finds all instances where a while statement does nothing.<br>If it is a timing loop, then you should use Thread.sleep() for it;<br>if it's a while loop that does a lot in the exit expression, rewrite it to make it clearer.";
EmptyTryBlock.definition								="Avoid empty try blocks - what's the point?";
EmptyFinallyBlock.definition							="Avoid empty finally blocks - these can be deleted.";
EmptySwitchStatements.definition						="Avoid empty switch statements.";
JumbledIncrementer.definition							="Avoid jumbled loop incrementers - it's usually a mistake, and it's confusing even if it's what's intended.";
ForLoopShouldBeWhileLoop.definition						="Some for loops can be simplified to while loops - this makes them more concise.";
UnnecessaryConversionTemporary.definition				="Avoid unnecessary temporaries when converting primitives to Strings";
OverrideBothEqualsAndHashcode.definition				="Override both public boolean Object.equals(Object other), and public int Object.hashCode(), or override neither.<br>Even if you are inheriting a hashCode() from a parent class, consider implementing hashCode and explicitly delegating to your superclass.";
DoubleCheckedLocking.definition							="Partially created objects can be returned by the Double Checked Locking pattern when used in Java.<br>An optimizing JRE may assign a reference to the baz variable before it creates the object the reference is intended to point to.<br>For more details see <a href=\"http://www.javaworld.com/javaworld/jw-02-2001/jw-0209-double.html\" target=\"_blank\">JavaWorld</A>.";
ReturnFromFinallyBlock.definition						="Avoid returning from a finally block - this can discard exceptions.";
EmptySynchronizedBlock.definition						="Avoid empty synchronized blocks - they're useless.";
UnnecessaryReturn.definition							="Avoid unnecessary return statements.";
EmptyStaticInitializer.definition						="An empty static initializer was found.";
UnconditionalIfStatement.definition						="Do not use \"if\" statements that are always true or always false.";
EmptyStatementNotInLoop.definition						="An empty statement (aka a semicolon by itself) that is not used as the sole body of a for loop or while loop is probably a bug.<br>It could also be a double semicolon, which is useless and should be removed.";
BooleanInstantiation.definition							="Avoid instantiating Boolean objects; you can reference Boolean.TRUE, Boolean.FALSE, or call Boolean.valueOf() instead.";
UnnecessaryFinalModifier.definition						="When a class has the final modifier, all the methods are automatically final.";
CollapsibleIfStatements.definition						="Sometimes two 'if' statements can be consolidated by separating their conditions with a boolean short-circuit operator.";
UselessOverridingMethod.definition						="The overriding method merely calls the same method defined in a superclass.";
ClassCastExceptionWithToArray.definition				="if you need to get an array of a class from your Collection, you should pass an array of the desidered class as the parameter of the toArray method.<br>Otherwise you will get a ClassCastException.";
AvoidDecimalLiteralsInBigDecimalConstructor.definition	="One might assume that \"new BigDecimal(.1)\" is exactly equal to .1, but it is actually equal to .1000000000000000055511151231257827021181583404541015625.<br>This is so because .1 cannot be represented exactly as a double (or, for that matter, as a binary fraction of any finite length).<br>Thus, the long value that is being passed in to the constructor is not exactly equal to .1, appearances notwithstanding. The (String) constructor, on the other hand, is perfectly predictable: 'new BigDecimal(\".1\")' is exactly equal to .1, as one would expect.<br>Therefore, it is generally recommended that the (String) constructor be used in preference to this one.";
UselessOperationOnImmutable.definition					="An operation on an Immutable object (String, BigDecimal or BigInteger) won't change the object itself. The result of the operation is a new object.<br>Therefore, ignoring the operation result is an error.";
MisplacedNullCheck.definition							="The null check here is misplaced. if the variable is null you'll get a NullPointerException.<br>Either the check is useless (the variable will never be \"null\") or it's incorrect.";
UnusedNullCheckInEquals.definition						="After checking an object reference for null, you should invoke equals() on that object rather than passing it to another object's equals() method.";
AvoidThreadGroup.definition								="Avoid using ThreadGroup; although it is intended to be used in a threaded environment it contains methods that are not thread safe.";
BrokenNullCheck.definition								="The null check is broken since it will throw a NullPointerException itself. It is likely that you used || instead of && or vice versa.";
BigIntegerInstantiation.definition						="Don't create instances of already existing BigInteger (BigInteger.ZERO, BigInteger.ONE) and for 1.5 on, BigInteger.TEN and BigDecimal (BigDecimal.ZERO, BigDecimal.ONE, BigDecimal.TEN)";
AvoidUsingOctalValues.definition						="Integer literals should not start with zero. Zero means that the rest of literal will be interpreted as an octal value.";
AvoidUsingHardCodedIP.definition						="An application with hard coded IP may become impossible to deploy in some case. It never hurts to externalize IP adresses.";
CheckResultSet.definition								="Always check the return of one of the navigation method (next,previous,first,last) of a ResultSet. Indeed, if the value return is 'false', the developer should deal with it !";
AvoidMultipleUnaryOperators.definition					="Using multiple unary operators may be a bug, and/or is confusing. Check the usage is not a bug, or consider simplifying the expression.";
EmptyInitializer.definition								="An empty initializer was found.";

// BRACES RULES
IfStmtsMustUseBraces.definition		="Avoid using if statements without using curly braces.";
WhileLoopsMustUseBraces.definition	="Avoid using 'while' statements without using curly braces. ";
IfElseStmtsMustUseBraces.definition	="Avoid using if..else statements without using curly braces.";
ForLoopsMustUseBraces.definition	="Avoid using 'for' statements without using curly braces.";

// CLONE IMPLEMENTATION RULES
ProperCloneImplementation.definition				="Object clone() should be implemented with super.clone().";
CloneThrowsCloneNotSupportedException.definition	="The method clone() should throw a CloneNotSupportedException.";
CloneMethodMustImplementCloneable.definition		="The method clone() should only be implemented if the class implements the Cloneable interface with the exception of a final method that only throws CloneNotSupportedException.";

// CODE SIZE RULES
NPathComplexity.definition			="The NPath complexity of a method is the number of acyclic execution paths through that method.<br>A threshold of 200 is generally considered the point where measures should be taken to reduce complexity.";
ExcessiveMethodLength.definition	="Violations of this rule usually indicate that the method is doing too much. Try to reduce the method size by creating helper methods and removing any copy/pasted code.";
ExcessiveParameterList.definition	="Long parameter lists can indicate that a new object should be created to wrap the numerous parameters. Basically, try to group the parameters together.";
ExcessiveClassLength.definition		="Long Class files are indications that the class may be trying to do too much. Try to break it down, and reduce the size to something manageable.";
CyclomaticComplexity.definition		="Complexity is determined by the number of decision points in a method plus one for the method entry. The decision points are 'if', 'while', 'for', and 'case labels'.<br>Generally, 1-4 is low complexity, 5-7 indicates moderate complexity, 8-10 is high complexity, and 11+ is very high complexity.";
ExcessivePublicCount.definition		="A large number of public methods and attributes declared in a class can indicate the class may need to be broken up as increased effort will be required to thoroughly test it.";
TooManyFields.definition			="Classes that have too many fields could be redesigned to have fewer fields, possibly through some nested object grouping of some of the information.<br>For example, a class with city/state/zip fields could instead have one Address field.";
NcssMethodCount.definition			="This rule uses the NCSS (Non Commenting Source Statements) algorithm to determine the number of lines of code for a given method.<br>NCSS ignores comments, and counts actual statements.<br>Using this algorithm, lines of code that are split are counted as one.";
NcssTypeCount.definition			="This rule uses the NCSS (Non Commenting Source Statements) algorithm to determine the number of lines of code for a given type.<br>NCSS ignores comments, and counts actual statements.<br>Using this algorithm, lines of code that are split are counted as one.";
NcssConstructorCount.definition		="This rule uses the NCSS (Non Commenting Source Statements) algorithm to determine the number of lines of code for a given constructor.<br>NCSS ignores comments, and counts actual statements.<br>Using this algorithm, lines of code that are split are counted as one.";
TooManyMethods.definition			="A class with too many methods is probably a good suspect for refactoring, in order to reduce its complexity and find a way to have more fine grained objects.";

// CONTROVERSAL RULES
UnnecessaryConstructor.definition				="This rule detects when a constructor is not necessary; i.e., when there's only one constructor, it's public, has an empty body, and takes no arguments.";
NullAssignment.definition						="Assigning a \"null\" to a variable (outside of its declaration) is usually bad form.<br>Sometimes, the assignment is an indication that the programmer doesn't completely understand what is going on in the code.<br>NOTE: This sort of assignment may in rare cases be useful to encourage garbage collection.<br>If that's what you're using it for, by all means, disregard this rule :-)";
OnlyOneReturn.definition						="A method should have only one exit point, and that should be the last statement in the method.";
UnusedModifier.definition						="Fields in interfaces are automatically public static final, and methods are public abstract.<br>Classes or interfaces nested in an interface are automatically public and static (all nested interfaces are automatically static).<br>For historical reasons, modifiers which are implied by the context are accepted by the compiler, but are superfluous.";
AssignmentInOperand.definition					="Avoid assignments in operands; this can make code more complicated and harder to read.";
AtLeastOneConstructor.definition				="Each class should declare at least one constructor.";
DontImportSun.definition						="Avoid importing anything from the 'sun.*' packages. These packages are not portable and are likely to change.";
SuspiciousOctalEscape.definition				="A suspicious octal escape sequence was found inside a String literal.<br>The Java language specification (section 3.10.6) says an octal escape sequence inside a literal String shall consist of a backslash followed by: OctalDigit | OctalDigit OctalDigit | ZeroToThree OctalDigit OctalDigit.<br>Any octal escape sequence followed by non-octal digits can be confusing, e.g. \"\038\" is interpreted as the octal escape sequence \"\03\" followed by the literal character \"8\".";
CallSuperInConstructor.definition				="It is a good practice to call super() in a constructor.<br>If super() is not called but another constructor (such as an overloaded constructor) is called, this rule will not report it.";
UnnecessaryParentheses.definition				="Sometimes expressions are wrapped in unnecessary parentheses, making them look like a function call.";
DefaultPackage.definition						="Use explicit scoping instead of the default package private level.";
BooleanInversion.definition						="Use bitwise inversion to invert boolean values - it's the fastest way to do this.<br>See <a href=\"http://www.javaspecialists.co.za/archive/newsletter.do?issue=042&locale=en_US\" target=\"_blank\">Java Specialists</A> for specific details.";
DataflowAnomalyAnalysis.definition				="The dataflow analysis tracks local definitions, undefinitions and references to variables on different paths on the data flow.<br>From those informations there can be found various problems. 1.<br>UR - Anomaly: There is a reference to a variable that was not defined before. This is a bug and leads to an error.<br>2. DU - Anomaly: A recently defined variable is undefined. These anomalies may appear in normal source text.<br>3. DD - Anomaly: A recently defined variable is redefined. This is ominous but don't have to be a bug.";
AvoidFinalLocalVariable.definition				="Avoid using final local variables, turn them into fields.";
AvoidUsingShortType.definition					="Java uses the 'short' type to reduce memory usage, not to optimize calculation.<br>In fact, the jvm does not have any arithmetic capabilities for the short type: the jvm must convert the short into an int, do the proper caculation and convert the int back to a short.<br>So, the use of the 'short' type may have a greater impact than memory usage.";
AvoidUsingVolatile.definition					="Use of the keyword 'volatile' is general used to fine tune a Java application, and therefore, requires a good expertise of the Java Memory Model.<br>Moreover, its range of action is somewhat misknown.<br>Therefore, the volatile keyword should not be used for maintenance purpose and portability.";
AvoidUsingNativeCode.definition					="As JVM and Java language offer already many help in creating application, it should be very rare to have to rely on non-java code.<br>Even though, it is rare to actually have to use Java Native Interface (JNI).<br>As the use of JNI make application less portable, and harder to maintain, it is not recommended.";
AvoidAccessibilityAlteration.definition			="Methods such as getDeclaredConstructors(), getDeclaredConstructor(Class[]) and setAccessible(), as the interface PrivilegedAction, allow to alter, at runtime, the visilibilty of variable, classes, or methods, even if they are private.<br>Obviously, no one should do so, as such behavior is against everything encapsulation principal stands for.";
DoNotCallGarbageCollectionExplicitly.definition	="Calls to System.gc(), Runtime.getRuntime().gc(), and System.runFinalization() are not advised.<br>Code should have the same behavior whether the garbage collection is disabled using the option -Xdisableexplicitgc or not.<br>Moreover, \"modern\" jvms do a very good job handling garbage collections.<br>If memory usage issues unrelated to memory leaks develop within an application, it should be dealt with JVM options rather than within the code itself.";

// COUPLING RULES
CouplingBetweenObjects.definition	="This rule counts unique attributes, local variables and return types within an object. A number higher than specified threshold can indicate a high degree of coupling.";
ExcessiveImports.definition			="A high number of imports can indicate a high degree of coupling within an object. Rule counts the number of unique imports and reports a violation if the count is above the user defined threshold.";
LooseCoupling.definition			="Avoid using implementation types (i.e., HashSet); use the interface (i.e, Set) instead.";

// DESIGN RULES
UseSingleton.definition										="If you have a class that has nothing but static methods, consider making it a Singleton. Note that this doesn't apply to abstract classes, since their subclasses may well include non-static methods.<br>Also, if you want this class to be a Singleton, remember to add a private constructor to prevent instantiation.";
SimplifyBooleanReturns.definition							="Avoid unnecessary if..then..else statements when returning a boolean.";
SimplifyBooleanExpressions.definition						="Avoid unnecessary comparisons in boolean expressions - this complicates simple code.";
SwitchStmtsShouldHaveDefault.definition						="Switch statements should have a default label.";
AvoidDeeplyNestedIfStmts.definition							="Deeply nested if..then statements are hard to read.";
AvoidReassigningParameters.definition						="Reassigning values to parameters is a questionable practice. Use a temporary local variable instead.";
SwitchDensity.definition									="A high ratio of statements to labels in a switch statement implies that the switch statement is doing too much work.<br>Consider moving the statements into new methods, or creating subclasses based on the switch variable.";
ConstructorCallsOverridableMethod.definition				="Calling overridable methods during construction poses a risk of invoking methods on an incompletely constructed object and can be difficult to discern.<br>It may leave the sub-class unable to construct its superclass or forced to replicate the construction process completely within itself, losing the ability to call super().<br>If the default constructor contains a call to an overridable method, the subclass may be completely uninstantiable.<br>Note that this includes method calls throughout the control flow graph - i.e., if a constructor Foo() calls a private method bar() that calls a public method buz(), this denotes a problem.";
AccessorClassGeneration.definition							="Instantiation by way of private constructors from outside of the constructor's class often causes the generation of an accessor.<br>A factory method, or non-privitization of the constructor can eliminate this situation. The generated class file is actually an interface.<br>It gives the accessing class the ability to invoke a new hidden package scope constructor that takes the interface as a supplementary parameter. This turns a private constructor effectively into one with package scope, and is challenging to discern.";
FinalFieldCouldBeStatic.definition							="If a final field is assigned to a compile-time constant, it could be made static, thus saving overhead in each object at runtime.";
CloseResource.definition									="Ensure that resources (like Connection, Statement, and ResultSet objects) are always closed after use.";
NonStaticInitializer.definition								="A nonstatic initializer block will be called any time a constructor is invoked (just prior to invoking the constructor). While this is a valid language construct, it is rarely used and is confusing.";
DefaultLabelNotLastInSwitchStmt.definition					="By convention, the default label should be the last label in a switch statement.";
NonCaseLabelInSwitchStatement.definition					="A non-case label (e.g. a named break/continue label) was present in a switch statement. This legal, but confusing. It is easy to mix up the case labels and the non-case labels.";
OptimizableToArrayCall.definition							="A call to Collection.toArray can use the Collection's size vs an empty Array of the desired type.";
BadComparison.definition									="Avoid equality comparisons with Double.NaN - these are likely to be logic errors.";
EqualsNull.definition										="Inexperienced programmers sometimes confuse comparison concepts and use equals() to compare to null.";
ConfusingTernary.definition									="In an \"if\" expression with an \"else\" clause, avoid negation in the test. For example, rephrase:<br>if (x != y) diff(); else same();<br>as: if (x == y) same(); else diff();<br>Most \"if (x != y)\" cases without an \"else\" are often return cases, so consistent use of this rule makes the code easier to read.<br>Also, this resolves trivial ordering problems, such as \"does the error case go first?\" or \"does the common case go first?\".";
InstantiationToGetClass.definition							="Avoid instantiating an object just to call getClass() on it; use the .class public member instead.";
IdempotentOperations.definition								="Avoid idempotent operations - they are have no effect.";
SimpleDateFormatNeedsLocale.definition						="Be sure to specify a Locale when creating a new instance of SimpleDateFormat.";
ImmutableField.definition									="Identifies private fields whose values never change once they are initialized either in the declaration of the field or by a constructor.<br>This aids in converting existing classes to immutable classes.";
UseLocaleWithCaseConversions.definition						="When doing a String.toLowerCase()/toUpperCase() call, use a Locale. This avoids problems with certain locales, i.e. Turkish.";
AvoidProtectedFieldInFinalClass.definition					="Do not use protected fields in final classes since they cannot be subclassed. Clarify your intent by using private or package access modifiers instead.";
AssignmentToNonFinalStatic.definition						="Identifies a possible unsafe usage of a static field.";
MissingStaticMethodInNonInstantiatableClass.definition		="A class that has private constructors and does not have any static methods or fields cannot be used.";
AvoidSynchronizedAtMethodLevel.definition					="Method level synchronization can backfire when new code is added to the method. Block-level synchronization helps to ensure that only the code that needs synchronization gets it.";
MissingBreakInSwitch.definition								="A switch statement without an enclosed break statement may be a bug.";
UseNotifyAllInsteadOfNotify.definition						="Thread.notify() awakens a thread monitoring the object. If more than one thread is monitoring, then only one is chosen.<br>The thread chosen is arbitrary; thus it's usually safer to call notifyAll() instead.";
AvoidInstanceofChecksInCatchClause.definition				="Each caught exception type should be handled in its own catch clause.";
AbstractClassWithoutAbstractMethod.definition				="The abstract class does not contain any abstract methods. An abstract class suggests an incomplete implementation, which is to be completed by subclasses implementing the abstract methods.<br>If the class is intended to be used as a base class only (not to be instantiated direcly) a protected constructor can be provided prevent direct instantiation.";
SimplifyConditional.definition								="No need to check for null before an instanceof; the instanceof keyword returns false when given a null argument.";
CompareObjectsWithEquals.definition							="Use equals() to compare object references; avoid comparing them with ==.";
PositionLiteralsFirstInComparisons.definition				="Position literals first in String comparisons - that way if the String is null you won't get a NullPointerException, it'll just return false.";
UnnecessaryLocalBeforeReturn.definition						="Avoid unnecessarily creating local variables.";
NonThreadSafeSingleton.definition							="Non-thread safe singletons can result in bad state changes. Eliminate static singletons if possible by instantiating the object directly.<br>Static singletons are usually not needed as only a single instance exists anyway.<br>Other possible fixes are to synchronize the entire method or to use an initialize-on-demand holder class (do not use the double-check idiom).<br>See Effective Java, item 48.";
UncommentedEmptyMethod.definition							="Uncommented Empty Method finds instances where a method does not contain statements, but there is no comment. By explicitly commenting empty methods it is easier to distinguish between intentional (commented) and unintentional empty methods.";
UncommentedEmptyConstructor.definition						="Uncommented Empty Constructor finds instances where a constructor does not contain statements, but there is no comment. By explicitly commenting empty constructors it is easier to distinguish between intentional (commented) and unintentional empty constructors.";
AvoidConstantsInterface.definition							="An interface should be used only to model a behaviour of a class: using an interface as a container of constants is a poor usage pattern.";
UnsynchronizedStaticDateFormatter.definition				="SimpleDateFormat is not synchronized. Sun recomends separate format instances for each thread. If multiple threads must access a static formatter, the formatter must be synchronized either on method or block level.";
PreserveStackTrace.definition								="Throwing a new exception from a catch block without passing the original exception into the new exception will cause the true stack trace to be lost, and can make it difficult to debug effectively.";
UseCollectionIsEmpty.definition								="The isEmpty() method on java.util.Collection is provided to see if a collection has any elements. Comparing the value of size() to 0 merely duplicates existing behavior.";
ClassWithOnlyPrivateConstructorsShouldBeFinal.definition	="A class with only private constructors should be final, unless the private constructor is called by a inner class.";
EmptyMethodInAbstractClassShouldBeAbstract.definition		="An empty method in an abstract class should be abstract instead, as developer may rely on this empty implementation rather than code the appropriate one.";
SingularField.definition									="This field is used in only one method and the first usage is assigning a value to the field. This probably means that the field can be changed to a local variable.";
ReturnEmptyArrayRatherThanNull.definition					="For any method that returns an array, it's a better behavior to return an empty array rather than a null reference.";
AbstractClassWithoutAnyMethod.definition					="If the abstract class does not provides any methods, it may be just a data container that is not to be instantiated. In this case, it's probably better to use a private or a protected constructor in order to prevent instantiation than make the class misleadingly abstract.";
TooFewBranchesForASwitchStatement.definition				="Swith are designed complex branches, and allow branches to share treatement. Using a switch for only a few branches is ill advised, as switches are not as easy to understand as if. In this case, it's most likely is a good idea to use a if statement instead, at least to increase code readability.";

// FINALIZER RULES
EmptyFinalizer.definition						="If the finalize() method is empty, then it does not need to exist.";
FinalizeOnlyCallsSuperFinalize.definition		="If the finalize() is implemented, it should do something besides just calling super.finalize().";
FinalizeOverloaded.definition					="Methods named finalize() should not have parameters. It is confusing and probably a bug to overload finalize(). It will not be called by the VM.";
FinalizeDoesNotCallSuperFinalize.definition		="If the finalize() is implemented, its last action should be to call super.finalize.";
FinalizeShouldBeProtected.definition			="If you override finalize(), make it protected. If you make it public, other classes may call it.";
AvoidCallingFinalize.definition					="Object.finalize() is called by the garbage collector on an object when garbage collection determines that there are no more references to the object. ";

// IMPORT STATEMENT RULES
DuplicateImports.definition			="Avoid duplicate import statements.";
DontImportJavaLang.definition		="Avoid importing anything from the package 'java.lang'. These classes are automatically imported (JLS 7.5.3).";
UnusedImports.definition			=" Avoid unused import statements.";
ImportFromSamePackage.definition	="No need to import a type that lives in the same package.";
TooManyStaticImports.definition		="If you overuse the static import feature, it can make your program unreadable and unmaintainable, polluting its namespace with all the static members you import. Readers of your code (including you, a few months after you wrote it) will not know which class a static member comes from (Sun 1.5 Language Guide). ";

// J2EE RULES
UseProperClassLoader.definition						="In J2EE getClassLoader() might not work as expected. Use Thread.currentThread().getContextClassLoader() instead.";
MDBAndSessionBeanNamingConvention.definition		="The EJB Specification state that any MessageDrivenBean or SessionBean should be suffixed by Bean.";
RemoteSessionInterfaceNamingConvention.definition	="Remote Home interface of a Session EJB should be suffixed by 'Home'.";
LocalInterfaceSessionNamingConvention.definition	="The Local Interface of a Session EJB should be suffixed by 'Local'.";
LocalHomeNamingConvention.definition				="The Local Home interface of a Session EJB should be suffixed by 'LocalHome'.";
RemoteInterfaceNamingConvention.definition			="Remote Interface of a Session EJB should NOT be suffixed.";
DoNotCallSystemExit.definition						="Web applications should not call System.exit(), since only the web container or the application server should stop the JVM.";
StaticEJBFieldShouldBeFinal.definition				="According to the J2EE specification (p.494), an EJB should not have any static fields with write access. However, static read only fields are allowed.<br>This ensures proper behavior especially when instances are distributed by the container on several JREs.";
DoNotUseThreads.definition							="The J2EE specification explicitly forbid use of threads.";

// JAVA BEAN RULES
BeanMembersShouldSerialize.definition	="If a class is a bean, or is referenced by a bean directly or indirectly it needs to be serializable. Member variables need to be marked as transient, static, or have accessor methods in the class.<br>Marking variables as transient is the safest and easiest modification. Accessor methods should follow the Java naming conventions, i.e.if you have a variable foo, you should provide getFoo and setFoo methods.";
MissingSerialVersionUID.definition		="Classes that are serializable should provide a serialVersionUID field.";

// JUNIT RULES
JUnitStaticSuite.definition						="The suite() method in a JUnit test needs to be both public and static.";
JUnitSpelling.definition						="Some JUnit framework methods are easy to misspell.";
JUnitAssertionsShouldIncludeMessage.definition	="JUnit assertions should include a message - i.e., use the three argument version of assertEquals(), not the two argument version.";
JUnitTestsShouldIncludeAssert.definition		="JUnit tests should include at least one assertion. This makes the tests more robust, and using assert with messages provide the developer a clearer idea of what the test does.";
TestClassWithoutTestCases.definition			="Test classes end with the suffix Test. Having a non-test class with that name is not a good practice, since most people will assume it is a test case.<br>Test classes have test methods named testXXX.";
UnnecessaryBooleanAssertion.definition			="A JUnit test assertion with a boolean literal is unnecessary since it always will eval to the same thing. Consider using flow control (in case of assertTrue(false) or similar) or simply removing statements like assertTrue(true) and assertFalse(false).<br>If you just want a test to halt, use the fail method.";
UseAssertEqualsInsteadOfAssertTrue.definition	="This rule detects JUnit assertions in object equality. These assertions should be made by more specific methods, like assertEquals.";
UseAssertSameInsteadOfAssertTrue.definition		="This rule detects JUnit assertions in object references equality. These assertions should be made by more specific methods, like assertSame, assertNotSame.";
UseAssertNullInsteadOfAssertTrue.definition		="This rule detects JUnit assertions in object references equality. These assertions should be made by more specific methods, like assertNull, assertNotNull.";
SimplifyBooleanAssertion.definition				="Avoid negation in an assertTrue or assertFalse test. For example, rephrase: assertTrue(!expr); as: assertFalse(expr);"; 

// JAKARTA COMMONS LOGGING RULES
UseCorrectExceptionLogging.definition	="To make sure the full stacktrace is printed out, use the logging statement with 2 arguments: a String and a Throwable.";
ProperLogger.definition					="A logger should normally be defined private static final and have the correct class.<br>Private final Log log; is also allowed for rare cases where loggers need to be passed around, with the restriction that the logger needs to be passed into the constructor."; 

// JAVA LOGGING RULES
MoreThanOneLogger.definition		="Normally only one logger is used in each class.";
LoggerIsNotStaticFinal.definition	="In most cases, the Logger can be declared static and final.";
SystemPrintln.definition			="System.(out|err).print is used, consider using a logger.";
AvoidPrintStackTrace.definition		="Avoid printStackTrace(); use a logger call instead.";

// MIGRATION RULES
ReplaceVectorWithList.definition				="Consider replacing Vector usages with the newer java.util.ArrayList if expensive threadsafe operation is not required.";
ReplaceHashtableWithMap.definition				="Consider replacing this Hashtable with the newer java.util.Map";
ReplaceEnumerationWithIterator.definition		="Consider replacing this Enumeration with the newer java.util.Iterator.";
AvoidEnumAsIdentifier.definition				="Finds all places where 'enum' is used as an identifier.";
AvoidAssertAsIdentifier.definition				="Finds all places where 'assert' is used as an identifier.";
IntegerInstantiation.definition					="In JDK 1.5, calling new Integer() causes memory allocation. Integer.valueOf() is more memory friendly.";
ByteInstantiation.definition					="In JDK 1.5, calling new Byte() causes memory allocation. Byte.valueOf() is more memory friendly.";
ShortInstantiation.definition					="In JDK 1.5, calling new Short() causes memory allocation. Short.valueOf() is more memory friendly.";
LongInstantiation.definition					="In JDK 1.5, calling new Long() causes memory allocation. Long.valueOf() is more memory friendly.";
JUnit4TestShouldUseBeforeAnnotation.definition	="In JUnit 3, the setUp method was used to set up all data entities required in running tests.<br>JUnit 4 skips the setUp method and executes all methods annotated with @Before before all tests.";
JUnit4TestShouldUseAfterAnnotation.definition	="In JUnit 3, the tearDown method was used to clean up all data entities required in running tests.<br>JUnit 4 skips the tearDown method and executes all methods annotated with @After after running each test.";
JUnit4TestShouldUseTestAnnotation.definition	="In JUnit 3, the framework executed all methods which started with the word test as a unit test.<br>In JUnit 4, only methods annotated with the @Test annotation are executed.";
JUnit4SuitesShouldUseSuiteAnnotation.definition	="In JUnit 3, test suites are indicated by the suite() method.<br>In JUnit 4, suites are indicated through the @RunWith(Suite.class) annotation.";
JUnitUseExpected.definition						="";

// NAMING RULES
ShortVariable.definition						="Detects when a field, local, or parameter has a very short name.";
LongVariable.definition							="Detects when a field, formal or local variable is declared with a long name.";
ShortMethodName.definition						="Detects when very short method names are used.";
VariableNamingConventions.definition			="A variable naming conventions rule - customize this to your liking. Currently, it checks for final variables that should be fully capitalized and non-final variables that should not include underscores.";
MethodNamingConventions.definition				="Method names should always begin with a lower case character, and should not contain underscores.";
ClassNamingConventions.definition				="Class names should always begin with an upper case character.";
AbstractNaming.definition						="Abstract classes should be named 'AbstractXXX'.";
AvoidDollarSigns.definition						="Avoid using dollar signs in variable/method/class/interface names.";
MethodWithSameNameAsEnclosingClass.definition	="Non-constructor methods should not have the same name as the enclosing class.";
SuspiciousHashcodeMethodName.definition			="The method name and return type are suspiciously close to hashCode(), which may mean you are intending to override the hashCode() method.";
SuspiciousConstantFieldName.definition			="A field name is all in uppercase characters, which in Sun's Java naming conventions indicate a constant. However, the field is not final.";
SuspiciousEqualsMethodName.definition			="The method name and parameter number are suspiciously close to equals(Object), which may mean you are intending to override the equals(Object) method.";
AvoidFieldNameMatchingTypeName.definition		="It is somewhat confusing to have a field name matching the declaring class name. This probably means that type and or field names could be more precise.";
AvoidFieldNameMatchingMethodName.definition		="It is somewhat confusing to have a field name with the same name as a method. While this is totally legal, having information (field) and actions (method) is not clear naming.";
NoPackage.definition							="Detects when a class or interface does not have a package definition.";
PackageCase.definition							="Detects when a package definition contains upper case characters.";
MisleadingVariableName.definition				="Detects when a non-field has a name starting with 'm_'. This usually indicates a field and thus is confusing.";
BooleanGetMethodName.definition					="Looks for methods named 'getX()' with 'boolean' as the return type. The convention is to name these methods 'isX()'.";

// OPTIMIZATION RULES
LocalVariableCouldBeFinal.definition		="A local variable assigned only once can be declared final.";
MethodArgumentCouldBeFinal.definition		="A method argument that is never assigned can be declared final.";
AvoidInstantiatingObjectsInLoops.definition	="Detects when a new object is created inside a loop.";
UseArrayListInsteadOfVector.definition		="ArrayList is a much better Collection implementation than Vector.";
SimplifyStartsWith.definition				="Since it passes in a literal of length 1, this call to String.startsWith can be rewritten using String.charAt(0) to save some time.";
UseStringBufferForStringAppends.definition	="Finds usages of += for appending strings.";
UseArraysAsList.definition					="The java.util.Arrays class has a \"asList\" method that should be used when you want to create a new List from an array of objects.<br>It is faster than executing a loop to copy all the elements of the array one by one.";
AvoidArrayLoops.definition					="Instead of copying data between two arrays, use System.arraycopy method.";
UnnecessaryWrapperObjectCreation.definition	="Parsing method should be called directy instead.";
AddEmptyString.definition					="Finds empty string literals which are being added. This is an inefficient way to convert any type to a String.";

// STRICT EXCEPTION RULES
AvoidCatchingThrowable.definition					="This is dangerous because it casts too wide a net; it can catch things like OutOfMemoryError.";
SignatureDeclareThrowsException.definition			="It is unclear which exceptions that can be thrown from the methods. It might be difficult to document and understand the vague interfaces.<br>Use either a class derived from RuntimeException or a checked exception.";
ExceptionAsFlowControl.definition					="Using Exceptions as flow control leads to GOTOish code and obscures true exceptions when debugging.";
AvoidCatchingNPE.definition							="Code should never throw NPE under normal circumstances. A catch block may hide the original error, causing other more subtle errors in its wake.";
AvoidThrowingRawExceptionTypes.definition			="Avoid throwing certain exception types. Rather than throw a raw RuntimeException, Throwable, Exception, or Error, use a subclassed exception or error instead.";
AvoidThrowingNullPointerException.definition		="Avoid throwing a NullPointerException - it's confusing because most people will assume that the virtual machine threw it.<br>Consider using an IllegalArgumentException instead; this will be clearly seen as a programmer-initiated exception.";
AvoidRethrowingException.definition					="Catch blocks that merely rethrow a caught exception only add to code size and runtime complexity.";
DoNotExtendJavaLangError.definition					="Errors are system exceptions. Do not extend them.";
DoNotThrowExceptionInFinally.definition				="Throwing exception in a finally block is confusing. It may mask exception or a defect of the code, it also render code cleanup uninstable.<br>Note: This is a PMD implementation of the Lint4j rule \"A throw in a finally block\".";
AvoidThrowingNewInstanceOfSameException.definition	="Catch blocks that merely rethrow a caught exception wrapped inside a new instance of the same type only add to code size and runtime complexity."; 

// STRING AND STRINGBUFFER RULES
AvoidDuplicateLiterals.definition				="Code containing duplicate String literals can usually be improved by declaring the String as a constant field.";
StringInstantiation.definition					="Avoid instantiating String objects; this is usually unnecessary.";
StringToString.definition						="Avoid calling toString() on String objects; this is unnecessary.";
InefficientStringBuffering.definition			="Avoid concatenating non literals in a StringBuffer constructor or append().";
UnnecessaryCaseChange.definition				="Using equalsIgnoreCase() is faster than using toUpperCase/toLowerCase().equals().";
UseStringBufferLength.definition				="Use StringBuffer.length() to determine StringBuffer length rather than using StringBuffer.toString().equals(\"\") or StringBuffer.toString().length() ==.";
AppendCharacterWithChar.definition				="Avoid concatenating characters as strings in StringBuffer.append.";
ConsecutiveLiteralAppends.definition			="Consecutively calling StringBuffer.append with String literals.";
UseIndexOfChar.definition						="Use String.indexOf(char) when checking for the index of a single character; it executes faster.";
InefficientEmptyStringCheck.definition			="String.trim().length() is an inefficient way to check if a String is really empty, as it creates a new String object just to check its size.<br>Consider creating a static function that loops through a string, checking Character.isWhitespace() on each character and returning false if a non-whitespace character is found.";
InsufficientStringBufferDeclaration.definition	="Failing to pre-size a StringBuffer properly could cause it to re-size many times during runtime. This rule checks the characters that are actually passed into StringBuffer.append(), but represents a best guess \"worst case\" scenario.<br>An empty StringBuffer constructor initializes the object to 16 characters. This default is assumed if the length of the constructor can not be determined.";
UselessStringValueOf.definition					="No need to call String.valueOf to append to a string; just use the valueOf() argument directly.";
StringBufferInstantiationWithChar.definition	="StringBuffer sb = new StringBuffer('c'); The char will be converted into int to intialize StringBuffer size.";
UseEqualsToCompareStrings.definition			="Using '==' or '!=' to compare strings only works if intern version is used on both sides.";
AvoidStringBufferField.definition				="StringBuffers can grow quite a lot, and so may become a source of memory leak (if the owning class has a long life time).";

// SECURITY CODE GUIDELINES
MethodReturnsInternalArray.definition	="Exposing internal arrays directly allows the user to modify some code that could be critical. It is safer to return a copy of the array.";
ArrayIsStoredDirectly.definition		="Constructors and methods receiving arrays should clone objects and store the copy. This prevents that future changes from the user affect the internal functionality.";

// TYPE RESOLUTION RULES
LooseCoupling.definition						="Avoid using implementation types (i.e., HashSet); use the interface (i.e, Set) instead.";
CloneMethodMustImplementCloneable.definition	="The method clone() should only be implemented if the class implements the Cloneable interface with the exception of a final method that only throws CloneNotSupportedException.<br>This version uses PMD's type resolution facilities, and can detect if the class implements or extends a Cloneable class.";
UnusedImports.definition						="Avoid unused import statements. This rule will find unused on demand imports, i.e. import com.foo.*.";
SignatureDeclareThrowsException.definition		="It is unclear which exceptions that can be thrown from the methods. It might be difficult to document and understand the vague interfaces.<br>Use either a class derived from RuntimeException or a checked exception. Junit classes are excluded.";

// UNUSED CODE RULES
UnusedPrivateField.definition		="Detects when a private field is declared and/or assigned a value, but not used.";
UnusedLocalVariable.definition		="Detects when a local variable is declared and/or assigned, but not used.";
UnusedPrivateMethod.definition		="Unused Private Method detects when a private method is declared but is unused.";
UnusedFormalParameter.definition	="Avoid passing parameters to methods or constructors and then not using those parameters.";

// ENOVIA MatrixOne Programming Guidelines
JavaClassMethodSizeCheck.definition							="Java class method size should not be more than certain number of lines of code. This will lead to good modularity and maintainability of the code.";
StaticVariableMayBeDeclaredAsFinal.definition				="The use of static variables is not recommended as, such variables have exactly one instance in memory and they are not dereferenced during the lifetime of the application (or until the class is loaded in memor by Class Loader). This can possibly lead to different issues like synchronization related issues.";
FinalVariableMustBeCapital.definition						="As per the Java coding convention point of view, the constant names should be in CAPITAL case letters.";
UseNonSynchronizedOverSynchronizedDataStructure.definition	="Synchronization has its own overhead related to maitaining exclusive access etc which eat up considerable processing time. If it not necessary, one should avoid using synchornized data structure to gain performance of the application.";
RemoveDebugStatements.definition							="Remove All Debug Statements. Some of the statements may be necessary ones, when you should review and decide accordingly.";
AvoidUsingStringTokenizer.definition						="Avoid use of String Tokenizer where ever possible. StringTokenizer has a bug where it will not return any token with 0 length. In our programming we generally needs to know the presence of such tokens. API provides another way to have splitting operation using FrameworkUtil.split method call, try that.";
PreferrablyUseDomainObject.definition						="Whereever possible BusinessObject is usage should be avoided, instead use DomainObject which is extension of BusinessObject and has several enhancement APIs.";
AvoidUseOfMQLCommandClass.definition						="Use of MQLCommand class should be avoided whereever possible, instead use MQLUtil.";
JPONamingRule.definition									="The JPO name must have certain convention as per guidelines, where standard prefix is attached to the name. For an instance 'emxTask' etc.";
JPOMethodTryCatchRule.definition							="Warning is JPO method is not following certain convention of coding.";
AvoidStaticContextVariableRule.definition					="The use of static Context variable is not recommended as, such variable have exactly one instance in memory and they are not dereferenced during the lifetime of the application (or until the class is loaded in memor by Class Loader). This can possibly lead to different issues like synchronization related issues, security issues.";
UseGetFrameContextRule.definition							="Call to Framework.getContext should be replaced by Framework.getFrameContext which returns thread safe context object. (This will be more appropriate when used in JSP !!!)";
InitializeEmptyStringsRule.definition						="If a string variable is declared and initialized to null then prompt warning so that developer will revisit the code and check if he can changed the initialization to \"\". Having it to instialized to null have some issue with WebSphere application server where they are treated/printed as literal \"null\".";
StringBufferConcatRule.definition							="Warning Avoid Using String Buffer Concatenation. Note: The rule at the moment does not handle the calls like sb.append(\"asd\").append(\"123\" + \"abc\");";
SymbolicNameReference.definition							="The hardcoding of the schema element names in code must be avoided. This will cause serious issue when the schema names are changed and the code referring these schema element will break. Use symbolic names to derive real names of the schema elements.";
StringManipulation.definition								="The attempt here is to avoid the multiple concatenations of the strings and encourage use of StringBuffer class for concatenation. If there are more than two string concatenation the use of + operator is not recommended.";
CheckVaultPatternInFindObjectsRule.definition				="Using * for vault names in queries is solwer, as all of the vaults are searched for the data required. This is performance overhead. If possible, always specify specific vault names in queries.";
CheckRelTypePatternsInGetRelatedObjectsRule.definition		="Using * for Relationship names in queries is solwer, as all of the vaults are searched for the data required. This is performance overhead. If possible, always specify specific vault names in queries.";
AvoidDBCallInsideLoopForTableColumnMethod.definition		="Using DB calls in queries is solwer, as all of the vaults are searched for the data required. This is performance overhead.";
//*********************************************************************************************************************
// ERRORS DESCRIPTION ([ErrorLabel].description)
//***************
// ANDROID RULES
CallSuperFirst.description	="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7<br><br>See <a href=\"/P8\" target=\"_blank\">Infos</A> for specific details.";
CallSuperLast.description	="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7<br><br>See <a href=\"/P8\" target=\"_blank\">Infos</A> for specific details.";
ProtectLogD.description		="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7<br><br>See <a href=\"/P8\" target=\"_blank\">Infos</A> for specific details.";
ProtectLogV.description		="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7<br><br>See <a href=\"/P8\" target=\"_blank\">Infos</A> for specific details.";

// BASIC JSF RULES
DontNestJsfInJstlIteration.description	="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7<br><br>See <a href=\"/P8\" target=\"_blank\">Infos</A> for specific details.";

// BASIC JSP RULES
NoLongScripts.description				="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7<br><br>See <a href=\"/P8\" target=\"_blank\">Infos</A> for specific details.";			
NoScriptlets.description				="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7<br><br>See <a href=\"/P8\" target=\"_blank\">Infos</A> for specific details.";				
NoInlineStyleInformation.description	="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7<br><br>See <a href=\"/P8\" target=\"_blank\">Infos</A> for specific details.";	
NoClassAttribute.description			="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7<br><br>See <a href=\"/P8\" target=\"_blank\">Infos</A> for specific details.";	
NoJspForward.description				="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7<br><br>See <a href=\"/P8\" target=\"_blank\">Infos</A> for specific details.";			
IframeMissingSrcAttribute.description	="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7<br><br>See <a href=\"/P8\" target=\"_blank\">Infos</A> for specific details.";	
NoHtmlComments.description				="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7<br><br>See <a href=\"/P8\" target=\"_blank\">Infos</A> for specific details.";		
DuplicateJspImports.description			="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7<br><br>See <a href=\"/P8\" target=\"_blank\">Infos</A> for specific details.";		
JspEncoding.description					="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7<br><br>See <a href=\"/P8\" target=\"_blank\">Infos</A> for specific details.";

// BASIC RULES
EmptyCatchBlock.description								="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7<br><br>See <a href=\"/P8\" target=\"_blank\">Infos</A> for specific details.";
EmptyIfStmt.description									="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7<br><br>See <a href=\"/P8\" target=\"_blank\">Infos</A> for specific details.";
EmptyWhileStmt.description								="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7<br><br>See <a href=\"/P8\" target=\"_blank\">Infos</A> for specific details.";
EmptyTryBlock.description								="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7<br><br>See <a href=\"/P8\" target=\"_blank\">Infos</A> for specific details.";
EmptyFinallyBlock.description							="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7<br><br>See <a href=\"/P8\" target=\"_blank\">Infos</A> for specific details.";
EmptySwitchStatements.description						="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7<br><br>See <a href=\"/P8\" target=\"_blank\">Infos</A> for specific details.";
JumbledIncrementer.description							="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7<br><br>See <a href=\"/P8\" target=\"_blank\">Infos</A> for specific details.";
ForLoopShouldBeWhileLoop.description					="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7<br><br>See <a href=\"/P8\" target=\"_blank\">Infos</A> for specific details.";
UnnecessaryConversionTemporary.description				="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7<br><br>See <a href=\"/P8\" target=\"_blank\">Infos</A> for specific details.";
OverrideBothEqualsAndHashcode.description				="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7<br><br>See <a href=\"/P8\" target=\"_blank\">Infos</A> for specific details.";
DoubleCheckedLocking.description						="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7<br><br>See <a href=\"/P8\" target=\"_blank\">Infos</A> for specific details.";
ReturnFromFinallyBlock.description						="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7<br><br>See <a href=\"/P8\" target=\"_blank\">Infos</A> for specific details.";
EmptySynchronizedBlock.description						="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7<br><br>See <a href=\"/P8\" target=\"_blank\">Infos</A> for specific details.";
UnnecessaryReturn.description							="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7<br><br>See <a href=\"/P8\" target=\"_blank\">Infos</A> for specific details.";
EmptyStaticInitializer.description						="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7<br><br>See <a href=\"/P8\" target=\"_blank\">Infos</A> for specific details.";
UnconditionalIfStatement.description					="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7<br><br>See <a href=\"/P8\" target=\"_blank\">Infos</A> for specific details.";
EmptyStatementNotInLoop.description						="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7<br><br>See <a href=\"/P8\" target=\"_blank\">Infos</A> for specific details.";
BooleanInstantiation.description						="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7<br><br>See <a href=\"/P8\" target=\"_blank\">Infos</A> for specific details.";
UnnecessaryFinalModifier.description					="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7<br><br>See <a href=\"/P8\" target=\"_blank\">Infos</A> for specific details.";
CollapsibleIfStatements.description						="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7<br><br>See <a href=\"/P8\" target=\"_blank\">Infos</A> for specific details.";
UselessOverridingMethod.description						="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7<br><br>See <a href=\"/P8\" target=\"_blank\">Infos</A> for specific details.";
ClassCastExceptionWithToArray.description				="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7<br><br>See <a href=\"/P8\" target=\"_blank\">Infos</A> for specific details.";
AvoidDecimalLiteralsInBigDecimalConstructor.description	="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7<br><br>See <a href=\"/P8\" target=\"_blank\">Infos</A> for specific details.";
UselessOperationOnImmutable.description					="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7<br><br>See <a href=\"/P8\" target=\"_blank\">Infos</A> for specific details.";
MisplacedNullCheck.description							="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7<br><br>See <a href=\"/P8\" target=\"_blank\">Infos</A> for specific details.";
UnusedNullCheckInEquals.description						="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7<br><br>See <a href=\"/P8\" target=\"_blank\">Infos</A> for specific details.";
AvoidThreadGroup.description							="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7<br><br>See <a href=\"/P8\" target=\"_blank\">Infos</A> for specific details.";
BrokenNullCheck.description								="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7<br><br>See <a href=\"/P8\" target=\"_blank\">Infos</A> for specific details.";
BigIntegerInstantiation.description						="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7<br><br>See <a href=\"/P8\" target=\"_blank\">Infos</A> for specific details.";
AvoidUsingOctalValues.description						="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7<br><br>See <a href=\"/P8\" target=\"_blank\">Infos</A> for specific details.";
AvoidUsingHardCodedIP.description						="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7<br><br>See <a href=\"/P8\" target=\"_blank\">Infos</A> for specific details.";
CheckResultSet.description								="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7<br><br>See <a href=\"/P8\" target=\"_blank\">Infos</A> for specific details.";
AvoidMultipleUnaryOperators.description					="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7<br><br>See <a href=\"/P8\" target=\"_blank\">Infos</A> for specific details.";
EmptyInitializer.description							="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7<br><br>See <a href=\"/P8\" target=\"_blank\">Infos</A> for specific details.";

// BRACES RULES
IfStmtsMustUseBraces.description		="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7<br><br>See <a href=\"/P8\" target=\"_blank\">Infos</A> for specific details.";
WhileLoopsMustUseBraces.description		="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7<br><br>See <a href=\"/P8\" target=\"_blank\">Infos</A> for specific details.";
IfElseStmtsMustUseBraces.description	="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7<br><br>See <a href=\"/P8\" target=\"_blank\">Infos</A> for specific details.";
ForLoopsMustUseBraces.description		="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7<br><br>See <a href=\"/P8\" target=\"_blank\">Infos</A> for specific details.";

// CLONE IMPLEMENTATION RULES
ProperCloneImplementation.description				="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7<br><br>See <a href=\"/P8\" target=\"_blank\">Infos</A> for specific details.";
CloneThrowsCloneNotSupportedException.description	="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7<br><br>See <a href=\"/P8\" target=\"_blank\">Infos</A> for specific details.";
CloneMethodMustImplementCloneable.description		="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7<br><br>See <a href=\"/P8\" target=\"_blank\">Infos</A> for specific details.";

// CODE SIZE RULES
NPathComplexity.description			="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7<br><br>See <a href=\"/P8\" target=\"_blank\">Infos</A> for specific details.";
ExcessiveMethodLength.description	="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7<br><br>See <a href=\"/P8\" target=\"_blank\">Infos</A> for specific details.";
ExcessiveParameterList.description	="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7<br><br>See <a href=\"/P8\" target=\"_blank\">Infos</A> for specific details.";
ExcessiveClassLength.description	="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7<br><br>See <a href=\"/P8\" target=\"_blank\">Infos</A> for specific details.";
CyclomaticComplexity.description	="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7<br><br>See <a href=\"/P8\" target=\"_blank\">Infos</A> for specific details.";
ExcessivePublicCount.description	="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7<br><br>See <a href=\"/P8\" target=\"_blank\">Infos</A> for specific details.";
TooManyFields.description			="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7<br><br>See <a href=\"/P8\" target=\"_blank\">Infos</A> for specific details.";
NcssMethodCount.description			="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7<br><br>See <a href=\"/P8\" target=\"_blank\">Infos</A> for specific details.";
NcssTypeCount.description			="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7<br><br>See <a href=\"/P8\" target=\"_blank\">Infos</A> for specific details.";
NcssConstructorCount.description	="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7<br><br>See <a href=\"/P8\" target=\"_blank\">Infos</A> for specific details.";
TooManyMethods.description			="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7<br><br>See <a href=\"/P8\" target=\"_blank\">Infos</A> for specific details.";

// CONTROVERSAL RULES
UnnecessaryConstructor.description					="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7<br><br>See <a href=\"/P8\" target=\"_blank\">Infos</A> for specific details.";
NullAssignment.description							="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7<br><br>See <a href=\"/P8\" target=\"_blank\">Infos</A> for specific details.";
OnlyOneReturn.description							="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7<br><br>See <a href=\"/P8\" target=\"_blank\">Infos</A> for specific details.";
UnusedModifier.description							="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7<br><br>See <a href=\"/P8\" target=\"_blank\">Infos</A> for specific details.";
AssignmentInOperand.description						="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7<br><br>See <a href=\"/P8\" target=\"_blank\">Infos</A> for specific details.";
AtLeastOneConstructor.description					="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7<br><br>See <a href=\"/P8\" target=\"_blank\">Infos</A> for specific details.";
DontImportSun.description							="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7<br><br>See <a href=\"/P8\" target=\"_blank\">Infos</A> for specific details.";
SuspiciousOctalEscape.description					="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7<br><br>See <a href=\"/P8\" target=\"_blank\">Infos</A> for specific details.";
CallSuperInConstructor.description					="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7<br><br>See <a href=\"/P8\" target=\"_blank\">Infos</A> for specific details.";
UnnecessaryParentheses.description					="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7<br><br>See <a href=\"/P8\" target=\"_blank\">Infos</A> for specific details.";
DefaultPackage.description							="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7<br><br>See <a href=\"/P8\" target=\"_blank\">Infos</A> for specific details.";
BooleanInversion.description						="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7<br><br>See <a href=\"/P8\" target=\"_blank\">Infos</A> for specific details.";
DataflowAnomalyAnalysis.description					="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7<br><br>See <a href=\"/P8\" target=\"_blank\">Infos</A> for specific details.";
AvoidFinalLocalVariable.description					="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7<br><br>See <a href=\"/P8\" target=\"_blank\">Infos</A> for specific details.";
AvoidUsingShortType.description						="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7<br><br>See <a href=\"/P8\" target=\"_blank\">Infos</A> for specific details.";
AvoidUsingVolatile.description						="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7<br><br>See <a href=\"/P8\" target=\"_blank\">Infos</A> for specific details.";
AvoidUsingNativeCode.description					="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7<br><br>See <a href=\"/P8\" target=\"_blank\">Infos</A> for specific details.";
AvoidAccessibilityAlteration.description			="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7<br><br>See <a href=\"/P8\" target=\"_blank\">Infos</A> for specific details.";
DoNotCallGarbageCollectionExplicitly.description	="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7<br><br>See <a href=\"/P8\" target=\"_blank\">Infos</A> for specific details.";

// COUPLING RULES
CouplingBetweenObjects.description	="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7<br><br>See <a href=\"/P8\" target=\"_blank\">Infos</A> for specific details.";
ExcessiveImports.description		="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7<br><br>See <a href=\"/P8\" target=\"_blank\">Infos</A> for specific details.";
LooseCoupling.description			="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7<br><br>See <a href=\"/P8\" target=\"_blank\">Infos</A> for specific details.";

// DESIGN RULES
UseSingleton.description									="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7<br><br>See <a href=\"/P8\" target=\"_blank\">Infos</A> for specific details.";
SimplifyBooleanReturns.description							="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7<br><br>See <a href=\"/P8\" target=\"_blank\">Infos</A> for specific details.";
SimplifyBooleanExpressions.description						="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7<br><br>See <a href=\"/P8\" target=\"_blank\">Infos</A> for specific details.";
SwitchStmtsShouldHaveDefault.description					="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7<br><br>See <a href=\"/P8\" target=\"_blank\">Infos</A> for specific details.";
AvoidDeeplyNestedIfStmts.description						="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7<br><br>See <a href=\"/P8\" target=\"_blank\">Infos</A> for specific details.";
AvoidReassigningParameters.description						="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7<br><br>See <a href=\"/P8\" target=\"_blank\">Infos</A> for specific details.";
SwitchDensity.description									="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7<br><br>See <a href=\"/P8\" target=\"_blank\">Infos</A> for specific details.";
ConstructorCallsOverridableMethod.description				="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7<br><br>See <a href=\"/P8\" target=\"_blank\">Infos</A> for specific details.";
AccessorClassGeneration.description							="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7<br><br>See <a href=\"/P8\" target=\"_blank\">Infos</A> for specific details.";
FinalFieldCouldBeStatic.description							="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7<br><br>See <a href=\"/P8\" target=\"_blank\">Infos</A> for specific details.";
CloseResource.description									="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7<br><br>See <a href=\"/P8\" target=\"_blank\">Infos</A> for specific details.";
NonStaticInitializer.description							="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7<br><br>See <a href=\"/P8\" target=\"_blank\">Infos</A> for specific details.";
DefaultLabelNotLastInSwitchStmt.description					="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7<br><br>See <a href=\"/P8\" target=\"_blank\">Infos</A> for specific details.";
NonCaseLabelInSwitchStatement.description					="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7<br><br>See <a href=\"/P8\" target=\"_blank\">Infos</A> for specific details.";
OptimizableToArrayCall.description							="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7<br><br>See <a href=\"/P8\" target=\"_blank\">Infos</A> for specific details.";
BadComparison.description									="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7<br><br>See <a href=\"/P8\" target=\"_blank\">Infos</A> for specific details.";
EqualsNull.description										="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7<br><br>See <a href=\"/P8\" target=\"_blank\">Infos</A> for specific details.";
ConfusingTernary.description								="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7<br><br>See <a href=\"/P8\" target=\"_blank\">Infos</A> for specific details.";
InstantiationToGetClass.description							="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7<br><br>See <a href=\"/P8\" target=\"_blank\">Infos</A> for specific details.";
IdempotentOperations.description							="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7<br><br>See <a href=\"/P8\" target=\"_blank\">Infos</A> for specific details.";
SimpleDateFormatNeedsLocale.description						="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7<br><br>See <a href=\"/P8\" target=\"_blank\">Infos</A> for specific details.";
ImmutableField.description									="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7<br><br>See <a href=\"/P8\" target=\"_blank\">Infos</A> for specific details.";
UseLocaleWithCaseConversions.description					="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7<br><br>See <a href=\"/P8\" target=\"_blank\">Infos</A> for specific details.";
AvoidProtectedFieldInFinalClass.description					="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7<br><br>See <a href=\"/P8\" target=\"_blank\">Infos</A> for specific details.";
AssignmentToNonFinalStatic.description						="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7<br><br>See <a href=\"/P8\" target=\"_blank\">Infos</A> for specific details.";
MissingStaticMethodInNonInstantiatableClass.description		="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7<br><br>See <a href=\"/P8\" target=\"_blank\">Infos</A> for specific details.";
AvoidSynchronizedAtMethodLevel.description					="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7<br><br>See <a href=\"/P8\" target=\"_blank\">Infos</A> for specific details.";
MissingBreakInSwitch.description							="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7<br><br>See <a href=\"/P8\" target=\"_blank\">Infos</A> for specific details.";
UseNotifyAllInsteadOfNotify.description						="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7<br><br>See <a href=\"/P8\" target=\"_blank\">Infos</A> for specific details.";
AvoidInstanceofChecksInCatchClause.description				="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7<br><br>See <a href=\"/P8\" target=\"_blank\">Infos</A> for specific details.";
AbstractClassWithoutAbstractMethod.description				="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7<br><br>See <a href=\"/P8\" target=\"_blank\">Infos</A> for specific details.";
SimplifyConditional.description								="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7<br><br>See <a href=\"/P8\" target=\"_blank\">Infos</A> for specific details.";
CompareObjectsWithEquals.description						="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7<br><br>See <a href=\"/P8\" target=\"_blank\">Infos</A> for specific details.";
PositionLiteralsFirstInComparisons.description				="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7<br><br>See <a href=\"/P8\" target=\"_blank\">Infos</A> for specific details.";
UnnecessaryLocalBeforeReturn.description					="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7<br><br>See <a href=\"/P8\" target=\"_blank\">Infos</A> for specific details.";
NonThreadSafeSingleton.description							="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7<br><br>See <a href=\"/P8\" target=\"_blank\">Infos</A> for specific details.";
UncommentedEmptyMethod.description							="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7<br><br>See <a href=\"/P8\" target=\"_blank\">Infos</A> for specific details.";
UncommentedEmptyConstructor.description						="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7<br><br>See <a href=\"/P8\" target=\"_blank\">Infos</A> for specific details.";
AvoidConstantsInterface.description							="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7<br><br>See <a href=\"/P8\" target=\"_blank\">Infos</A> for specific details.";
UnsynchronizedStaticDateFormatter.description				="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7<br><br>See <a href=\"/P8\" target=\"_blank\">Infos</A> for specific details.";
PreserveStackTrace.description								="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7<br><br>See <a href=\"/P8\" target=\"_blank\">Infos</A> for specific details.";
UseCollectionIsEmpty.description							="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7<br><br>See <a href=\"/P8\" target=\"_blank\">Infos</A> for specific details.";
ClassWithOnlyPrivateConstructorsShouldBeFinal.description	="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7<br><br>See <a href=\"/P8\" target=\"_blank\">Infos</A> for specific details.";
EmptyMethodInAbstractClassShouldBeAbstract.description		="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7<br><br>See <a href=\"/P8\" target=\"_blank\">Infos</A> for specific details.";
SingularField.description									="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7<br><br>See <a href=\"/P8\" target=\"_blank\">Infos</A> for specific details.";
ReturnEmptyArrayRatherThanNull.description					="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7<br><br>See <a href=\"/P8\" target=\"_blank\">Infos</A> for specific details.";
AbstractClassWithoutAnyMethod.description					="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7<br><br>See <a href=\"/P8\" target=\"_blank\">Infos</A> for specific details.";
TooFewBranchesForASwitchStatement.description				="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7<br><br>See <a href=\"/P8\" target=\"_blank\">Infos</A> for specific details.";

// FINALIZER RULES
EmptyFinalizer.description						="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7<br><br>See <a href=\"/P8\" target=\"_blank\">Infos</A> for specific details.";
FinalizeOnlyCallsSuperFinalize.description		="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7<br><br>See <a href=\"/P8\" target=\"_blank\">Infos</A> for specific details.";
FinalizeOverloaded.description					="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7<br><br>See <a href=\"/P8\" target=\"_blank\">Infos</A> for specific details.";
FinalizeDoesNotCallSuperFinalize.description	="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7<br><br>See <a href=\"/P8\" target=\"_blank\">Infos</A> for specific details.";
FinalizeShouldBeProtected.description			="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7<br><br>See <a href=\"/P8\" target=\"_blank\">Infos</A> for specific details.";
AvoidCallingFinalize.description				="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7<br><br>See <a href=\"/P8\" target=\"_blank\">Infos</A> for specific details.";

// IMPORT STATEMENT RULES
DuplicateImports.description		="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7<br><br>See <a href=\"/P8\" target=\"_blank\">Infos</A> for specific details.";
DontImportJavaLang.description		="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7<br><br>See <a href=\"/P8\" target=\"_blank\">Infos</A> for specific details.";
UnusedImports.description			="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7<br><br>See <a href=\"/P8\" target=\"_blank\">Infos</A> for specific details.";
ImportFromSamePackage.description	="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7<br><br>See <a href=\"/P8\" target=\"_blank\">Infos</A> for specific details.";
TooManyStaticImports.description	="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7<br><br>See <a href=\"/P8\" target=\"_blank\">Infos</A> for specific details.";

// J2EE RULES
UseProperClassLoader.description					="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7<br><br>See <a href=\"/P8\" target=\"_blank\">Infos</A> for specific details.";
MDBAndSessionBeanNamingConvention.description		="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7<br><br>See <a href=\"/P8\" target=\"_blank\">Infos</A> for specific details.";
RemoteSessionInterfaceNamingConvention.description	="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7<br><br>See <a href=\"/P8\" target=\"_blank\">Infos</A> for specific details.";
LocalInterfaceSessionNamingConvention.description	="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7<br><br>See <a href=\"/P8\" target=\"_blank\">Infos</A> for specific details.";
LocalHomeNamingConvention.description				="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7<br><br>See <a href=\"/P8\" target=\"_blank\">Infos</A> for specific details.";
RemoteInterfaceNamingConvention.description			="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7<br><br>See <a href=\"/P8\" target=\"_blank\">Infos</A> for specific details.";
DoNotCallSystemExit.description						="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7<br><br>See <a href=\"/P8\" target=\"_blank\">Infos</A> for specific details.";
StaticEJBFieldShouldBeFinal.description				="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7<br><br>See <a href=\"/P8\" target=\"_blank\">Infos</A> for specific details.";
DoNotUseThreads.description							="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7<br><br>See <a href=\"/P8\" target=\"_blank\">Infos</A> for specific details.";

// JAVA BEAN RULES
BeanMembersShouldSerialize.description	="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7<br><br>See <a href=\"/P8\" target=\"_blank\">Infos</A> for specific details.";
MissingSerialVersionUID.description		="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7<br><br>See <a href=\"/P8\" target=\"_blank\">Infos</A> for specific details.";

// JUNIT RULES
JUnitStaticSuite.description					="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7<br><br>See <a href=\"/P8\" target=\"_blank\">Infos</A> for specific details.";
JUnitSpelling.description						="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7<br><br>See <a href=\"/P8\" target=\"_blank\">Infos</A> for specific details.";
JUnitAssertionsShouldIncludeMessage.description	="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7<br><br>See <a href=\"/P8\" target=\"_blank\">Infos</A> for specific details.";
JUnitTestsShouldIncludeAssert.description		="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7<br><br>See <a href=\"/P8\" target=\"_blank\">Infos</A> for specific details.";
TestClassWithoutTestCases.description			="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7<br><br>See <a href=\"/P8\" target=\"_blank\">Infos</A> for specific details.";
UnnecessaryBooleanAssertion.description			="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7<br><br>See <a href=\"/P8\" target=\"_blank\">Infos</A> for specific details.";
UseAssertEqualsInsteadOfAssertTrue.description	="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7<br><br>See <a href=\"/P8\" target=\"_blank\">Infos</A> for specific details.";
UseAssertSameInsteadOfAssertTrue.description	="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7<br><br>See <a href=\"/P8\" target=\"_blank\">Infos</A> for specific details.";
UseAssertNullInsteadOfAssertTrue.description	="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7<br><br>See <a href=\"/P8\" target=\"_blank\">Infos</A> for specific details.";
SimplifyBooleanAssertion.description			="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7<br><br>See <a href=\"/P8\" target=\"_blank\">Infos</A> for specific details.";

// JAKARTA COMMONS LOGGING RULES
UseCorrectExceptionLogging.description	="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7<br><br>See <a href=\"/P8\" target=\"_blank\">Infos</A> for specific details.";
ProperLogger.description				="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7<br><br>See <a href=\"/P8\" target=\"_blank\">Infos</A> for specific details.";

// JAVA LOGGING RULES
MoreThanOneLogger.description		="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7<br><br>See <a href=\"/P8\" target=\"_blank\">Infos</A> for specific details.";
LoggerIsNotStaticFinal.description	="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7<br><br>See <a href=\"/P8\" target=\"_blank\">Infos</A> for specific details.";
SystemPrintln.description			="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7<br><br>See <a href=\"/P8\" target=\"_blank\">Infos</A> for specific details.";
AvoidPrintStackTrace.description	="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7<br><br>See <a href=\"/P8\" target=\"_blank\">Infos</A> for specific details.";

// MIGRATION RULES
ReplaceVectorWithList.description					="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7<br><br>See <a href=\"/P8\" target=\"_blank\">Infos</A> for specific details.";
ReplaceHashtableWithMap.description					="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7<br><br>See <a href=\"/P8\" target=\"_blank\">Infos</A> for specific details.";
ReplaceEnumerationWithIterator.description			="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7<br><br>See <a href=\"/P8\" target=\"_blank\">Infos</A> for specific details.";
AvoidEnumAsIdentifier.description					="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7<br><br>See <a href=\"/P8\" target=\"_blank\">Infos</A> for specific details.";
AvoidAssertAsIdentifier.description					="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7<br><br>See <a href=\"/P8\" target=\"_blank\">Infos</A> for specific details.";
IntegerInstantiation.description					="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7<br><br>See <a href=\"/P8\" target=\"_blank\">Infos</A> for specific details.";
ByteInstantiation.description						="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7<br><br>See <a href=\"/P8\" target=\"_blank\">Infos</A> for specific details.";
ShortInstantiation.description						="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7<br><br>See <a href=\"/P8\" target=\"_blank\">Infos</A> for specific details.";
LongInstantiation.description						="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7<br><br>See <a href=\"/P8\" target=\"_blank\">Infos</A> for specific details.";
JUnit4TestShouldUseBeforeAnnotation.description		="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7<br><br>See <a href=\"/P8\" target=\"_blank\">Infos</A> for specific details.";
JUnit4TestShouldUseAfterAnnotation.description		="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7<br><br>See <a href=\"/P8\" target=\"_blank\">Infos</A> for specific details.";
JUnit4TestShouldUseTestAnnotation.description		="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7<br><br>See <a href=\"/P8\" target=\"_blank\">Infos</A> for specific details.";
JUnit4SuitesShouldUseSuiteAnnotation.description	="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7<br><br>See <a href=\"/P8\" target=\"_blank\">Infos</A> for specific details.";
JUnitUseExpected.description						="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7<br><br>See <a href=\"/P8\" target=\"_blank\">Infos</A> for specific details.";

// NAMING RULES
ShortVariable.description						="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7<br><br>See <a href=\"/P8\" target=\"_blank\">Infos</A> for specific details.";
LongVariable.description						="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7<br><br>See <a href=\"/P8\" target=\"_blank\">Infos</A> for specific details.";
ShortMethodName.description						="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7<br><br>See <a href=\"/P8\" target=\"_blank\">Infos</A> for specific details.";
VariableNamingConventions.description			="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7<br><br>See <a href=\"/P8\" target=\"_blank\">Infos</A> for specific details.";
MethodNamingConventions.description				="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7<br><br>See <a href=\"/P8\" target=\"_blank\">Infos</A> for specific details.";
ClassNamingConventions.description				="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7<br><br>See <a href=\"/P8\" target=\"_blank\">Infos</A> for specific details.";
AbstractNaming.description						="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7<br><br>See <a href=\"/P8\" target=\"_blank\">Infos</A> for specific details.";
AvoidDollarSigns.description					="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7<br><br>See <a href=\"/P8\" target=\"_blank\">Infos</A> for specific details.";
MethodWithSameNameAsEnclosingClass.description	="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7<br><br>See <a href=\"/P8\" target=\"_blank\">Infos</A> for specific details.";
SuspiciousHashcodeMethodName.description		="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7<br><br>See <a href=\"/P8\" target=\"_blank\">Infos</A> for specific details.";
SuspiciousConstantFieldName.description			="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7<br><br>See <a href=\"/P8\" target=\"_blank\">Infos</A> for specific details.";
SuspiciousEqualsMethodName.description			="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7<br><br>See <a href=\"/P8\" target=\"_blank\">Infos</A> for specific details.";
AvoidFieldNameMatchingTypeName.description		="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7<br><br>See <a href=\"/P8\" target=\"_blank\">Infos</A> for specific details.";
AvoidFieldNameMatchingMethodName.description	="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7<br><br>See <a href=\"/P8\" target=\"_blank\">Infos</A> for specific details.";
NoPackage.description							="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7<br><br>See <a href=\"/P8\" target=\"_blank\">Infos</A> for specific details.";
PackageCase.description							="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7<br><br>See <a href=\"/P8\" target=\"_blank\">Infos</A> for specific details.";
MisleadingVariableName.description				="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7<br><br>See <a href=\"/P8\" target=\"_blank\">Infos</A> for specific details.";
BooleanGetMethodName.description				="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7<br><br>See <a href=\"/P8\" target=\"_blank\">Infos</A> for specific details.";

// OPTIMIZATION RULES
LocalVariableCouldBeFinal.description			="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7<br><br>See <a href=\"/P8\" target=\"_blank\">Infos</A> for specific details.";
MethodArgumentCouldBeFinal.description			="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7<br><br>See <a href=\"/P8\" target=\"_blank\">Infos</A> for specific details.";
AvoidInstantiatingObjectsInLoops.description	="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7<br><br>See <a href=\"/P8\" target=\"_blank\">Infos</A> for specific details.";
UseArrayListInsteadOfVector.description			="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7<br><br>See <a href=\"/P8\" target=\"_blank\">Infos</A> for specific details.";
SimplifyStartsWith.description					="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7<br><br>See <a href=\"/P8\" target=\"_blank\">Infos</A> for specific details.";
UseStringBufferForStringAppends.description		="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7<br><br>See <a href=\"/P8\" target=\"_blank\">Infos</A> for specific details.";
UseArraysAsList.description						="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7<br><br>See <a href=\"/P8\" target=\"_blank\">Infos</A> for specific details.";
AvoidArrayLoops.description						="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7<br><br>See <a href=\"/P8\" target=\"_blank\">Infos</A> for specific details.";
UnnecessaryWrapperObjectCreation.description	="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7<br><br>See <a href=\"/P8\" target=\"_blank\">Infos</A> for specific details.";
AddEmptyString.description						="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7<br><br>See <a href=\"/P8\" target=\"_blank\">Infos</A> for specific details.";

// STRICT EXCEPTION RULES
AvoidCatchingThrowable.description					="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7<br><br>See <a href=\"/P8\" target=\"_blank\">Infos</A> for specific details.";
SignatureDeclareThrowsException.description			="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7<br><br>See <a href=\"/P8\" target=\"_blank\">Infos</A> for specific details.";
ExceptionAsFlowControl.description					="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7<br><br>See <a href=\"/P8\" target=\"_blank\">Infos</A> for specific details.";
AvoidCatchingNPE.description						="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7<br><br>See <a href=\"/P8\" target=\"_blank\">Infos</A> for specific details.";
AvoidThrowingRawExceptionTypes.description			="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7<br><br>See <a href=\"/P8\" target=\"_blank\">Infos</A> for specific details.";
AvoidThrowingNullPointerException.description		="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7<br><br>See <a href=\"/P8\" target=\"_blank\">Infos</A> for specific details.";
AvoidRethrowingException.description				="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7<br><br>See <a href=\"/P8\" target=\"_blank\">Infos</A> for specific details.";
DoNotExtendJavaLangError.description				="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7<br><br>See <a href=\"/P8\" target=\"_blank\">Infos</A> for specific details.";
DoNotThrowExceptionInFinally.description			="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7<br><br>See <a href=\"/P8\" target=\"_blank\">Infos</A> for specific details.";
AvoidThrowingNewInstanceOfSameException.description	="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7<br><br>See <a href=\"/P8\" target=\"_blank\">Infos</A> for specific details.";

// STRING AND STRINGBUFFER RULES
AvoidDuplicateLiterals.description				="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7<br><br>See <a href=\"/P8\" target=\"_blank\">Infos</A> for specific details.";
StringInstantiation.description					="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7<br><br>See <a href=\"/P8\" target=\"_blank\">Infos</A> for specific details.";
StringToString.description						="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7<br><br>See <a href=\"/P8\" target=\"_blank\">Infos</A> for specific details.";
InefficientStringBuffering.description			="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7<br><br>See <a href=\"/P8\" target=\"_blank\">Infos</A> for specific details.";
UnnecessaryCaseChange.description				="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7<br><br>See <a href=\"/P8\" target=\"_blank\">Infos</A> for specific details.";
UseStringBufferLength.description				="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7<br><br>See <a href=\"/P8\" target=\"_blank\">Infos</A> for specific details.";
AppendCharacterWithChar.description				="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7<br><br>See <a href=\"/P8\" target=\"_blank\">Infos</A> for specific details.";
ConsecutiveLiteralAppends.description			="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7<br><br>See <a href=\"/P8\" target=\"_blank\">Infos</A> for specific details.";
UseIndexOfChar.description						="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7<br><br>See <a href=\"/P8\" target=\"_blank\">Infos</A> for specific details.";
InefficientEmptyStringCheck.description			="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7<br><br>See <a href=\"/P8\" target=\"_blank\">Infos</A> for specific details.";
InsufficientStringBufferDeclaration.description	="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7<br><br>See <a href=\"/P8\" target=\"_blank\">Infos</A> for specific details.";
UselessStringValueOf.description				="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7<br><br>See <a href=\"/P8\" target=\"_blank\">Infos</A> for specific details.";
StringBufferInstantiationWithChar.description	="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7<br><br>See <a href=\"/P8\" target=\"_blank\">Infos</A> for specific details.";
UseEqualsToCompareStrings.description			="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7<br><br>See <a href=\"/P8\" target=\"_blank\">Infos</A> for specific details.";
AvoidStringBufferField.description				="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7<br><br>See <a href=\"/P8\" target=\"_blank\">Infos</A> for specific details.";

// SECURITY CODE GUIDELINES
MethodReturnsInternalArray.description	="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7<br><br>See <a href=\"/P8\" target=\"_blank\">Infos</A> for specific details.";
ArrayIsStoredDirectly.description		="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7<br><br>See <a href=\"/P8\" target=\"_blank\">Infos</A> for specific details.";

// TYPE RESOLUTION RULES
LooseCoupling.description						="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7<br><br>See <a href=\"/P8\" target=\"_blank\">Infos</A> for specific details.";
CloneMethodMustImplementCloneable.description	="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7<br><br>See <a href=\"/P8\" target=\"_blank\">Infos</A> for specific details.";
UnusedImports.description						="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7<br><br>See <a href=\"/P8\" target=\"_blank\">Infos</A> for specific details.";
SignatureDeclareThrowsException.description		="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7<br><br>See <a href=\"/P8\" target=\"_blank\">Infos</A> for specific details.";

// UNUSED CODE RULES
UnusedPrivateField.description		="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7<br><br>See <a href=\"/P8\" target=\"_blank\">Infos</A> for specific details.";
UnusedLocalVariable.description		="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7<br><br>See <a href=\"/P8\" target=\"_blank\">Infos</A> for specific details.";
UnusedPrivateMethod.description		="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7<br><br>See <a href=\"/P8\" target=\"_blank\">Infos</A> for specific details.";
UnusedFormalParameter.description	="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7<br><br>See <a href=\"/P8\" target=\"_blank\">Infos</A> for specific details.";

// ENOVIA MatrixOne Programming Guidelines
JavaClassMethodSizeCheck.description						="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7";
StaticVariableMayBeDeclaredAsFinal.description				="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7";
FinalVariableMustBeCapital.description						="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7";
UseNonSynchronizedOverSynchronizedDataStructure.description	="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7";
RemoveDebugStatements.description							="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7";
AvoidUsingStringTokenizer.description						="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7";
PreferrablyUseDomainObject.description						="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7";
AvoidUseOfMQLCommandClass.description						="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7";
JPONamingRule.description									="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7";
JPOMethodTryCatchRule.description							="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7";
AvoidStaticContextVariableRule.description					="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7";
UseGetFrameContextRule.description							="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7";
InitializeEmptyStringsRule.description						="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7";
StringBufferConcatRule.description							="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7";
SymbolicNameReference.description							="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7";
StringManipulation.description								="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7";
CheckVaultPatternInFindObjectsRule.description				="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7";
CheckRelTypePatternsInGetRelatedObjectsRule.description		="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7";
AvoidDBCallInsideLoopForTableColumnMethod.description		="<b>/P9</P1b><br>(at line <b class=\"boldAsLink\" onclick=\"srcCodeHighlight('/P7','/P2');\">/P2</P1b>)<br><br><b>Package:</P1b>/P4<br><b>Class:</P1b>/P5<br><b>Method:</P1b>/P6<br><b>Variable:</P1b>/P7";
