
mkSMGenIO_001.Request    = "Attempting to read a simulia file";
mkSMGenIO_001.Diagnostic = "Unexpected root element /P1, expected /P2 in file /P3"; 
mkSMGenIO_001.Advice     = "";


mkSMGenIO_002.Request    = "Attempting to read a simulia file: singleCall";
mkSMGenIO_002.Diagnostic = "Unexpected value for attribute /P1, found /P2, was expecting /P3 in file /P4"; 
mkSMGenIO_002.Advice     = "";

mkSMGenIO_003.Request    = "Attempting to read a simulia file: progenitor or descendant";
mkSMGenIO_003.Diagnostic = "Unexpected number of /P1, found none, was expected at least 1 in file /P2"; 
mkSMGenIO_003.Advice     = "";

mkSMGenIO_004.Request    = "Attempting to write a simulia file: progenitor matchs";
mkSMGenIO_004.Diagnostic = "Found more than one match in a non wildcarded progenitor (/P1) for file /P2"; 
mkSMGenIO_004.Advice     = "";

mkSMGenIO_005.Request    = "Attempting to write a simulia file: progenitor matchs";
mkSMGenIO_005.Diagnostic = "The first progenitor is wildcarded, progenitor /P1 shall also be wildcarded because they have the same optName in file /P2"; 
mkSMGenIO_005.Advice     = "";

mkSMGenIO_006.Request    = "Attempting to write a simulia file: progenitor matchs";
mkSMGenIO_006.Diagnostic = "The first progenitor is not wildcarded, the progenitor /P1 with the same optionName is not allowed /P2"; 
mkSMGenIO_006.Advice     = "";

mkSMGenIO_007.Request    = "Attempting to write a simulia file: progenitor matchs";
mkSMGenIO_007.Diagnostic = "Progenitor /P1 cannot be wildcarded because it does not have the optName of the first progenitor in file /P2"; 
mkSMGenIO_007.Advice     = "";

mkSMGenIO_008.Request    = "Attempting to read a simulia file: progenitor";
mkSMGenIO_008.Diagnostic = "Progenitor /P1 has more than one wildcard /P2"; 
mkSMGenIO_008.Advice     = "";

mkSMGenMkDataIO_001.Request    = "Attempting to write a _mk file";
mkSMGenMkDataIO_001.Diagnostic = "/P1 found an empty value"; 
mkSMGenMkDataIO_001.Advice     = "";

mkSMGenMkDataIO_002.Request    = "Attempting to write a _mk file";
mkSMGenMkDataIO_002.Diagnostic = "/P1 expected at least one path"; 
mkSMGenMkDataIO_002.Advice     = "";


mkBSCodeGenFw_001.Request    = "Computing progenitor match";
mkBSCodeGenFw_001.Diagnostic = "/P1: no match found for progenitor /P2"; 
mkBSCodeGenFw_001.Advice     = "";

mkBSCodeGenFw_002.Request    = "Computing progenitor match";
mkBSCodeGenFw_002.Diagnostic = "/P1: found /P3 matchs for progenitor /P2, expected the same for progenitor /P4 but found /P5"; 
mkBSCodeGenFw_002.Advice     = "";

mkBSCodeGenFw_003.Request    = "Checking facility";
mkBSCodeGenFw_003.Diagnostic = "/P1: facility /P2 is not found or un authorized"; 
mkBSCodeGenFw_003.Advice     = "";

mkBSCodeGenFw_004.Request    = "Checking facility";
mkBSCodeGenFw_004.Diagnostic = "Found match for progenitor /P1 in /P2 but shall have been /P3 in /P4"; 
mkBSCodeGenFw_004.Advice     = "";
//
