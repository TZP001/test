mkXmlICModelWriterErr_001.Request    = "Attempt to serialize an mkCIModel to xml";
mkXmlICModelWriterErr_001.Diagnostic = "The path was not provided"; 
mkXmlICModelWriterErr_001.Advice     = "use mkCIModel::SetPath to set the path or use mkXmlICModelWriter::Write(mkICModel& iModel, CATUnicodeString& iPath)";

mkCIModelPathErr_001.Request    = "Attempt to create a modelPath expression";
mkCIModelPathErr_001.Diagnostic = "Syntax error in the predicate \"/p1\""; 
mkCIModelPathErr_001.Advice     = "Check the syntax";

mkCIModelPathErr_002.Request    = "Attempt to create a modelPath expression";
mkCIModelPathErr_002.Diagnostic = "Syntax error, missing ']' in \"/p1\""; 
mkCIModelPathErr_002.Advice     = "Check the syntax";

mkCIModelPathErr_003.Request    = "Attempt to execute a modelPath expression";
mkCIModelPathErr_003.Diagnostic = "The Model path expression is empty"; 
mkCIModelPathErr_003.Advice     = "Check path expression";

mkIdcardFileHelperErr_001.Request    = "Attempt to create an IdentityCard.xml";
mkIdcardFileHelperErr_001.Diagnostic = "The name of the framework was found null"; 
mkIdcardFileHelperErr_001.Advice     = "Call mkIdcardFileHelper::createIdentityCard with a valid framework name";

mkICConstraintErr_001.Request    = "Creation of a mkCIConstraint";
mkICConstraintErr_001.Diagnostic = "The constraint \"/p1\" is not well formed: missing a paren"; 
mkICConstraintErr_001.Advice     = "";

mkICConstraintErr_002.Request    = "Creation of a mkCIConstraint";
mkICConstraintErr_002.Diagnostic = "The constraint \"/p1\" is not well formed"; 
mkICConstraintErr_002.Advice     = "";

mkICConstraintErr_003.Request    = "evaluation of a mkCIConstraint";
mkICConstraintErr_003.Diagnostic = "The constraint was a negation but the contraposition was found NULL"; 
mkICConstraintErr_003.Advice     = "";

mkICOSConstraintErr_001.Request    = "parsing of an OS constraint";
mkICOSConstraintErr_001.Diagnostic = "The constraint /p1 is not well formed"; 
mkICOSConstraintErr_001.Advice     = "";

mkH2XMLConverterErr_001.Request    = "Creation of mkH2XMLConverter";
mkH2XMLConverterErr_001.Diagnostic = "Could not find icH2XML.xml"; 
mkH2XMLConverterErr_001.Advice     = "check RTV";

mkH2XMLConverterErr_002.Request    = "Conversion .h to .xml: the method";
mkH2XMLConverterErr_002.Diagnostic = "/p1 has no translation"; 
mkH2XMLConverterErr_002.Advice     = "";

mkXML2ScriptConverterErr_001.Request    = "Creation of mkXML2ScriptConverter";
mkXML2ScriptConverterErr_001.Diagnostic = "Could not find XML2Script.xml"; 
mkXML2ScriptConverterErr_001.Advice     = "check RTV";

mkXML2ScriptConverterErr_002.Request    = "Convertion of an xml method to .script encoding";
mkXML2ScriptConverterErr_002.Diagnostic = "No encoding for /p1 found"; 
mkXML2ScriptConverterErr_002.Advice     = "";

mkXML2ScriptConverterErr_003.Request    = "Encoding of framework type";
mkXML2ScriptConverterErr_003.Diagnostic = "No encoding for /p1 found"; 
mkXML2ScriptConverterErr_003.Advice     = "";

mkXML2ScriptConverterErr_004.Request    = "Encoding os";
mkXML2ScriptConverterErr_004.Diagnostic = "Unknown os /p1"; 
mkXML2ScriptConverterErr_004.Advice     = "";

mkXML2ScriptConverterErr_005.Request    = "Conversion of argument";
mkXML2ScriptConverterErr_005.Diagnostic = "Error while encoding value /p1 of argument /p2 in method /p3"; 
mkXML2ScriptConverterErr_005.Advice     = "";

mkICModelScriptWriter_001.Request    = "Creating .script file";
mkICModelScriptWriter_001.Diagnostic = "could not create script file /p1"; 
mkICModelScriptWriter_001.Advice     = "check path or creation\write right";

mkIdCardParserErr_001.Request    = "Reading identityCard .h";
mkIdCardParserErr_001.Diagnostic = "Could not open or read /p1"; 
mkIdCardParserErr_001.Advice     = "check path or read right";

mkIdCardParserErr_002.Request    = "Reading identityCard .h";
mkIdCardParserErr_002.Diagnostic = "Missing #endif line /p1  in file /p2"; 
mkIdCardParserErr_002.Advice     = "";

mkIdCardParserErr_003.Request    = "Reading identityCard .h";
mkIdCardParserErr_003.Diagnostic = "Unrocognized syntax at line /p1 in file /p2"; 
mkIdCardParserErr_003.Advice     = "";

mkIdCardParserErr_004.Request    = "Reading identityCard .h";
mkIdCardParserErr_004.Diagnostic = "Comments not closed correctly at line /p1 in file /p2"; 
mkIdCardParserErr_004.Advice     = "";

mkIdCardParserErr_005.Request    = "Reading identityCard .h";
mkIdCardParserErr_005.Diagnostic = "paren not closed correctly at line /p1 in file /p2"; 
mkIdCardParserErr_005.Advice     = "";

mkIdCardParserErr_006.Request    = "Reading identityCard .h";
mkIdCardParserErr_006.Diagnostic = "Missing coma at line /p1 after /p2 in file /p3"; 
mkIdCardParserErr_006.Advice     = "";

mkIdCardParserErr_007.Request    = "Reading identityCard .h";
mkIdCardParserErr_007.Diagnostic = "Missing enclosing double quote \" at line /p1 in file /p2"; 
mkIdCardParserErr_007.Advice     = "close it";

mkIdCardParserErr_008.Request    = "Reading identityCard .h";
mkIdCardParserErr_008.Diagnostic = "missing \"(\" line /p1 in file /p2"; 
mkIdCardParserErr_008.Advice     = "";

mkOldIdCardReaderErr_001.Request    = "Reading identityCard .h";
mkOldIdCardReaderErr_001.Diagnostic = "Could not find identityCard.h for framework /p1"; 
mkOldIdCardReaderErr_001.Advice     = "Check path";

mkOldIdCardReaderErr_002.Request    = "Reading identityCard .h";
mkOldIdCardReaderErr_002.Diagnostic = "unknown type of framework /p1"; 
mkOldIdCardReaderErr_002.Advice     = "check the extension name of the framework";

mkXmlICModelValidatorErr_001.Request    = "Validation of a model";
mkXmlICModelValidatorErr_001.Diagnostic = "The model has no path"; 
mkXmlICModelValidatorErr_001.Advice     = "Check path";

mkXmlICModelValidatorErr_002.Request    = "Validation of a model";
mkXmlICModelValidatorErr_002.Diagnostic = "Could not find the schema location"; 
mkXmlICModelValidatorErr_002.Advice     = "Check the schema location";

mkXmlICModelValidatorErr_003.Request    = "Validation of a model";
mkXmlICModelValidatorErr_003.Diagnostic = "Could not find the schema file"; 
mkXmlICModelValidatorErr_003.Advice     = "Check the rtv or the value of the schema location";

mkICOperatorErr_001.Request    = "Resolution of include";
mkICOperatorErr_001.Diagnostic = "could not locate the include /p1 in /p2"; 
mkICOperatorErr_001.Advice     = "Check the path specified in the identityCard or check the existence of the file";

mkICOperatorPackagingErr_001.Request    = "Compilation of model";
mkICOperatorPackagingErr_001.Diagnostic = "incompatibility of type: fw /p1 of type /p2 has an identitycard of type /p3"; 
mkICOperatorPackagingErr_001.Advice     = "";

mkICOperatorPackagingErr_002.Request    = "Resolution of include";
mkICOperatorPackagingErr_002.Diagnostic = "Wrong type in identityCard inclusion. /p1 of type /p2 includes /p3 of type /p4."; 
mkICOperatorPackagingErr_002.Advice     = "Change type of incuded IdentityCard";

mkICOperatorPackagingErr_003.Request    = "Resolution of include";
mkICOperatorPackagingErr_003.Diagnostic = "Unknown type of include file /p1 in /p2."; 
mkICOperatorPackagingErr_003.Advice     = "";

mkIdCardTransformerErr_001.Request    = "Resolution of include";
mkIdCardTransformerErr_001.Diagnostic = "Could not find the included file /p1"; 
mkIdCardTransformerErr_001.Advice     = "Check paths";

mkIdCardTransformerErr_002.Request    = "Resolution of include";
mkIdCardTransformerErr_002.Diagnostic = "The included file /p1 was found of an incompatible mode type /p2 with its including model type /p3"; 
mkIdCardTransformerErr_002.Advice     = "?";

mkIdcardAstTransformerErr_001.Request    = "Transformation of IdentityCard.h to xml";
mkIdcardAstTransformerErr_001.Diagnostic = "#if os are not supported within #if os"; 
mkIdcardAstTransformerErr_001.Advice     = "";

mkIdcardAstTransformerErr_002.Request    = "Transformation of IdentityCard.h to xml";
mkIdcardAstTransformerErr_002.Diagnostic = "#ifdef are not supported within #ifdef"; 
mkIdcardAstTransformerErr_002.Advice     = "";

mkIdcardAstTransformerErr_003.Request    = "Transformation of IdentityCard.h to xml";
mkIdcardAstTransformerErr_003.Diagnostic = "Unknown parameter /P2 for /P1"; 
mkIdcardAstTransformerErr_003.Advice     = "";


mkIdcardIncludeFilterErr_001.Request    = "Reading configuration file";
mkIdcardIncludeFilterErr_001.Diagnostic = "Cannot read or find ICIncludeFilter.xml"; 
mkIdcardIncludeFilterErr_001.Advice     = "";

