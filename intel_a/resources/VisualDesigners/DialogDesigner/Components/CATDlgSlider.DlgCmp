<?xml version='1.0' encoding='UTF-8' ?>
<DSxDevCodeGen><Content ModuleName = "DI0PANV2"><ExportData Name = "CATDlgSlider" Version = "1.0" Inheritable = "false" LightSimulationOnly = "false">
      <Behavior Model = "Slider"/>
      <Toolbox Category = "DS Dialog Component" IconName = "IDDTbxSlider" DisplayName = "CATDlgSlider">
        <Description><![CDATA[
Base class for scale control.
Role: The slider enables the end user to select a value among a discrete list of values ranging from a start value to an end value. The value can be incremented or decremented by dragging along with the mouse, or clicking in the sliding area. You set the start and end values as floats, while you set the step number as an int. The step value is the difference between start and end values, divided by the number of steps. A slider can be horizontal or vertical.
]]></Description>
      </Toolbox>
      <MetaModel>
        <Properties>
          <Direction Type = "DLGDirectionHV" Default = "Horizontal" Category = "Style" Mergeable = "true" Description = "Sets the direction of the slider."/>
          <HideValue Type = "bool" Default = "false" Category = "Style" Mergeable = "true" Description = "Set to true if the slider shouldn't display the current value."/>
          <Value Type = "float" Default = "0" Category = "General" Mergeable = "true" Description = "The current value of the slider."/>
          <DecimalPoint Type = "int" Default = "6" Category = "General" Mergeable = "true" Description = "The number of displayed decimals."/>
          <MinRange Type = "float" Default = "0" Category = "General" Mergeable = "true" Description = "The minimal value that the slider can have."/>
          <MaxRange Type = "float" Default = "100" Category = "General" Mergeable = "true" Description = "The maximum value that the slider can have."/>
          <StepCount Type = "int" Default = "10" Category = "General" Mergeable = "true" Description = "The number of subdivisions of the slider."/>
          <Magnitude Type = "CATDlgMagnitude" Default = "None" Category = "General" Mergeable = "true" Description = "Sets the magnitude to be used for the value displayed"/>
          <Precision Type = "int" Default = "-1" Category = "General" Mergeable = "true" Description = "Sets the precision to be used for the value displayed"/>
          <UseDecimalPrecision Type = "bool" Default = "false" Category = "General" Mergeable = "true" Description = "TRUE if the precision gives the number of digits to appear after the decimal point character, FALSE if the precision gives the number of significative digits"/>
          <Unit Type = "CATDlgUnit" Default = "None" Category = "General" Mergeable = "true" Description = "Sets the unit to be used for the value displayed"/>
          <Enabled Type = "bool" Default = "true" Category = "General" Mergeable = "true" Description = "Sets whether the widget is enabled."/>
          <Visible Type = "bool" Default = "true" Category = "General" Mergeable = "true" Description = "Sets whether the widget is visible."/>
          <Title Type = "string" Default = "" Category = "Text Resources" Mergeable = "true" Description = "Title or text content of the widget."/>
          <Accelerator Type = "string" Default = "" Category = "Text Resources" Mergeable = "true" Description = "The accelerator of the dialog object as a CATUnicodeString instance."/>
          <Help Type = "string" Default = "" Category = "Text Resources" Mergeable = "true" Description = "The help message displayed in the message area of the status bar."/>
          <ShortHelp Type = "string" Default = "" Category = "Text Resources" Mergeable = "true" Description = "The short help message (or tooltip) of the dialog object."/>
          <LongHelp Type = "string" Default = "" Category = "Text Resources" Mergeable = "true" Description = "The message is displayed in a box when the What's This command is used."/>
          <IconNormal Type = "DLGIcon" Default = "" Category = "Icons" Mergeable = "true" Description = "The name of the icon in its default state"/>
          <IconSelected Type = "DLGIcon" Default = "" Category = "Icons" Mergeable = "true" Description = "The name of the icon when the dialog object is selected"/>
          <IconFocussed Type = "DLGIcon" Default = "" Category = "Icons" Mergeable = "true" Description = "The name of the icon when the dialog object is on focus"/>
        </Properties>
        <Callbacks>
          <Dragged Type = "CATCommandMethod" Category = "Callbacks" Mergeable = "true" Description = "Event notification sent as long as the slider is dragged."/>
          <ValueChanged Type = "CATCommandMethod" Category = "Callbacks" Mergeable = "true" Description = "Event notification sent whenever the end user clicks in the scrollable field."/>
          <DragCancel Type = "CATCommandMethod" Category = "Common" Mergeable = "true" Description = "Sent whenever a mouse drag mechanism stops."/>
          <DragButton Type = "CATCommandMethod" Category = "Common" Mergeable = "true" Description = "Sent whenever a mouse drag mechanism starts on a button."/>
          <DragEnter Type = "CATCommandMethod" Category = "Common" Mergeable = "true" Description = "Sent whenever a mouse drag enters the window."/>
          <DragLeave Type = "CATCommandMethod" Category = "Common" Mergeable = "true" Description = "Sent whenever a mouse drag leaves the window."/>
          <DragOver Type = "CATCommandMethod" Category = "Common" Mergeable = "true" Description = "Sent whenever a mouse drag rolls over the window."/>
          <DragDrop Type = "CATCommandMethod" Category = "Common" Mergeable = "true" Description = "Sent whenever a mouse drop happens. This notification is sent by the target of the drag&amp;drop operation."/>
          <DragDropEnd Type = "CATCommandMethod" Category = "Common" Mergeable = "true" Description = "Sent whenever a mouse drop happens.This notification is sent by the source of the drag&amp;drop operation."/>
          <HelpRequested Type = "CATCommandMethod" Category = "Common" Mergeable = "true" Description = "Sent whenever the object is selected using the What's This command."/>
          <Resized Type = "CATCommandMethod" Category = "Common" Mergeable = "true" Description = "Sent whenever the object is resized."/>
          <DragStart Type = "CATCommandMethod" Category = "Common" Mergeable = "true" Description = "Sent whenever a mouse drag mechanism begins."/>
          <VisibilityChanged Type = "CATCommandMethod" Category = "Common" Mergeable = "true" Description = "Sent whenever the object visibility is modified."/>
        </Callbacks>
      </MetaModel>
      <Production>
        <Instantiation>
          <Code><![CDATA[
<@int flags;
if ${Direction/IsDefault}=="false" {
flags|=${final:Direction};
}
if $HideValue=="true" {
flags|='CATDlgSldNoValue';
}@>
$InstanceName=new CATDlgSlider($ParentName,(const char*)${final:Name},<@flags@>);

]]></Code>
        </Instantiation>
        <Build>
          <Code><![CDATA[
<@configuration Generation {
if $DragCancel!="" {@>
AddAnalyseNotificationCB($InstanceName, $InstanceName->GetCancelDragNotification(),(CATCommandMethod)&$ClassName::$DragCancel,NULL);
<@}
if $DragButton!="" {@>
AddAnalyseNotificationCB($InstanceName, $InstanceName->GetDragButtonNotification(),(CATCommandMethod)&$ClassName::$DragButton,NULL);
<@}
if $DragEnter!="" {@>
AddAnalyseNotificationCB($InstanceName, $InstanceName->GetDragEnterNotification(),(CATCommandMethod)&$ClassName::$DragEnter,NULL);
<@}
if $DragLeave!="" {@>
AddAnalyseNotificationCB($InstanceName, $InstanceName->GetDragLeaveNotification(),(CATCommandMethod)&$ClassName::$DragLeave,NULL);
<@}
if $DragOver!="" {@>
AddAnalyseNotificationCB($InstanceName, $InstanceName->GetDragOverNotification(),(CATCommandMethod)&$ClassName::$DragOver,NULL);
<@}
if $DragDrop!="" {@>
AddAnalyseNotificationCB($InstanceName, $InstanceName->GetDropNotification(),(CATCommandMethod)&$ClassName::$DragDrop,NULL);
<@}
if $DragDropEnd!="" {@>
AddAnalyseNotificationCB($InstanceName, $InstanceName->GetEndDropNotification(),(CATCommandMethod)&$ClassName::$DragDropEnd,NULL);
<@}
if $HelpRequested!="" {@>
AddAnalyseNotificationCB($InstanceName, $InstanceName->GetHelpNotification(),(CATCommandMethod)&$ClassName::$HelpRequested,NULL);
<@}
if $Resized!="" {@>
AddAnalyseNotificationCB($InstanceName, $InstanceName->GetResizeNotification(),(CATCommandMethod)&$ClassName::$Resized,NULL);
<@}
if $DragStart!="" {@>
AddAnalyseNotificationCB($InstanceName, $InstanceName->GetStartDragNotification(),(CATCommandMethod)&$ClassName::$DragStart,NULL);
<@}
if $VisibilityChanged!="" {@>
AddAnalyseNotificationCB($InstanceName, $InstanceName->GetVisibilityNotification(),(CATCommandMethod)&$ClassName::$VisibilityChanged,NULL);
<@}
}
configuration XAML {@>
if(cmd!=NULL && m_DragCancel!="") {
cmd->AddCBAnalyse($InstanceName, $InstanceName->GetCancelDragNotification(),m_DragCancel);
}
if(cmd!=NULL && m_DragButton!="") {
cmd->AddCBAnalyse($InstanceName, $InstanceName->GetDragButtonNotification(),m_DragButton);
}
if(cmd!=NULL && m_DragEnter!="") {
cmd->AddCBAnalyse($InstanceName, $InstanceName->GetDragEnterNotification(),m_DragEnter);
}
if(cmd!=NULL && m_DragLeave!="") {
cmd->AddCBAnalyse($InstanceName, $InstanceName->GetDragLeaveNotification(),m_DragLeave);
}
if(cmd!=NULL && m_DragOver!="") {
cmd->AddCBAnalyse($InstanceName, $InstanceName->GetDragOverNotification(),m_DragOver);
}
if(cmd!=NULL && m_DragDrop!="") {
cmd->AddCBAnalyse($InstanceName, $InstanceName->GetDropNotification(),m_DragDrop);
}
if(cmd!=NULL && m_DragDropEnd!="") {
cmd->AddCBAnalyse($InstanceName, $InstanceName->GetEndDropNotification(),m_DragDropEnd);
}
if(cmd!=NULL && m_HelpRequested!="") {
cmd->AddCBAnalyse($InstanceName, $InstanceName->GetHelpNotification(),m_HelpRequested);
}
if(cmd!=NULL && m_Resized!="") {
cmd->AddCBAnalyse($InstanceName, $InstanceName->GetResizeNotification(),m_Resized);
}
if(cmd!=NULL && m_DragStart!="") {
cmd->AddCBAnalyse($InstanceName, $InstanceName->GetStartDragNotification(),m_DragStart);
}
if(cmd!=NULL && m_VisibilityChanged!="") {
cmd->AddCBAnalyse($InstanceName, $InstanceName->GetVisibilityNotification(),m_VisibilityChanged);
}
<@}

if ${/HandleResources}!="true" {
if (${Title/IsDefault}=="false"){@>
$InstanceName->SetTitle(${final:Title});
<@}
if (${Help/IsDefault}=="false"){@>
$InstanceName->SetHelp(${final:Help});
<@}
if (${ShortHelp/IsDefault}=="false"){@>
$InstanceName->SetShortHelp(${final:ShortHelp});
<@}
if (${LongHelp/IsDefault}=="false"){@>
$InstanceName->SetLongHelp(${final:LongHelp});
<@}
if (${Accelerator/IsDefault}=="false"){@>
$InstanceName->SetAcceleratorString(${final:Accelerator});
<@}
if (${IconNormal/IsDefault}=="false") || (${IconSelected/IsDefault}=="false") || (${IconFocussed/IsDefault}=="false") { @>
$InstanceName->SetIconName((const char*)${string:IconNormal},(const char*)${string:IconSelected},(const char*)${string:IconFocussed});
<@}
}
if ${/HandleResources}=="true" {
configuration Simulation {@>
CATUnicodeString catalog = $MsgCatalog;
CATUnicodeString path=$WidgetPath;
CATUnicodeString key=path;
key.Append("Title");

$InstanceName->SetTitle(CATMsgCatalog::BuildMessage((const char*)catalog, (const char*)key));

key=path;
key.Append("Help");
$InstanceName->SetHelp(CATMsgCatalog::BuildMessage((const char*)catalog, (const char*)key));
key=path;
key.Append("ShortHelp");
$InstanceName->SetShortHelp(CATMsgCatalog::BuildMessage((const char*)catalog, (const char*)key));
key=path;
key.Append("LongHelp");
$InstanceName->SetLongHelp(CATMsgCatalog::BuildMessage((const char*)catalog, (const char*)key));
key=path;
key.Append("Accelerator");
$InstanceName->SetAcceleratorString(CATMsgCatalog::BuildMessage((const char*)catalog, (const char*)key));
CATUnicodeString iconKey=path;
iconKey.Append("Icon");
CATUnicodeString iconSelKey=path;
iconSelKey.Append("IconSel");
CATUnicodeString iconFocusKey=path;
iconFocusKey.Append("IconFocus");

CATString iconName,iconSelName,iconFocusName;
CATRscCatalog::BuildResource((const char*)catalog, (const char*)iconKey, iconName);
CATRscCatalog::BuildResource((const char*)catalog, (const char*)iconSelKey, iconSelName);
CATRscCatalog::BuildResource((const char*)catalog, (const char*)iconFocusKey, iconFocusName);
$InstanceName->SetIconName(iconName, iconSelName, iconFocusName);
<@
}
}

if (${Enabled/IsDefault}=="false"){@>
$InstanceName->SetSensitivity(${DLGEnabled:Enabled});
<@}
if (${Visible/IsDefault}=="false"){@>
$InstanceName->SetVisibility(${DLGVisible:Visible});
<@}

if $GridLayoutConstraint!="" {
int gridAnchor;
if ${GridLayoutConstraint/Anchor/AttachedToLeft}=="true" {
gridAnchor|='CATGRID_LEFT';
}
if ${GridLayoutConstraint/Anchor/AttachedToRight}=="true" {
gridAnchor|='CATGRID_RIGHT';
}
if ${GridLayoutConstraint/Anchor/AttachedToTop}=="true" {
gridAnchor|='CATGRID_TOP';
}
if ${GridLayoutConstraint/Anchor/AttachedToBottom}=="true" {
gridAnchor|='CATGRID_BOTTOM';
}
if ${GridLayoutConstraint/Anchor/ConstantWidth}=="true" {
gridAnchor|='CATGRID_CST_WIDTH';
}
if ${GridLayoutConstraint/Anchor/ConstantHeight}=="true" {
gridAnchor|='CATGRID_CST_HEIGHT';
}@>
$InstanceName->SetGridConstraints(${int:GridLayoutConstraint/Row},${int:GridLayoutConstraint/Col},${int:GridLayoutConstraint/Width},${int:GridLayoutConstraint/Height},<@gridAnchor@>);
<@}@>


<@if ${Magnitude/IsDefault}=="false" { @>
$InstanceName->SetMagnitude((CATDlgControl::CATDlgMagnitude)${final:Magnitude});
<@}
if (${Precision/IsDefault}=="false") || (${UseDecimalPrecision/IsDefault}=="false") { @>
$InstanceName->SetPrecision(${final:Precision},${final:UseDecimalPrecision});
<@}
if ${Unit/IsDefault}=="false" { @>
$InstanceName->SetUnit((CATDlgControl::CATDlgUnit)${final:Unit});
<@}@>

<@configuration Generation {
if $Dragged!="" {@>
AddAnalyseNotificationCB($InstanceName, $InstanceName->GetSliderDragNotification(),(CATCommandMethod)&$ClassName::$Dragged,NULL);
<@}
if $ValueChanged!="" {@>
AddAnalyseNotificationCB($InstanceName, $InstanceName->GetSliderModifyNotification(),(CATCommandMethod)&$ClassName::$ValueChanged,NULL);
<@}
}@>
<@configuration XAML {@>
if(cmd!=NULL && m_Dragged!="") {
cmd->AddCBAnalyse($InstanceName, $InstanceName->GetSliderDragNotification(),m_Dragged);
}
if(cmd!=NULL && m_ValueChanged!="") {
cmd->AddCBAnalyse($InstanceName, $InstanceName->GetSliderModifyNotification(),m_ValueChanged);
}
<@}
if (${Value/IsDefault}=="false"){@>
$InstanceName->SetCurrentValue(${float:Value});
<@}
if (${DecimalPoint/IsDefault}=="false"){@>
$InstanceName->SetDecimalPoint(${final:DecimalPoint});
<@}
if (${MinRange/IsDefault}=="false") || (${MaxRange/IsDefault}=="false") || (${StepCount/IsDefault}=="false"){@>
$InstanceName->SetRange(${float:MinRange},${float:MaxRange},${final:StepCount});
<@}@>


]]></Code>
        </Build>
        <Declarations>
          <Code><![CDATA[
class CATDlgSlider;

]]></Code>
        </Declarations>
        <Includes>
          <Code><![CDATA[
#include "CATDlgSlider.h"
<@configuration Simulation {@>#include "CATDlgGridConstraints.h"
#include "CATMsgCatalog.h"
#include "CATRscCatalog.h"
<@}@>
]]></Code>
        </Includes>
      </Production>
    </ExportData></Content></DSxDevCodeGen>
