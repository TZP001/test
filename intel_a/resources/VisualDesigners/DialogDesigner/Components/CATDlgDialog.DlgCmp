<?xml version='1.0' encoding='UTF-8' ?>
<DSxDevCodeGen><Content ModuleName = "DI0PANV2"><ExportData Name = "CATDlgDialog" Version = "1.0" Inheritable = "true" LightSimulationOnly = "false">
      <Behavior Model = "DialogBox"/>
      <MetaModel>
        <Properties>
          <UseOKButton Type = "bool" Default = "false" Category = "Style" Mergeable = "true" Description = "Set to true to force the dialog box to show a OK button. This option is ignored if UseOKCancelPreviewButtons, UseCloseButton or NoButtons is set to true."/>
          <UseCancelButton Type = "bool" Default = "false" Category = "Style" Mergeable = "true" Description = "Set to true to force the dialog box to show a Cancel button. This option is ignored if UseOKCancelPreviewButtons, UseCloseButton or NoButtons is set to true."/>
          <UseHelpButton Type = "bool" Default = "false" Category = "Style" Mergeable = "true" Description = "Set to true to force the dialog box to show a Help button. This option is ignored if UseOKCancelPreviewButtons, UseCloseButton or NoButtons is set to true."/>
          <UseApplyButton Type = "bool" Default = "false" Category = "Style" Mergeable = "true" Description = "Set to true to force the dialog box to show a Apply button. This option is ignored if UseOKCancelPreviewButtons, UseCloseButton or NoButtons is set to true."/>
          <UseCloseButton Type = "bool" Default = "false" Category = "Style" Mergeable = "true" Description = "Set to true for a standard dialog window with the Close push button. This options excludes other dialog buttons."/>
          <UseOKCancelPreviewButtons Type = "bool" Default = "false" Category = "Style" Mergeable = "true" Description = "Set to true to use the OK, Cancel and Preview buttons in the dialog box. This options excludes other dialog buttons."/>
          <UseOKApplyCloseButtons Type = "bool" Default = "false" Category = "Style" Mergeable = "true" Description = "Set to true to use the OK, Apply and Close buttons in the dialog box. This options excludes other dialog buttons."/>
          <ModalDialog Type = "bool" Default = "false" Category = "Style" Mergeable = "true" Description = "If set to true,no interaction is possible outside this window as long as it is displayed."/>
          <Decoration Type = "DLGDialogDecoration" Default = "Default" Category = "Style" Mergeable = "true" Description = "Title bar and borders appearance."/>
          <NoButtons Type = "bool" Default = "false" Category = "Style" Mergeable = "true" Description = "Set to true for a dialog window without any push button."/>
          <CreateOnPointer Type = "bool" Default = "false" Category = "Style" Mergeable = "true" Description = "Set to true for a dialog window created at the mouse cursor location."/>
          <AutoResize Type = "bool" Default = "false" Category = "Style" Mergeable = "true" Description = "Set to true for a dialog window automatically resized with respect to its content's modifications."/>
          <NotResizable Type = "bool" Default = "false" Category = "Style" Mergeable = "true" Description = "Set to true for a dialog window not resizable by the end user. The minimize and maximize buttons are not available."/>
          <MDIChild Type = "bool" Default = "false" Category = "Style" Mergeable = "true" Description = "Set to true for a dialog window located within its parent application main window."/>
          <TitleBarHelpButton Type = "bool" Default = "false" Category = "Style" Mergeable = "true" Description = "Set to true for a dialog window with the help button located in the title bar, as a question mark. This is possible with Windows only and has no effect with UNIX."/>
          <ApplyBtnTitle Type = "string" Default = "" Category = "General" Mergeable = "true" Description = "The Apply push button title."/>
          <CancelBtnTitle Type = "string" Default = "" Category = "General" Mergeable = "true" Description = "The Cancel push button title."/>
          <HelpBtnTitle Type = "string" Default = "" Category = "General" Mergeable = "true" Description = "The Help push button title."/>
          <OKBtnTitle Type = "string" Default = "" Category = "General" Mergeable = "true" Description = "The OK push button title."/>
          <PreviewBtnTitle Type = "string" Default = "" Category = "General" Mergeable = "true" Description = "The Preview push button title."/>
          <DefaultButton Type = "DLGDialogButton" Default = "OKButton" Category = "General" Mergeable = "true" Description = "The default push button is the one activated when the end user presses the Enter key."/>
          <ApplyBtnEnabled Type = "bool" Default = "true" Category = "General" Mergeable = "true" Description = "Sets whether the Apply push button is enabled."/>
          <CancelBtnEnabled Type = "bool" Default = "true" Category = "General" Mergeable = "true" Description = "Sets whether the Cancel push button is enabled."/>
          <CloseBtnEnabled Type = "bool" Default = "true" Category = "General" Mergeable = "true" Description = "Sets whether the Close push button is enabled."/>
          <HelpBtnEnabled Type = "bool" Default = "true" Category = "General" Mergeable = "true" Description = "Sets whether the Help push button is enabled."/>
          <OKBtnEnabled Type = "bool" Default = "true" Category = "General" Mergeable = "true" Description = "Sets whether the OK push button is enabled."/>
          <PreviewBtnEnabled Type = "bool" Default = "true" Category = "General" Mergeable = "true" Description = "Sets whether the Preview push button is enabled."/>
          <Width Type = "int" Default = "-1" Category = "Layout" Mergeable = "true" Description = "Sets the width of the dialog box."/>
          <Height Type = "int" Default = "-1" Category = "Layout" Mergeable = "true" Description = "Sets the height of the dialog box."/>
          <LayoutType Type = "DLGLayoutType" Default = "Grid" Category = "Layout" Mergeable = "false" Description = "Sets the layout manager for the container"/>
          <Enabled Type = "bool" Default = "true" Category = "General" Mergeable = "true" Description = "Sets whether the widget is enabled."/>
          <Visible Type = "bool" Default = "true" Category = "General" Mergeable = "true" Description = "Sets whether the widget is visible."/>
          <Title Type = "string" Default = "" Category = "Text Resources" Mergeable = "true" Description = "Title or text content of the widget."/>
          <Accelerator Type = "string" Default = "" Category = "Text Resources" Mergeable = "true" Description = "The accelerator of the dialog object as a CATUnicodeString instance."/>
          <Help Type = "string" Default = "" Category = "Text Resources" Mergeable = "true" Description = "The help message displayed in the message area of the status bar."/>
          <ShortHelp Type = "string" Default = "" Category = "Text Resources" Mergeable = "true" Description = "The short help message (or tooltip) of the dialog object."/>
          <LongHelp Type = "string" Default = "" Category = "Text Resources" Mergeable = "true" Description = "The message is displayed in a box when the What's This command is used."/>
          <IconNormal Type = "DLGIcon" Default = "" Category = "Icons" Mergeable = "true" Description = "The name of the icon in its default state"/>
          <IconSelected Type = "DLGIcon" Default = "" Category = "Icons" Mergeable = "true" Description = "The name of the icon when the dialog object is selected"/>
          <IconFocussed Type = "DLGIcon" Default = "" Category = "Icons" Mergeable = "true" Description = "The name of the icon when the dialog object is on focus"/>
          <IsCommand Type = "bool" Default = "" Category = "General" Mergeable = "true" Description = "Sets whether the generated Dialog should implement CATCommand functionality"/>
        </Properties>
        <Callbacks>
          <ApplyBtnPushed Type = "CATCommandMethod" Category = "Callbacks" Mergeable = "true" Description = "Event notification sent whenever the Apply push button is pressed."/>
          <CancelBtnPushed Type = "CATCommandMethod" Category = "Callbacks" Mergeable = "true" Description = "Event notification sent whenever the Cancel push button is pressed."/>
          <CloseBtnPushed Type = "CATCommandMethod" Category = "Callbacks" Mergeable = "true" Description = "Event notification sent whenever the Close push button is pressed."/>
          <HelpBtnPushed Type = "CATCommandMethod" Category = "Callbacks" Mergeable = "true" Description = "Event notification sent whenever the Help push button is pressed."/>
          <OKBtnPushed Type = "CATCommandMethod" Category = "Callbacks" Mergeable = "true" Description = "Event notification sent whenever the OK push button is pressed."/>
          <PreviewBtnPushed Type = "CATCommandMethod" Category = "Callbacks" Mergeable = "true" Description = "Event notification sent whenever the Preview push button is pressed."/>
          <MDIActivated Type = "CATCommandMethod" Category = "Callbacks" Mergeable = "true" Description = "Event notification sent whenever the dialog window is activated."/>
          <MDIClosed Type = "CATCommandMethod" Category = "Callbacks" Mergeable = "true" Description = "Event notification sent whenever the dialog window is closed."/>
          <MDIMaximized Type = "CATCommandMethod" Category = "Callbacks" Mergeable = "true" Description = "Event notification sent whenever the dialog window is maximized."/>
          <MDIMinimized Type = "CATCommandMethod" Category = "Callbacks" Mergeable = "true" Description = "Event notification sent whenever the dialog window is minimized."/>
          <MDINext Type = "CATCommandMethod" Category = "Callbacks" Mergeable = "true" Description = "Event notification sent whenever the dialog window is activated as the next of the current one."/>
          <MDIPrevious Type = "CATCommandMethod" Category = "Callbacks" Mergeable = "true" Description = "Event notification sent whenever the dialog window is activated as the previous of the current one."/>
          <MDIRestored Type = "CATCommandMethod" Category = "Callbacks" Mergeable = "true" Description = "Event notification sent whenever the dialog window is restored."/>
          <DragCancel Type = "CATCommandMethod" Category = "Common" Mergeable = "true" Description = "Sent whenever a mouse drag mechanism stops."/>
          <DragButton Type = "CATCommandMethod" Category = "Common" Mergeable = "true" Description = "Sent whenever a mouse drag mechanism starts on a button."/>
          <DragEnter Type = "CATCommandMethod" Category = "Common" Mergeable = "true" Description = "Sent whenever a mouse drag enters the window."/>
          <DragLeave Type = "CATCommandMethod" Category = "Common" Mergeable = "true" Description = "Sent whenever a mouse drag leaves the window."/>
          <DragOver Type = "CATCommandMethod" Category = "Common" Mergeable = "true" Description = "Sent whenever a mouse drag rolls over the window."/>
          <DragDrop Type = "CATCommandMethod" Category = "Common" Mergeable = "true" Description = "Sent whenever a mouse drop happens. This notification is sent by the target of the drag&amp;drop operation."/>
          <DragDropEnd Type = "CATCommandMethod" Category = "Common" Mergeable = "true" Description = "Sent whenever a mouse drop happens.This notification is sent by the source of the drag&amp;drop operation."/>
          <HelpRequested Type = "CATCommandMethod" Category = "Common" Mergeable = "true" Description = "Sent whenever the object is selected using the What's This command."/>
          <Resized Type = "CATCommandMethod" Category = "Common" Mergeable = "true" Description = "Sent whenever the object is resized."/>
          <DragStart Type = "CATCommandMethod" Category = "Common" Mergeable = "true" Description = "Sent whenever a mouse drag mechanism begins."/>
          <VisibilityChanged Type = "CATCommandMethod" Category = "Common" Mergeable = "true" Description = "Sent whenever the object visibility is modified."/>
        </Callbacks>
      </MetaModel>
      <Production>
        <Instantiation>
          <Code><![CDATA[
<@int flags;
if $UseOKButton=="true" { 
flags|='CATDlgWndOK';
}
if $UseCancelButton=="true" { 
flags|='CATDlgWndCANCEL';
}
if $UseHelpButton=="true" { 
flags|='CATDlgWndHELP';
}
if $UseApplyButton=="true" { 
flags|='CATDlgWndAPPLY';
}
if $UseCloseButton=="true" { 
flags|='CATDlgWndBtnClose';
}
if $UseOKCancelPreviewButtons=="true" { 
flags|='CATDlgWndBtnOKCancelPreview';
}
if $UseOKApplyCloseButtons=="true" { 
flags|='CATDlgWndBtnOKApplyClose';
}
if $ModalDialog=="true" { 
flags|='CATDlgWndModal';
}
if ${Decoration/IsDefault}=="false" { 
flags|=${final:Decoration};
}
if $NoButtons=="true" { 
flags|='CATDlgWndNoButton';
}
if $CreateOnPointer=="true" { 
flags|='CATDlgWndPointerLocation';
}
if $AutoResize=="true" { 
flags|='CATDlgWndAutoResize';
}
if $NotResizable=="true" { 
flags|='CATDlgWndNoResize';
}
if $MDIChild=="true" { 
flags|='CATDlgWndChildMDI';
}
if $TitleBarHelpButton=="true" { 
flags|='CATDlgWndTitleBarHelp';
}
flags|=${final:LayoutType};
@>
$InstanceName=new CATDlgDialog($ParentName,(const char*)${final:Name},<@flags@>);

]]></Code>
        </Instantiation>
        <Build>
          <Code><![CDATA[
<@configuration Generation {
if $DragCancel!="" {@>
AddAnalyseNotificationCB($InstanceName, $InstanceName->GetCancelDragNotification(),(CATCommandMethod)&$ClassName::$DragCancel,NULL);
<@}
if $DragButton!="" {@>
AddAnalyseNotificationCB($InstanceName, $InstanceName->GetDragButtonNotification(),(CATCommandMethod)&$ClassName::$DragButton,NULL);
<@}
if $DragEnter!="" {@>
AddAnalyseNotificationCB($InstanceName, $InstanceName->GetDragEnterNotification(),(CATCommandMethod)&$ClassName::$DragEnter,NULL);
<@}
if $DragLeave!="" {@>
AddAnalyseNotificationCB($InstanceName, $InstanceName->GetDragLeaveNotification(),(CATCommandMethod)&$ClassName::$DragLeave,NULL);
<@}
if $DragOver!="" {@>
AddAnalyseNotificationCB($InstanceName, $InstanceName->GetDragOverNotification(),(CATCommandMethod)&$ClassName::$DragOver,NULL);
<@}
if $DragDrop!="" {@>
AddAnalyseNotificationCB($InstanceName, $InstanceName->GetDropNotification(),(CATCommandMethod)&$ClassName::$DragDrop,NULL);
<@}
if $DragDropEnd!="" {@>
AddAnalyseNotificationCB($InstanceName, $InstanceName->GetEndDropNotification(),(CATCommandMethod)&$ClassName::$DragDropEnd,NULL);
<@}
if $HelpRequested!="" {@>
AddAnalyseNotificationCB($InstanceName, $InstanceName->GetHelpNotification(),(CATCommandMethod)&$ClassName::$HelpRequested,NULL);
<@}
if $Resized!="" {@>
AddAnalyseNotificationCB($InstanceName, $InstanceName->GetResizeNotification(),(CATCommandMethod)&$ClassName::$Resized,NULL);
<@}
if $DragStart!="" {@>
AddAnalyseNotificationCB($InstanceName, $InstanceName->GetStartDragNotification(),(CATCommandMethod)&$ClassName::$DragStart,NULL);
<@}
if $VisibilityChanged!="" {@>
AddAnalyseNotificationCB($InstanceName, $InstanceName->GetVisibilityNotification(),(CATCommandMethod)&$ClassName::$VisibilityChanged,NULL);
<@}
}
configuration XAML {@>
if(cmd!=NULL && m_DragCancel!="") {
cmd->AddCBAnalyse($InstanceName, $InstanceName->GetCancelDragNotification(),m_DragCancel);
}
if(cmd!=NULL && m_DragButton!="") {
cmd->AddCBAnalyse($InstanceName, $InstanceName->GetDragButtonNotification(),m_DragButton);
}
if(cmd!=NULL && m_DragEnter!="") {
cmd->AddCBAnalyse($InstanceName, $InstanceName->GetDragEnterNotification(),m_DragEnter);
}
if(cmd!=NULL && m_DragLeave!="") {
cmd->AddCBAnalyse($InstanceName, $InstanceName->GetDragLeaveNotification(),m_DragLeave);
}
if(cmd!=NULL && m_DragOver!="") {
cmd->AddCBAnalyse($InstanceName, $InstanceName->GetDragOverNotification(),m_DragOver);
}
if(cmd!=NULL && m_DragDrop!="") {
cmd->AddCBAnalyse($InstanceName, $InstanceName->GetDropNotification(),m_DragDrop);
}
if(cmd!=NULL && m_DragDropEnd!="") {
cmd->AddCBAnalyse($InstanceName, $InstanceName->GetEndDropNotification(),m_DragDropEnd);
}
if(cmd!=NULL && m_HelpRequested!="") {
cmd->AddCBAnalyse($InstanceName, $InstanceName->GetHelpNotification(),m_HelpRequested);
}
if(cmd!=NULL && m_Resized!="") {
cmd->AddCBAnalyse($InstanceName, $InstanceName->GetResizeNotification(),m_Resized);
}
if(cmd!=NULL && m_DragStart!="") {
cmd->AddCBAnalyse($InstanceName, $InstanceName->GetStartDragNotification(),m_DragStart);
}
if(cmd!=NULL && m_VisibilityChanged!="") {
cmd->AddCBAnalyse($InstanceName, $InstanceName->GetVisibilityNotification(),m_VisibilityChanged);
}
<@}

if ${/HandleResources}!="true" {
if (${Title/IsDefault}=="false"){@>
$InstanceName->SetTitle(${final:Title});
<@}
if (${Help/IsDefault}=="false"){@>
$InstanceName->SetHelp(${final:Help});
<@}
if (${ShortHelp/IsDefault}=="false"){@>
$InstanceName->SetShortHelp(${final:ShortHelp});
<@}
if (${LongHelp/IsDefault}=="false"){@>
$InstanceName->SetLongHelp(${final:LongHelp});
<@}
if (${Accelerator/IsDefault}=="false"){@>
$InstanceName->SetAcceleratorString(${final:Accelerator});
<@}
if (${IconNormal/IsDefault}=="false") || (${IconSelected/IsDefault}=="false") || (${IconFocussed/IsDefault}=="false") { @>
$InstanceName->SetIconName((const char*)${string:IconNormal},(const char*)${string:IconSelected},(const char*)${string:IconFocussed});
<@}
}
if ${/HandleResources}=="true" {
configuration Simulation {@>
CATUnicodeString catalog = $MsgCatalog;
CATUnicodeString path=$WidgetPath;
CATUnicodeString key=path;
key.Append("Title");

$InstanceName->SetTitle(CATMsgCatalog::BuildMessage((const char*)catalog, (const char*)key));

key=path;
key.Append("Help");
$InstanceName->SetHelp(CATMsgCatalog::BuildMessage((const char*)catalog, (const char*)key));
key=path;
key.Append("ShortHelp");
$InstanceName->SetShortHelp(CATMsgCatalog::BuildMessage((const char*)catalog, (const char*)key));
key=path;
key.Append("LongHelp");
$InstanceName->SetLongHelp(CATMsgCatalog::BuildMessage((const char*)catalog, (const char*)key));
key=path;
key.Append("Accelerator");
$InstanceName->SetAcceleratorString(CATMsgCatalog::BuildMessage((const char*)catalog, (const char*)key));
CATUnicodeString iconKey=path;
iconKey.Append("Icon");
CATUnicodeString iconSelKey=path;
iconSelKey.Append("IconSel");
CATUnicodeString iconFocusKey=path;
iconFocusKey.Append("IconFocus");

CATString iconName,iconSelName,iconFocusName;
CATRscCatalog::BuildResource((const char*)catalog, (const char*)iconKey, iconName);
CATRscCatalog::BuildResource((const char*)catalog, (const char*)iconSelKey, iconSelName);
CATRscCatalog::BuildResource((const char*)catalog, (const char*)iconFocusKey, iconFocusName);
$InstanceName->SetIconName(iconName, iconSelName, iconFocusName);
<@
}
}

if (${Enabled/IsDefault}=="false"){@>
$InstanceName->SetSensitivity(${DLGEnabled:Enabled});
<@}
if (${Visible/IsDefault}=="false"){@>
$InstanceName->SetVisibility(${DLGVisible:Visible});
<@}

if $GridLayoutConstraint!="" {
int gridAnchor;
if ${GridLayoutConstraint/Anchor/AttachedToLeft}=="true" {
gridAnchor|='CATGRID_LEFT';
}
if ${GridLayoutConstraint/Anchor/AttachedToRight}=="true" {
gridAnchor|='CATGRID_RIGHT';
}
if ${GridLayoutConstraint/Anchor/AttachedToTop}=="true" {
gridAnchor|='CATGRID_TOP';
}
if ${GridLayoutConstraint/Anchor/AttachedToBottom}=="true" {
gridAnchor|='CATGRID_BOTTOM';
}
if ${GridLayoutConstraint/Anchor/ConstantWidth}=="true" {
gridAnchor|='CATGRID_CST_WIDTH';
}
if ${GridLayoutConstraint/Anchor/ConstantHeight}=="true" {
gridAnchor|='CATGRID_CST_HEIGHT';
}@>
$InstanceName->SetGridConstraints(${int:GridLayoutConstraint/Row},${int:GridLayoutConstraint/Col},${int:GridLayoutConstraint/Width},${int:GridLayoutConstraint/Height},<@gridAnchor@>);
<@}@>



<@if $GridResizableData!="" {
foreach ${GridResizableData/ResizableRows} {@>
${/InstanceName}->SetGridRowResizable(${int:this},1);
<@}
foreach ${GridResizableData/ResizableColumns} {@>
${/InstanceName}->SetGridColumnResizable(${int:this},1);
<@}
}

configuration Generation {
if $TabulationLayoutData!="" { 
foreach ${TabulationLayoutData/HorizontalLines} {
if $Attachment != "Undefined" {@>
${/InstanceName}->SetHorizontalAttachment($Num,(CATDlgAttachment)${DLGTabAttachmentType:Attachment},
<@foreach $AttachedWidgets {@>_$this,<@}@>NULL);
<@}
}
foreach ${TabulationLayoutData/VerticalLines} {
if $Attachment != "Undefined" {@>
${/InstanceName}->SetVerticalAttachment($Num,(CATDlgAttachment)${DLGTabAttachmentType:Attachment},
<@foreach $AttachedWidgets {@>_$this,<@}@>NULL);
<@}
}
}
}@>


<@configuration Generation {
if $ApplyBtnPushed!="" {@>
AddAnalyseNotificationCB($InstanceName, $InstanceName->GetDiaAPPLYNotification(),(CATCommandMethod)&$ClassName::$ApplyBtnPushed,NULL);
<@}
if $CancelBtnPushed!="" {@>
AddAnalyseNotificationCB($InstanceName, $InstanceName->GetDiaCANCELNotification(),(CATCommandMethod)&$ClassName::$CancelBtnPushed,NULL);
<@}
if $CloseBtnPushed!="" {@>
AddAnalyseNotificationCB($InstanceName, $InstanceName->GetDiaCLOSENotification(),(CATCommandMethod)&$ClassName::$CloseBtnPushed,NULL);
<@}
if $HelpBtnPushed!="" {@>
AddAnalyseNotificationCB($InstanceName, $InstanceName->GetDiaHELPNotification(),(CATCommandMethod)&$ClassName::$HelpBtnPushed,NULL);
<@}
if $OKBtnPushed!="" {@>
AddAnalyseNotificationCB($InstanceName, $InstanceName->GetDiaOKNotification(),(CATCommandMethod)&$ClassName::$OKBtnPushed,NULL);
<@}
if $PreviewBtnPushed!="" {@>
AddAnalyseNotificationCB($InstanceName, $InstanceName->GetDiaPREVIEWNotification(),(CATCommandMethod)&$ClassName::$PreviewBtnPushed,NULL);
<@}
if $MDIActivated!="" {@>
AddAnalyseNotificationCB($InstanceName, $InstanceName->GetMDIActivateNotification(),(CATCommandMethod)&$ClassName::$MDIActivated,NULL);
<@}
if $MDIClosed!="" {@>
AddAnalyseNotificationCB($InstanceName, $InstanceName->GetMDICloseNotification(),(CATCommandMethod)&$ClassName::$MDIClosed,NULL);
<@}
if $MDIMaximized!="" {@>
AddAnalyseNotificationCB($InstanceName, $InstanceName->GetMDIMaximizeNotification(),(CATCommandMethod)&$ClassName::$MDIMaximized,NULL);
<@}
if $MDIMinimized!="" {@>
AddAnalyseNotificationCB($InstanceName, $InstanceName->GetMDIMinimizeNotification(),(CATCommandMethod)&$ClassName::$MDIMinimized,NULL);
<@}
if $MDINext!="" {@>
AddAnalyseNotificationCB($InstanceName, $InstanceName->GetMDINextNotification(),(CATCommandMethod)&$ClassName::$MDINext,NULL);
<@}
if $MDIPrevious!="" {@>
AddAnalyseNotificationCB($InstanceName, $InstanceName->GetMDIPreviousNotification(),(CATCommandMethod)&$ClassName::$MDIPrevious,NULL);
<@}
if $MDIRestored!="" {@>
AddAnalyseNotificationCB($InstanceName, $InstanceName->GetMDIRestoreNotification(),(CATCommandMethod)&$ClassName::$MDIRestored,NULL);
<@}
}
configuration XAML {@>
if(cmd!=NULL && m_ApplyBtnPushed!="") {
cmd->AddCBAnalyse($InstanceName, $InstanceName->GetDiaAPPLYNotification(),m_ApplyBtnPushed);
}
if(cmd!=NULL && m_CancelBtnPushed!="") {
cmd->AddCBAnalyse($InstanceName, $InstanceName->GetDiaCANCELNotification(),m_CancelBtnPushed);
}
if(cmd!=NULL && m_CloseBtnPushed!="") {
cmd->AddCBAnalyse($InstanceName, $InstanceName->GetDiaCLOSENotification(),m_CloseBtnPushed);
}
if(cmd!=NULL && m_HelpBtnPushed!="") {
cmd->AddCBAnalyse($InstanceName, $InstanceName->GetDiaHELPNotification(),m_HelpBtnPushed);
}
if(cmd!=NULL && m_OKBtnPushed!="") {
cmd->AddCBAnalyse($InstanceName, $InstanceName->GetDiaOKNotification(),m_OKBtnPushed);
}
if(cmd!=NULL && m_PreviewBtnPushed!="") {
cmd->AddCBAnalyse($InstanceName, $InstanceName->GetDiaPREVIEWNotification(),m_PreviewBtnPushed);
}
if(cmd!=NULL && m_MDIActivated!="") {
cmd->AddCBAnalyse($InstanceName, $InstanceName->GetMDIActivateNotification(),m_MDIActivated);
}
if(cmd!=NULL && m_MDIClosed!="") {
cmd->AddCBAnalyse($InstanceName, $InstanceName->GetMDICloseNotification(),m_MDIClosed);
}
if(cmd!=NULL && m_MDIMaximized!="") {
cmd->AddCBAnalyse($InstanceName, $InstanceName->GetMDIMaximizeNotification(),m_MDIMaximized);
}
if(cmd!=NULL && m_MDIMinimized!="") {
cmd->AddCBAnalyse($InstanceName, $InstanceName->GetMDIMinimizeNotification(),m_MDIMinimized);
}
if(cmd!=NULL && m_MDINext!="") {
cmd->AddCBAnalyse($InstanceName, $InstanceName->GetMDINextNotification(),m_MDINext);
}
if(cmd!=NULL && m_MDIPrevious!="") {
cmd->AddCBAnalyse($InstanceName, $InstanceName->GetMDIPreviousNotification(),m_MDIPrevious);
}
if(cmd!=NULL && m_MDIRestored!="") {
cmd->AddCBAnalyse($InstanceName, $InstanceName->GetMDIRestoreNotification(),m_MDIRestored);
}
<@}
if (${ApplyBtnTitle/IsDefault}=="false"){@>
$InstanceName->SetAPPLYTitle(${final:ApplyBtnTitle});
<@}
if (${CancelBtnTitle/IsDefault}=="false"){@>
$InstanceName->SetCANCELTitle(${final:CancelBtnTitle});
<@}
if (${HelpBtnTitle/IsDefault}=="false"){@>
$InstanceName->SetHELPTitle(${final:HelpBtnTitle});
<@}
if (${OKBtnTitle/IsDefault}=="false"){@>
$InstanceName->SetOKTitle(${final:OKBtnTitle});
<@}
if (${PreviewBtnTitle/IsDefault}=="false"){@>
$InstanceName->SetPREVIEWTitle(${final:PreviewBtnTitle});
<@}
if (${DefaultButton/IsDefault}=="false"){@>
$InstanceName->SetDefaultButton(${final:DefaultButton});
<@}
if (${ApplyBtnEnabled/IsDefault}=="false"){@>
$InstanceName->SetAPPLYSensitivity(${DLGEnabled:ApplyBtnEnabled});
<@}
if (${CancelBtnEnabled/IsDefault}=="false"){@>
$InstanceName->SetCANCELSensitivity(${DLGEnabled:CancelBtnEnabled});
<@}
if (${CloseBtnEnabled/IsDefault}=="false"){@>
$InstanceName->SetCLOSESensitivity(${DLGEnabled:CloseBtnEnabled});
<@}
if (${HelpBtnEnabled/IsDefault}=="false"){@>
$InstanceName->SetHELPSensitivity(${DLGEnabled:HelpBtnEnabled});
<@}
if (${OKBtnEnabled/IsDefault}=="false"){@>
$InstanceName->SetOKSensitivity(${DLGEnabled:OKBtnEnabled});
<@}
if (${PreviewBtnEnabled/IsDefault}=="false"){@>
$InstanceName->SetPREVIEWSensitivity(${DLGEnabled:PreviewBtnEnabled});
<@}
if (${Width/IsDefault}=="false") && (${Height/IsDefault}=="false") {@>
$InstanceName->SetRectDimensions(0,0,${final:Height},${final:Width});
<@}@>


]]></Code>
        </Build>
        <Declarations>
          <Code><![CDATA[
class CATDlgDialog;

]]></Code>
        </Declarations>
        <Includes>
          <Code><![CDATA[
#include "CATDlgDialog.h"
<@configuration Simulation {@>#include "CATDlgGridConstraints.h"
#include "CATMsgCatalog.h"
#include "CATRscCatalog.h"
<@}@>
]]></Code>
        </Includes>
        <HeaderCode>
          <Code><![CDATA[
<@ function DeclareWidgets {@>
$Variables<@foreach ${Children} {@><@call DeclareWidgets;@><@}@>
<@}@>

<@ function DeclareClasses {@>
$Declarations<@foreach ${Children} {@><@call DeclareClasses;@><@}@>
<@}@>

<@! Begin of class declaration !@>

// BEGIN OF HEADER CODE
// ----------------------------------------
    <@! Includes of the header file, based on the widget used in the dialog !@>
#ifndef ${/ClassName}_h
#define ${/ClassName}_h

#include "CATDlgDialog.h"
<@unique 2 {@>
<@foreach ${/DesignModel/RootWidget/Children} {@><@call DeclareClasses;@><@}@>
<@}@>

<@ usercode ${/CodeModel/UserCodes/ClassIncludes}; @>

<@! Class declaration !@>

<@if ${/Exported}=="true" {@>
#ifdef  _WINDOWS_SOURCE
#ifdef  __${/ModuleName}
#define ${/ExportVariable}  __declspec(dllexport)
#else
#define ${/ExportVariable}     __declspec(dllimport)
#endif
#else
#define ${/ExportVariable}
#endif

<@}@>
class<@specialtext SPC; @>${/ExportVariable}<@specialtext SPC; @>${/ClassName} : public CATDlgDialog {
<@if ${/HandleResources}=="true" {@>DeclareResource(${/ClassName}, CATDlgDialog)
<@}@>
public:
	${/ClassName}(CATDialog * iParent, const CATString& iDialogName);
	<@ if ${/DesignModel/RootWidget/IsCommand}=="true" {@>
	${/ClassName}();
	<@}@>
	virtual ~${/ClassName}();
	void Build();

	// Copy ctor and assignment operators are declared but not defined by infra
	${/ClassName}(const $ClassName&);
	${/ClassName}& operator= (const $ClassName&);
	<@ if ${/DesignModel/RootWidget/IsCommand}=="true" {@>
    /**
     * Overload this method: when your command gains focus
     * <p>
     * Activates a command.
     * @param iFromClient
     *   The command that requests to activate the current one.
     * @param iEvtDat
     *   The notification sent.
     */
    virtual CATStatusChangeRC Activate(
                CATCommand * iFromClient,
                CATNotification * iEvtDat);

    /**
     *  Overload this method: when your command loses focus
     * <p>
     * Deactivates a command.
     * @param iFromClient
     *   The command that takes the current active place.
     * @param iEvtDat
     *   The notification sent.
     */
    virtual CATStatusChangeRC Desactivate(
                CATCommand * iFromClient,
                CATNotification * iEvtDat);

    /**
     *  Overload this method: when your command is canceled
     * <p>
     * Cancels a command.
     * @param iFromClient
     *   The command that takes the current active place.
     * @param iEvtDat
     *   The notification sent.
     */
    virtual CATStatusChangeRC Cancel(
                CATCommand * iFromClient,
                CATNotification * iEvtDat);
    <@}@>
private:
<@ if ${/DesignModel/RootWidget/IsCommand}=="true" {@>
int m_FirstTime;

<@}@>
<@! List of widgets !@>
<@foreach ${/DesignModel/RootWidget/Children} {@><@call DeclareWidgets;@><@}@>
<@! End of List of widgets !@>

<@! List of callbacks !@>

<@foreach ${/CodeModel/Callbacks} {@>${ReturnType}<@specialtext SPC; @>$Name(${Arguments});
<@}@>
<@! End of callbacks !@>

<@usercode ${/CodeModel/UserCodes/ClassMembers};@>
};

#endif

]]></Code>
        </HeaderCode>
        <ImplementCode>
          <Code><![CDATA[
<@ function DeclareHeaders {@>
$Includes<@foreach ${Children} {@><@call DeclareHeaders;@><@}@>
<@}@>

<@function ConstructWidgets {@>
$Construction<@foreach ${Children} {@><@call ConstructWidgets;@><@}@>
<@}@>

<@function DestructWidgets {@>
$Destruction<@foreach ${Children} {@><@call DestructWidgets;@><@}@>
<@}@>

<@! Begin of Class Implementation !@>

// ----------------------------------------
// BEGIN OF IMPLEMENTATION CODE
// ----------------------------------------
#include "$ClassName.h"
#include "CATDlgGridConstraints.h"
<@ if ${/DesignModel/RootWidget/IsCommand}=="true" { @>
#include "CATApplicationFrame.h"
#include "CATCreateExternalObject.h"
CATCreateClass(${/ClassName});

<@}@>
<@unique 2 {@>
<@foreach ${/DesignModel/RootWidget/Children} {@><@call DeclareHeaders;@><@}@>
<@}@>

<@usercode ${/CodeModel/UserCodes/ImplementIncludes}; @>
<@specialtext NL; @>
${/ClassName}::${/ClassName}(CATDialog* iParent, const CATString& iName)
    :CATDlgDialog(iParent,iName,0
<@if ${/DesignModel/RootWidget/UseOKButton}=="true" { @>|CATDlgWndOK
<@}
if ${/DesignModel/RootWidget/UseCancelButton}=="true" { @>|CATDlgWndCANCEL
<@}
if ${/DesignModel/RootWidget/UseHelpButton}=="true" { @>|CATDlgWndHELP
<@}
if ${/DesignModel/RootWidget/UseApplyButton}=="true" { @>|CATDlgWndAPPLY
<@}
if ${/DesignModel/RootWidget/UseCloseButton}=="true" { @>|CATDlgWndBtnClose
<@}
if ${/DesignModel/RootWidget/UseOKCancelPreviewButtons}=="true" { @>|CATDlgWndBtnOKCancelPreview
<@}
if ${/DesignModel/RootWidget/UseOKApplyCloseButtons}=="true" { @>|CATDlgWndBtnOKApplyClose
<@}
if ${/DesignModel/RootWidget/ModalDialog}=="true" { @>|CATDlgWndModal
<@}
if ${/DesignModel/RootWidget/Decoration/IsDefault}=="false" { @>|${final:/DesignModel/RootWidget/Decoration}
<@}
if ${/DesignModel/RootWidget/NoButtons}=="true" { @>|CATDlgWndNoButton
<@}
if ${/DesignModel/RootWidget/CreateOnPointer}=="true" { @>|CATDlgWndPointerLocation
<@}
if ${/DesignModel/RootWidget/AutoResize}=="true" { @>|CATDlgWndAutoResize
<@}
if ${/DesignModel/RootWidget/NotResizable}=="true" { @>|CATDlgWndNoResize
<@}
if ${/DesignModel/RootWidget/MDIChild}=="true" { @>|CATDlgWndChildMDI
<@}
if ${/DesignModel/RootWidget/TitleBarHelpButton}=="true" { @>|CATDlgWndTitleBarHelp
<@}@>| ${final:/DesignModel/RootWidget/LayoutType}
)
{

<@foreach ${/DesignModel/RootWidget/Children} {
call ConstructWidgets;
}@>
<@ if ${/DesignModel/RootWidget/IsCommand}=="true" { @>
m_FirstTime = 1;
RequestStatusChange (CATCommandMsgRequestExclusiveMode);
<@}@>
<@usercode ${/CodeModel/UserCodes/DialogConstructor};@>
}

<@ if ${/DesignModel/RootWidget/IsCommand}=="true" { @>
${/ClassName}::${/ClassName}()
    :CATDlgDialog((CATApplicationFrame::GetApplicationFrame())->GetMainWindow(), "${/ClassName}",0
<@if ${/DesignModel/RootWidget/UseOKButton}=="true" { @>|CATDlgWndOK
<@}
if ${/DesignModel/RootWidget/UseCancelButton}=="true" { @>|CATDlgWndCANCEL
<@}
if ${/DesignModel/RootWidget/UseHelpButton}=="true" { @>|CATDlgWndHELP
<@}
if ${/DesignModel/RootWidget/UseApplyButton}=="true" { @>|CATDlgWndAPPLY
<@}
if ${/DesignModel/RootWidget/UseCloseButton}=="true" { @>|CATDlgWndBtnClose
<@}
if ${/DesignModel/RootWidget/UseOKCancelPreviewButtons}=="true" { @>|CATDlgWndBtnOKCancelPreview
<@}
if ${/DesignModel/RootWidget/UseOKApplyCloseButtons}=="true" { @>|CATDlgWndBtnOKApplyClose
<@}
if ${/DesignModel/RootWidget/ModalDialog}=="true" { @>|CATDlgWndModal
<@}
if ${/DesignModel/RootWidget/Decoration/IsDefault}=="false" { @>|${final:/DesignModel/RootWidget/Decoration}
<@}
if ${/DesignModel/RootWidget/NoButtons}=="true" { @>|CATDlgWndNoButton
<@}
if ${/DesignModel/RootWidget/CreateOnPointer}=="true" { @>|CATDlgWndPointerLocation
<@}
if ${/DesignModel/RootWidget/AutoResize}=="true" { @>|CATDlgWndAutoResize
<@}
if ${/DesignModel/RootWidget/NotResizable}=="true" { @>|CATDlgWndNoResize
<@}
if ${/DesignModel/RootWidget/MDIChild}=="true" { @>|CATDlgWndChildMDI
<@}
if ${/DesignModel/RootWidget/TitleBarHelpButton}=="true" { @>|CATDlgWndTitleBarHelp
<@}@>| ${final:/DesignModel/RootWidget/LayoutType}
)
{

<@foreach ${/DesignModel/RootWidget/Children} {
call ConstructWidgets;
}@>
m_FirstTime = 1;
RequestStatusChange (CATCommandMsgRequestExclusiveMode);
<@usercode ${/CodeModel/UserCodes/DialogDefaultConstructor};@>
}

<@}@>

${/ClassName}::~${/ClassName}()
{
<@usercode ${/CodeModel/UserCodes/DialogDestructor};@>
<@foreach ${/DesignModel/RootWidget/Children} {
call DestructWidgets;
}@>
}

<@ function GetPreBuildCode { @>
$PreBuild<@foreach ${Children} {
call GetPreBuildCode;
}
}@>

<@ function InstantiateWidgets { @>
$Instantiation<@foreach ${Children} {
call InstantiateWidgets;
}
}@>

<@ function BuildWidgets { @>
$Build<@foreach ${Children} {
call BuildWidgets;
}
}@>

void $ClassName::Build() 
{
int style=0;
${/DesignModel/RootWidget/PreBuild}
<@foreach ${/DesignModel/RootWidget/Children} {
call GetPreBuildCode;
}@>
<@usercode ${/CodeModel/UserCodes/PreBuildCode};@>

<@foreach ${/DesignModel/RootWidget/Children} {
call InstantiateWidgets;
}@>

${/DesignModel/RootWidget/Build}
<@foreach ${/DesignModel/RootWidget/Children} {
call BuildWidgets;
}@>


<@! Generated build code to put here!@>
<@usercode ${/CodeModel/UserCodes/BuildAdditionalCode};@>
}

<@! Begin of Callbacks Implementation !@>
<@foreach ${/CodeModel/Callbacks} {@>
${ReturnType}<@specialtext SPC; @>${/ClassName}::$Name(${Arguments})
{
<@usercode $UserCode; @>
}
<@}@>
<@! End of Callbacks Implementation !@>
<@ if ${/DesignModel/RootWidget/IsCommand}=="true" { @>

//  Overload this method: when your command gains focus
//
// Activates a command.
//   iFromClient :The command that requests to activate the current one.
//   iEvtDat :The notification sent.
// ----------------------------------------------------
CATStatusChangeRC ${/ClassName}::Activate( CATCommand * iFromClient, CATNotification * iEvtDat)
{
  if (m_FirstTime)
  {
     Build();
     m_FirstTime = 0;
  }
  SetVisibility(CATDlgShow);
  <@usercode ${/CodeModel/UserCodes/UserActivateCode};@>
  return (CATStatusChangeRCCompleted);
}

//  Overload this method: when your command loses focus
//
// Deactivates a command.
//   iFromClient :The command that requests to activate the current one.
//   iEvtDat :The notification sent.
// ----------------------------------------------------
CATStatusChangeRC ${/ClassName}::Desactivate( CATCommand * iFromClient, CATNotification * iEvtDat)
{
  SetVisibility (CATDlgHide);
  <@usercode ${/CodeModel/UserCodes/UserDesactivateCode};@>
  return (CATStatusChangeRCCompleted);
}

//  Overload this method: when your command is canceled
//
// Cancel a command.
//   iFromClient :The command that requests to activate the current one.
//   iEvtDat :The notification sent.
// ----------------------------------------------------
CATStatusChangeRC ${/ClassName}::Cancel( CATCommand * iFromClient, CATNotification * iEvtDat)
{
  SetVisibility (CATDlgHide);
  <@usercode ${/CodeModel/UserCodes/UserCancelCode};@>
  RequestDelayedDestruction();
  return (CATStatusChangeRCCompleted);
}

<@}@>
<@! Begin of User Implement code !@>
// You can put here the implementation of class methods
<@usercode ${/CodeModel/UserCodes/UserImplementCode};@>

// End of implementation of class methods
<@! End of User Implement code !@>

<@! End of Class Implementation !@>

]]></Code>
        </ImplementCode>
      </Production>
    </ExportData></Content></DSxDevCodeGen>
